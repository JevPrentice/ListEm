unit PersonController;

string msg;

Person[] getAllPeople(){
	return Person:all();
}

Person[] getPeopleForMobileNumber(string mobileNumber){
	return Person:equals(mobileNumber, mobileNumber);
}

Person[] getPeopleForIdNumber(string idNumber){
	return Person:equals(idNumber, idNumber);
}

Person getPersonForIdNumber(string idNumber){
	Person[] matchingPeople = Person:equals(idNumber, idNumber);
	if (matchingPeople.length() <= 0){
		return null;
	}
	return matchingPeople.get(0);
}

bool isIdRegistered(string idNumber){
	Person p = getPersonForIdNumber(idNumber);
	if (p == null) { return false; }
	return true;
}

Person createOrUpdatePerson(string firstNames, string surname, string mobileNumber, string idNumber, GENDER gender){

	if (firstNames == null || String:length(firstNames) < 1){
		msg = "Please enter a First Name"; Alert:error(msg); return null;
	}

	if (surname == null || String:length(surname) < 1){
		msg = "Please enter a Surname"; Alert:error(msg); return null;
	}

	if (mobileNumber == null || String:length(mobileNumber) < 8 || String:length(mobileNumber) > 12){
		msg = "Please enter a MobileNumber"; Alert:error(msg); return null;
	}

	if (Globals:isStringNumeric(mobileNumber) == false){
		msg = "Please enter a numeric Mobile Number"; Alert:error(msg); return null;
	}

	if (idNumber == null || String:length(idNumber) != 13){
		msg = "Please enter a 13 digit numeric ID Number"; Alert:error(msg); return null;
	}

	if (Globals:isStringNumeric(idNumber) == false){
		msg = "Please enter a numeric ID Number"; Alert:error(msg); return null;
	}

	if (gender == null){
		msg = "Please select a Gender"; Alert:error(msg); return null;
	}

	Person person = getPersonForIdNumber(idNumber);
	// bool isEdit = true;

  	if (person == null) {
  		person = Person:new();
  		person.dateRegistered = Mez:now();
  		// isEdit = false;
  	}

  	person.mobileNumber = mobileNumber;
	person.firstNames = firstNames;
	person.surname = surname;
	person.idNumber = idNumber;
	person.gender = gender;
	
	person.save();	

	return person;

}

void deletePerson(Person p){

	if (p.admin_person != null){
		msg = String:concat("Unable to delete Person: ", p.firstNames, " ", p.surname, " it is associated to an Admin User."); Alert:info(msg);
		return null;
	}

	if (p.doctor_person != null){
		msg = String:concat("Unable to delete Person: ", p.firstNames, " ", p.surname, " it is associated to a Doctor User."); Alert:info(msg);
		return null;
	}

	Person:delete(p);

	msg = String:concat("Person ", p.firstNames, " ", p.surname, " deleted"); Alert:info(msg);
}
