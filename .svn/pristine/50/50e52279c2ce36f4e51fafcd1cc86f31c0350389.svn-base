unit ActivityManagement;

ActivityTemp activityTemp;

ChannelKeyObject uChannelKeyObject;

string message;
string nav_return;

void init(){

	message = "";

	if (nav_return == null || nav_return == ""){
		nav_return = "nav_activity_order_managememnt";
	}

}

ActivityTemp[] getActivityTemp(){

	ActivityTemp[] activityTemps;

	ActivityTemp activityTemp = ActivityTemp:new();

	Pattern[] patterns = ActivityController:getAllActivities();
	Pattern p;

	ChannelKeyObject cko;

	PatternType patternType;

	for (int i = 0; i < patterns.length(); i++){
		p = patterns.get(i);

		cko = p.PatternChannelKey;
		
		activityTemp.activityID = p.patternID;
		activityTemp.activityStartSMS = p.patternStartSMS;
		activityTemp.activityEndSMS = p.patternEndSMS;
		activityTemp.activityReminderSMS = p.patternReminderSMS;
		activityTemp.activityReminderTime = p.patternReminderTime;
		activityTemp.activityIVRstring = p.patternIVRstring;
		activityTemp.ivr_length_sec = p.ivr_length_sec;

		if (cko != null){
			activityTemp.activityChannelID = cko.patternChannelID;
			activityTemp.activityChannelDescription = cko.patternChannelDescription;
		} else {
			activityTemp.activityChannelID = 0;
			activityTemp.activityChannelDescription = "";
		}
		
		activityTemp.activityType = ActivityTypeController:getActivityTypeID(p);

		activityTemps.append(activityTemp);
		activityTemp = ActivityTemp:new();
	}

	return activityTemps;

}

string navigate(){
	return nav_return;
}

string activityEdit(){

	if (activityTemp == null){
		message = "Activity could not be found";
   		Alerter:alert(message);
		return null;
	}

	Pattern activity = ActivityController:getActivityFromActivityID(activityTemp.activityID);

	ActivityEdit:activity = activity;
	ActivityEdit:nav_return = "nav_activity_management";
	return "nav_activity_edit";
}

string activityDelete(){

	if (activityTemp == null){
		message = "Activity could not be found";
   		Alerter:alert(message);
		return null;
	}

	Pattern activity = ActivityController:getActivityFromActivityID(activityTemp.activityID);
	if (activity == null){
		message = "Activity could not be found";
   		Alerter:alert(message);
		return null;
	}
	
	PatternOrder[] activityOrders = ActivityOrderController:getActivityOrdersForActivity(activity);

	if (activityOrders != null){
		if (activityOrders.length() > 0){
			PatternOrder activityOrder = activityOrders.get(0);
			
			Sequence sequence = activityOrder.sequence_patternOrder;
			message = String:concat("Activity cannot be removed because it is associated to the Sequence: ", sequence.sequenceID, " through Activity Order: ", activityOrder.patternOrder);
			Alerter:alert(message);
			return null;
		}
	}

	PatternMessageText[] messageOrders = MessageOrderController:getMassageOrdersForActivity(activity);

	if (messageOrders != null){
		if (messageOrders.length() > 0){
			PatternMessageText messageOrder = messageOrders.get(0);
			Message o_message = messageOrder.patternMessageText_Message;
			message = String:concat("Activity cannot be removed because it is associated to the Message: ", o_message._MTID, " through Message Order: ", messageOrder._MTID_order);
			Alerter:alert(message);
			return null;
		}
	}

	IVRMappingTable:deleteIVRMappingTable(activity);
	Pattern:delete(activity);

	message = "Activity Deleted";
	Alerter:alert(message);
	return null;
}

string createActivity(){
	ActivityEdit:activity = null;
	ActivityEdit:nav_return = "nav_activity_management";
	return "nav_activity_edit";
}