unit PatternTypeList;

PatternType patternType;
Pattern pattern;
bool editactive;

PTFillter  uPTFillter;

PatternType deletePatternType;

string message;

void init(){
    patternType = PatternType:new();
    patternType.MOMultiple = 0;
	patternType.RespValMCR = 0;
	patternType.RespValQO = 0;
	patternType.RespValASV = 0;
	patternType.infoRedo = 0;
	patternType.informNext = 0;
	patternType.StopPatternOnCorrect = 0;
	patternType.RandomPattern = 0;	
	uPTFillter = PTFillter:new();
    editactive = false;
}

PatternType[] getPatternTypes(){
    return PatternType:all();
}

void patternTypeEdit(){
/*	patternType.MOMultiple = 0;
	patternType.RespValMCR = 0;
	patternType.RespValQO = 0;
	patternType.RespValASV = 0;
	patternType.infoRedo = 0;
	patternType.informNext = 0;
	patternType.StopPatternOnCorrect = 0;
	patternType.RandomPattern = 0;*/
    
    if(patternType.MOMultiple == 1) {uPTFillter.MOMultiple = true;} else {uPTFillter.MOMultiple = false;}
    
	if(patternType.RespValMCR == 1) {uPTFillter.RespValMCR = true;} else {uPTFillter.RespValMCR = false;}
    
	if(patternType.RespValQO == 1) {uPTFillter.RespValQO = true;} else {uPTFillter.RespValQO = false;}
    
	if(patternType.RespValASV == 1) {uPTFillter.RespValASV = true;} else {uPTFillter.RespValASV = false;}
    
	if(patternType.infoRedo == 1) {uPTFillter.infoRedo = true;} else {uPTFillter.infoRedo = false;}
    
	if(patternType.informNext == 1) {uPTFillter.informNext = true;} else {uPTFillter.informNext = false;}
    
	if(patternType.StopPatternOnCorrect == 1) {uPTFillter.StopPatternOnCorrect = true;} else {uPTFillter.StopPatternOnCorrect = false;}
    
	if(patternType.RandomPattern == 1) {uPTFillter.RandomPattern = true;} else {uPTFillter.RandomPattern = false;}
    
    editactive = true;
    return null;
}

string patternTypeRemove(){

	PatternTypeTable[] ptts = ActivityTypeTableController:getActivityTypeTablesForActivityType(deletePatternType);
	
	if (ptts.length() >= 1){
		message = String:concat("This Activity Type cannot be deleted becuase it is currently linked to ", ptts.length() , " Activities");
        Alerter:alert(message);
		return null;
	}

	message = "Activity Type Deleted";
    Alerter:alert(message);

    PatternType:delete(deletePatternType);
    return null;
}

string savePatternType(){
	string patternTID = patternType.patternTypeID;
	PatternType[] patternTypes = PatternType:equals(patternTypeID, patternTID);
	if((patternTypes.length() == 0) || (editactive == true)) {
        
		if(uPTFillter.MOMultiple == true) {patternType.MOMultiple = 1;} else {patternType.MOMultiple = 0;}
        
		if(uPTFillter.RespValMCR == true) {patternType.RespValMCR = 1;} else {patternType.RespValMCR = 0;}
        
		if(uPTFillter.RespValQO == true) {patternType.RespValQO = 1;} else {patternType.RespValQO = 0;}
        
		if(uPTFillter.RespValASV == true) {patternType.RespValASV = 1;} else {patternType.RespValASV = 0;}
        
		if(uPTFillter.infoRedo == true) {patternType.infoRedo = 1;} else {patternType.infoRedo = 0;}
        
		if(uPTFillter.informNext == true) {patternType.informNext = 1;} else {patternType.informNext = 0;}
        
		if(uPTFillter.StopPatternOnCorrect == true) {patternType.StopPatternOnCorrect = 1;} else {patternType.StopPatternOnCorrect = 0;}
        
		if(uPTFillter.RandomPattern == true) {patternType.RandomPattern = 1;} else {patternType.RandomPattern = 0;}
        
	    patternType.save();
	    init();
    	Mez:alert("Pattern.PatternList.savePatternTypeAlert");
	} else {
    	Mez:alertError("Pattern.PatternList.savePatternTypeAlertError");
	}
    return null;
}

