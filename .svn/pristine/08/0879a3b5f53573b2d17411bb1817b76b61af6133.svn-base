unit ClientGroupList;

ClientGroup uClientGroup;
ClientGroup deleteClientGroup;
ClientGroup selectClientGroup;
ClientGroup pageClientGroup;

Client uClient;
Client pClient;
Client dClient;

Client[] csreturnin;
Client[] csreturnnotin;

string test;

void init() {
	if(uClientGroup == null) {uClientGroup = ClientGroup:new();}
    if(uClient==null) {uClient = Client:new();}
}

void initselect(){
    groupDataRefresh();
}

void saveClientGroup() {
	uClientGroup.client_chews = uClient; 
	uClientGroup.save();
	uClientGroup = ClientGroup:new();
}

void editClientGroup() {
    uClient = uClientGroup.client_chews;
    //do edit on screen
    return null;
}

void deleteClientGroup() {
	ClientGroup:delete(deleteClientGroup);
}

string addClientToGroup() {
    pageClientGroup = selectClientGroup;
	return "select_from_clients";
}

Client getClientGroupChew(ClientGroup cg) {
    return cg.client_chews;
}

ClientGroup getGroupForClient(Client c) {
  // return c.client_chws;
    return c.group;
}

string getGroupNameForClient(Client c){
    ClientGroup cg = getGroupForClient(c); string gn = "";
    if(cg!=null){gn = cg.name;}
    return gn;
} 

ClientGroup[] getAllClientGroups() {
	return ClientGroup:all();
}

Client[] getAllClientsFromGroupIn(ClientGroup cg) {
    return cg.client_chws;
}

/* ********************************************************** */
/* ********************************************************** */

Client[] fGetAllClientsNotInGroupsExec(){
    Client[] cs = Client:all(); int maxi = cs.length(); Client[] csreturn = null; Client c; ClientGroup cg;
    for(int i = 0; i < maxi; i++){
        c = cs.get(i);
        cg = getGroupForClient(c);
        if (cg == null){csreturn.append(c);}
    }
    return csreturn;
}

Client[] fGetAllClientsFromGroupInExec(ClientGroup cgIn){
    Client[] cs = Client:all(); int maxi = cs.length(); Client[] csreturn = null; Client c; ClientGroup cg;
    for(int i = 0; i < maxi; i++){
        c = cs.get(i);
        cg = getGroupForClient(c);
        if (cg == cgIn){csreturn.append(c);}
    }
    return csreturn;    
}

Client[] fGetAllClientsFromGroupInExecAlt(ClientGroup cgIn){
    // Client[] csreturn = Client:relationshipIn(client_chws, cgIn);
    Client[] csreturn = cgIn.client_chws;
    return csreturn;    
}

/* ********************************************************** */
/* ********************************************************** */

Client[] getAllClientsFromGroup() {
    return csreturnin;
}

Client[] fGetAllClientsNotInGroups(){
    return csreturnnotin;
}

string addClient() {    
    //pageClientGroup.client_chws.append(pClient); - removed by JV 20140622
    pClient.group = pageClientGroup;
    pClient.save();
    groupDataRefresh();   
    return "select_from_clients";
}

string removeClient() {    
    dClient.group = null;
    dClient.save();
    groupDataRefresh();
    return "select_from_clients";
}

void groupDataRefresh(){
    csreturnin = fGetAllClientsFromGroupInExecAlt(pageClientGroup); //fGetAllClientsFromGroupInExec(pageClientGroup);
    csreturnnotin = fGetAllClientsNotInGroupsExec();
    test = String:concat(pageClientGroup.name, " - ", csreturnin.length(), " - ", Mez:now());
}

/* ********************************************************** */
/* ********************************************************** */

Client getClientCHEW(Client c) {
    //get the group that the client belongs to
    ClientGroup cg = getGroupForClient(c);
    if(cg != null){
         //get the chew leader for the group that the client belongs to
        Client chew = getClientGroupChew(cg);
        if(chew != null) {
          return chew;
        }else {
            Mez:log(Strings:concat("getClientCHEW: Could not get CHEW for the Group ", cg.name,"."));
            return null;
        }
    }else {
        Mez:log(Strings:concat("getClientCHEW: Could not get CHW Group the for CHW ", c.firstName,"."));
        return null;
    }
}

/* ********************************************************** */
/* ********************************************************** */

Client[] getAllCHWFromGroup(Client c){
    ClientGroup cg = getGroupForClient(c); Client[] csreturn = null;
    if(cg != null) {
        csreturn = cg.client_chws;
        return  csreturn;
    }else {
        return null;    
    }
}