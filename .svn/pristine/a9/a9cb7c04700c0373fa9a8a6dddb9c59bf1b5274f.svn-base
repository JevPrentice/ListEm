unit SystemReport;

KeyValueTemp[] activeUsers;

// KeyValueTemp[] searchActivitySummary;
KeyValueTemp[] smsActivitySummary;
KeyValueTemp[] ivrActivitySummary;

PatternHistory activityHistory;

int numActiveTopics;

void init(){

	activeUsers = getActiveUsersSummary();

	numActiveTopics = TopicController:countActiveTopics();

	// searchActivitySummary = KeyValueTempController:getSearchActivitySummary();

	smsActivitySummary = KeyValueTempController:getSmsActivitySummary();

	ivrActivitySummary = KeyValueTempController:getIvrActivitySummary();
	
	return null;
}

string viewUserActivity(){
	UserActivity:uClient = activityHistory.client_patternHistory;
	UserActivity:nav_destination_on_back = "nav_system_report";
	return "nav_user_activty";
}

KeyValueTemp[] getActiveUsersSummary(){
	KeyValueTemp[] autArr;

	KeyValueTemp aut = KeyValueTemp:new();
	aut.order = 1;
	aut.key = "Total Users in System";
	aut.iValue = countTotalUniqueUsers();
	autArr.append(aut);

	aut = KeyValueTemp:new();
	aut.order = 2;
	aut.key = "Scheduled Users in System";
	aut.iValue = countUniqueScheduledUsers();
	autArr.append(aut);

	aut = KeyValueTemp:new();
	aut.order = 3;
	aut.key = "Active Users in System";
	aut.iValue = countUniqueActiveUsers();
	autArr.append(aut);

	aut = KeyValueTemp:new();
	aut.order = 4;
	aut.key = "Active and Scheduled Users in System";
	aut.iValue = countUniqueActiveAndScheduledUsers();
	autArr.append(aut);

	aut = KeyValueTemp:new();
	aut.order = 5;
	aut.key = "Scheduled (Topic in Progress)";
	aut.iValue = countUniqueScheduledWithTopicInProgress();
	autArr.append(aut);

	aut = KeyValueTemp:new();
	aut.order = 6;
	aut.key = "Searching (Scheduled for another Topic)";
	aut.iValue = UserController:countUniqueSearchingButScheduledForAnotherTopic(true);
	autArr.append(aut);

	aut = KeyValueTemp:new();
	aut.order = 7;
	aut.key = "Searching (Not Scheduled for another Topic)";
	aut.iValue = UserController:countUniqueSearchingButScheduledForAnotherTopic(false);
	autArr.append(aut);

	aut = KeyValueTemp:new();
	aut.order = 8;
	aut.key = "Inactive Users in System";
	aut.iValue = UserController:countUniqueNotScheduled();
	autArr.append(aut);

	return autArr;
}

/* 1 */
int countTotalUniqueUsers(){
    Client[] users = UserController:getAllUsers();
    return users.length();
}

/* 2 */
int countUniqueScheduledUsers(){
    Client[] users = UserController:getUniqueScheduledUsers();
    return users.length(); 
}

/* 3 */
int countUniqueActiveUsers(){
    Client[] users = UserController:getUniqueActiveUsers();
    return users.length();
}

/* 4 */
int countUniqueActiveAndScheduledUsers(){
    return countUniqueScheduledUsers() + countUniqueActiveUsers();
}

/* 5 */
int countUniqueScheduledWithTopicInProgress(){
	Client[] clients = UserController:getActiveAndScheduledInProgressUsers();
	return clients.length();
}
