unit ActivityOrderManagement;

string message;

PatternOrder[] activityOrders;

Sequence sequenceFilter;
Pattern activityFilter;

ActivityOrderTemp[] activityOrdersTemp;
ActivityOrderTemp activityOrderTemp;

string nav_return;

void init(){

	if (nav_return == null){
		nav_return = "nav_activity_order_management";
	}

	message = "";
	resetViewCollections();

	if (activityFilter != null && sequenceFilter != null){
		string msg = "WARNING: There are 2 filters applied to this page";
        Logger:log(msg);
        Alerter:alert(msg);
		activityOrders.clear();
	} else if (activityFilter == null && sequenceFilter == null){
		activityOrders = ActivityOrderController:getAllActivityOrders();
	} else if (activityFilter != null && sequenceFilter == null){
		activityOrders = ActivityOrderController:getActivityOrdersForActivity(activityFilter);
	} else if (activityFilter == null && sequenceFilter != null){
		activityOrders = ActivityOrderController:getActivityOrdersForSequence(sequenceFilter);
	}

	activityOrdersTemp = ActivityOrderTempController:getActivityOrderTempFromPatternOrderArr(activityOrders);

}

void removeFiltersButton(){
	removeFilters();
	init();
}

string navigate(){
	removeFilters();
	resetViewCollections();
	return nav_return;
}

void removeFilters(){
	sequenceFilter = null;
	activityFilter = null;
}

void resetViewCollections(){
	activityOrders.clear();
	activityOrdersTemp.clear();
}

string editActivityOrder(){
	ActivityOrderEdit:activityOrder = ActivityOrderController:getActivityOrderFromActivityOrderTemp(activityOrderTemp);
	ActivityOrderEdit:nav_return = "nav_activity_order_management";
	nav_return = "nav_activity_order_edit";
	return navigate();
}

string editActivity(){
	ActivityEdit:activity = ActivityController:getActivityFromActivityID(activityOrderTemp.activity_id);
	ActivityEdit:activityOrder = ActivityOrderController:getActivityOrderFromActivityOrderTemp(activityOrderTemp);
	ActivityEdit:activityOrderManagement_sequenceFilter = sequenceFilter;
	ActivityEdit:activityOrderManagement_activityFilter = activityFilter;
	ActivityEdit:nav_return = "nav_activity_order_management";
	nav_return = "nav_activity_edit";
	return navigate();
}

void deletePatternOrder(){

	PatternOrder patternOrder = ActivityOrderController:getActivityOrderFromActivityOrderTemp(activityOrderTemp);

	if (patternOrder == null){
		message = "Activity Order could not be found or is invalid, error deleting Activity Order";
		Alerter:alert(message);
		return null;
	}

	PatternOrder:delete(patternOrder);
	patternOrder = null;

	message = "Activity Order Deleted";
	Alerter:alert(message);
	
	return init();
}

string nav_manage_sequences(){
	SequenceManagement:nav_return = "nav_activity_order_management";
	nav_return = "nav_manage_sequences";
	return navigate();
}

string nav_manage_activities(){
	nav_return = "nav_manage_activities";
	return navigate();
}

string nav_activity_order_create(){
	nav_return = "nav_activity_order_edit";
	return navigate();
}

string viewSequenceOrders(){

	if (activityOrderTemp == null){
		message = "No Activity Order has been selected";
   		Alerter:alert(message);
		return null;
	}

	PatternOrder activityOrder = ActivityOrderController:getActivityOrderFromActivityOrderTemp(activityOrderTemp);

	if (activityOrder == null){
		message = "No Activity Order found";
   		Alerter:alert(message);
		return null;
	}

	if (activityOrder.sequence_patternOrder == null){
		message = "This Activity Order has no associated Sequence";
   		Alerter:alert(message);
		return null;
	}

	SequenceOrder[] sequenceOrders = SequenceOrderController:getSequenceOrdersForSequence(activityOrder.sequence_patternOrder);

	if (sequenceOrders == null){
		message = "This Activity Order has no associated Sequence Orders";
   		Alerter:alert(message);
		return null;
	}

	if (sequenceOrders.length() < 1){
		message = "This Activity Order has no associated Sequence Orders";
   		Alerter:alert(message);
		return null;
	}

	SequenceOrder sequenceOrder = sequenceOrders.get(0);

	SequenceOrderManagement:sequenceFilter = null;
	SequenceOrderManagement:subTopicFilter = sequenceOrder.topic_sequenceOrder;
	activityOrder = null;

	nav_return = "nav_sequence_order_management";
	return navigate();
}

string viewMessageOrders(){

	if (activityOrderTemp == null){
		message = "No Activity Order has been selected";
   		Alerter:alert(message);
		return null;
	}

	PatternOrder activityOrder = ActivityOrderController:getActivityOrderFromActivityOrderTemp(activityOrderTemp);

	if (activityOrder == null){
		message = "No Activity Order found";
   		Alerter:alert(message);
		return null;
	}

	if (activityOrder.pattern_patternOrder == null){
		message = "This Activity Order has no associated Activity";
   		Alerter:alert(message);
		return null;
	}
	
	PatternMessageText[] messageOrders = MessageOrderController:getMassageOrdersForActivity(activityOrder.pattern_patternOrder);

	if (messageOrders == null){
		message = "This Activity Order has no associated Message Orders";
   		Alerter:alert(message);
		return null;
	}

	if (messageOrders.length() < 1){
		message = "This Activity Order has no associated Message Orders";
   		Alerter:alert(message);
		return null;
	}

	MessageOrderManagement:activityFilter = activityOrder.pattern_patternOrder;
	activityOrder = null;

	nav_return = "nav_message_order_management";
	return navigate();
}

string createMessage(){

	if (activityOrderTemp == null){
		message = "No Activity Order has been selected";
   		Alerter:alert(message);
		return null;
	}

	PatternOrder activityOrder = ActivityOrderController:getActivityOrderFromActivityOrderTemp(activityOrderTemp);

	if (activityOrder == null){
		message = "No Activity Order found";
   		Alerter:alert(message);
		return null;
	}

	Pattern activity = activityOrder.pattern_patternOrder;

	if (activity != null){
		int channelID = ActivityController:getActivityChannelKeyID(activity);
		if (channelID == 3){
			message = "No Messages can be added for an Activity with a IVR channel";
			Alerter:alert(message);
			return null;
		}
	}

	MessageEdit:activity = activity; //Pass this through for MessageOrderEdit so drop-downs are populated
	activityOrder = null;

	nav_return = "nav_message_edit";
	return navigate();
}