unit ActivityEdit;

Sequence activityOrderManagement_sequenceFilter;
Pattern activityOrderManagement_activityFilter;

Sequence sequence;
Pattern activity;

PatternOrder activityOrder;

string activityID;
string message;
string nav_return;

bool isEdit;

ChannelKeyObject uChannelKeyObject;

void init() {

	if (activity == null){
		activity = Pattern:new();
		isEdit = false;
		activityID = null;
	} else {
		uChannelKeyObject = activity.PatternChannelKey;
		isEdit = true;
		activityID = activity.patternID;
	}

	if (nav_return == null || nav_return == ""){
		nav_return = "nav_activity_order_management";
	}

	if (sequence != null){
		activityID = sequence.sequenceID;
	}

	message = "";
}

string saveActivity(){

	if(activity == null){
		message = "Activity is null";
	    Alerter:alertError(message);	    
	    return null;
    }

	if(activityID == null){
		message = "Activity ID is null";
	    Alerter:alertError(message);	    
	    return null;
	}

	if(String:length(activityID) <= 0){
		message = "Activity ID is blank";
	    Alerter:alertError(message);	    
	    return null;
	}

	activityID = String:upper(activityID);

	Sequence[] sequences = SequenceController:getSequencesForSequenceID(activityID);

	if (sequences != null){
		if (sequences.length() > 0){
			message = "Activity ID is the same as a Sequence ID, Please ensure that the ID is unique";
			Alerter:alertError(message);
			return null;
		}
	}

	Pattern activityTemp = ActivityController:getActivityFromActivityID(activityID);
	if (activityTemp != null){

		if (isEdit == true){
			if (activity.patternID != activityID){
				message = String:concat("Activity ID ", activityID," already exists, please ensure that the ActivityID is unique, activity NOT updated" );
				Alerter:alertError(message);
				return null;
			}
		} else {
			message = String:concat("Activity ID ", activityID," already exists, please ensure that the ActivityID is unique, activity NOT saved");
			Alerter:alertError(message);
			return null;
		}
	} 
	activityTemp = null;

	activity.patternID = activityID;

	if(activity.patternStartSMS == null){
		activity.patternStartSMS = "";
	}

	if(uChannelKeyObject == null){   
		message = "Channel key must be specified";
	    Alerter:alertError(message);	    
	    return null;
	}

	activity.PatternChannelKey = uChannelKeyObject;

    if (uChannelKeyObject.patternChannelID == 1){

    	activity.patternChannelID = CHANNEL.sms; //JP #323

    	activity.ivr_length_sec = null; //JP #339
    	activity.patternIVRstring = null;

    	ActivityEditSmsType:activity = activity;
    	ActivityEditSmsType:sequence = sequence;
    	ActivityEditSmsType:activityOrder = activityOrder;
    	ActivityEditSmsType:nav_return = nav_return;
    	nav_return = "nav_activity_type_edit";
    	
    } else if (uChannelKeyObject.patternChannelID == 3){

    	activity.patternChannelID = CHANNEL.ivr; //JP #323

    	PatternTypeTable ptt = activity.patternTypeTable_Pattern;
    	if (ptt != null){
    		PatternTypeTable:delete(ptt);
    		message = "SMS Activity Type Link deleted for this Activity because Activity is now IVR not SMS";
		    Alerter:alert(message);	    
    	}

    	ActivityEditIvrDetails:activity = activity;
    	ActivityEditIvrDetails:sequence = sequence;
    	ActivityEditIvrDetails:activityOrder = activityOrder;
    	ActivityEditIvrDetails:nav_return = nav_return;
    	nav_return = "nav_activity_ivr_details";
    } else {
		nav_return = "nav_activity_order_management";
    }

    activity.save();
    message = String:concat("Activity ", activity.patternID ," Saved");
    Alerter:alert(message);

    return navigate();
}

string navigate(){
	resetVars();

	if (nav_return == "nav_activity_order_management"){
		ActivityOrderManagement:sequenceFilter = activityOrderManagement_sequenceFilter;
		ActivityOrderManagement:activityFilter = activityOrderManagement_activityFilter;
	}

	return nav_return;
}

void resetVars(){
	sequence = null;
	activity = null;
	uChannelKeyObject = null;
	activityOrder = null;
}