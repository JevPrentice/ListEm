unit EditCounty;

bool isEdit;
string countyName;

decimal gpsLat;
decimal gpsLong;

// GEOGRAPHY geography;

County county;

string msg;

void init(){

	if (county == null){
		isEdit = false;
		resetVars();
	} else {
		isEdit = true;
		countyName = county.countyName;
		// gpsLat = county.gpsLat;
		// gpsLong = county.gpsLong;
		// geography = county.geography;
	}

}

void resetVars(){
	county = County:new();
	countyName = null;
	// gpsLat = null;
	// gpsLong = null;
}

string createCounty(){

	if (countyName == null || String:length(countyName) <= 0){
		msg = "Please enter a Name for the County";
		Alerter:alertError(msg);
		return null;
	}

	// if (gpsLat == null){
	// 	msg = "Please enter the decimal GPS Latitude coordinate";
	// 	Alerter:alertError(msg);
	// 	return null;
	// }

	// if (gpsLong == null){
	// 	msg = "Please enter the decimal GPS Longitude coordinate";
	// 	Alerter:alertError(msg);
	// 	return null;
	// }

	// if (geography == null){
	// 	msg = "Please Select a geography type";
	// 	Alerter:alertError(msg);
	// 	return null;
	// }

	county.countyName = countyName;
	// county.gpsLat = gpsLat;
	// county.gpsLong = gpsLong;
	// county.geography = geography;
	county.save();

	msg = String:concat("County ", county.countyName, " saved.");
	Alerter:alert(msg);

	return navigate("navManageCounties");
}

// string navManageCounties(){
// 	return navigate("ManageCounties");
// }

string navigate(string location){
	resetVars();
	return location;
}