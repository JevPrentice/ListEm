unit CRSchedule;

CareReceiver uCareReceiver;
Pharmacist uPhamacist;

FileObject uFileObject;

string uCallBackOutcome;

/*This function should be called in a scheduled function */
@Scheduled("* * * * *")
void  createClientForCareReciever(){
	
    /* JP changed from uCreateTestDataExec:testVInputs(); 2015-04-15 */
    MessageController:getAllMessages();
	
	CareReceiver[] crs = CareReceiver:and(equals(status,1), equals(deleted, "no"));
	if(crs.length() >0){
		for(int i=0; i<crs.length(); i++){
			CareReceiver temp = crs.get(i);	
			if(temp.mobileNumber !=null){
				createClient(temp);
			}
		}
	}
}

/* ************************************************* */
/* ************************************************* */

void createClient(CareReceiver cr){
	 Client client = Client:new();
	 /* get the care receiver to a pharmacy */
     Pharmacy pharmacy =  cr.careReceiver_pharmacy ; //Pharmacy:relationshipIn(careReceiver_pharmacy, cr.careReceiver_pharmacy);
    
    if(pharmacy != null){
    	client.firstName = pharmacy.name;
		client.surname = " - ";
    }else { 
		client.firstName = " - ";
		client.surname = " - ";
	}
    
    client.client_id = cr.client_id;  
    client.nickname = cr.mobileNumber;  
    client.mobileNumber = cr.mobileNumber;
    client.registered = cr.registered;
    client.roleID = 1;
    client.chatcount = 0;
    client.clients_EscalationUser_id = 1;
    client.language = LANGUAGE.English;

    string clientnumber = cr.mobileNumber;
    client.mobileNumber = BLUnits:updateNumber(cr.mobileNumber);
    //client.save();

    /*calls the unique function from Clientlist unit  */
    string scu = saveClientCheckUnique(client);
    if(scu == "OK"){
		LanguageKeyObject[] lks = LanguageKeyObject:equals(languageID,1);  
    	client.client_LanguageKey = lks.get(0);
    	client = addManagers(client);
    	client.save();
    	
    	
    	/*update care receiver status */
    	cr.status = 2;
        cr.save();
        
        /*NY 201420 added , */
        UmbrellaScheduling:fScheduleclientdefault(client);
    }
    
}

/* ************************************************* */
/* ************************************************* */

string saveClientCheckUnique(Client client){
    Client c; Client c2; string r1 = ""; string r2 = "";
    
    if(client.nickname==null){ client.nickname = ""; }  
    client.nickname = String:lower(client.nickname);
    
    r1 = validateClientObject(client.mobileNumber, 1, c);
    //r2 = validateClientObject(client.nickname, 2, c);

    if (r1 == "OK"){ 
        return "OK"; 
    } else {
        return "NOTOK";
    }
    
}

/* ************************************************* */
/* ************************************************* */
Client addManagers(Client c){
       LearningManager[] lManagers= Globals:getAllLearningManagers();
       if((lManagers != null) && (lManagers.length() >0)) {
        	LearningManager lManager = lManagers.first();
        	c.roleID = 1; c.client_LearningManager = lManager;
       } 
    return c;
}


/* ************************************************* */
/* ************************************************* */

string validateClientObject(string s, int code, Client c){

    Client[] cs; Client c2; string sr = "";
    if (code==1){ 
    	cs = Client:equals(mobileNumber, s); 
    }    
    if(cs==null){ 
        sr = "OK"; 
    } else if(cs.length()==0){ 
        sr = "OK"; 
    } else if(cs.length()>1){  
        sr = "DUPL";
    } 
    return sr;
}


