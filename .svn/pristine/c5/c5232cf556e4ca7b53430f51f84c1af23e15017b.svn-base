unit UserActivity;

Client uClient;
string csvURL;
string vclientname;
string vcurrentactivity;
string vprogressmessage;
bool bShowHideDetail;

AllSMSLog[] smsLog;
ClientSMSQueue[] smsQueue;
PatternHistory[] activityHistory;
TopicUserSetup[] userTus;

TopicUserSetup tusDelete;
TopicUserSetup tusPause;
TopicUserSetup tusResume;
TopicUserSetup tusEnd;
TopicUserSetup tusStart;
TopicUserSetup topicUserSetup;

string nav_destination_on_back;

void init() {
    if(bShowHideDetail==null){
        bShowHideDetail = false;
    }

    if (nav_destination_on_back == null){
        nav_destination_on_back = "nav_user_management";
    }
    
    refreshData();
}

void showOrHideDetail(){

    if(bShowHideDetail == false){
        bShowHideDetail = true;
    } else {
        bShowHideDetail = false;
    }

    refreshData();
}

void refreshData(){
    if(uClient==null){
        string msg = "No User Selected for UserActivity";
        Alerter:alertError(msg);
        return;
    }

    vprogressmessage = uGetCurrentSchedule:fGetProgressMessage(uClient,0);
    vclientname = UserActivityOutgoingSMS:fGetvClientName(uClient);
    vcurrentactivity = UserActivityOutgoingSMS:fGetvCurrentActivity(uClient);

    smsLog = AllSmsLogController:getAllSmsLogsForUser(uClient);
    smsQueue = ClientSMSQueueController:getAllSmsQueueForClient(uClient);
    activityHistory = ActivityHistoryController:getAllActivityHistoryForUser(uClient, bShowHideDetail);
    userTus = getTusForFilters();

    csvURL = uIVRIntegration:fGetIVRReportURL(uClient);
}

string navigate(string location){
    return location;
}

string back(){
    return navigate(nav_destination_on_back);
}

void send_progress_sms(){

	if(uClient != null){
        uGetCurrentSchedule:fsmsCHWProgressTextExec(uClient);
    }

    string msg = String:concat("Progess SMS sent to ", uClient.firstName, " ", uClient.surname, ".");
	Alerter:alert(msg);

}

string send_custom_sms_in(){
    SendCustomSMS:uClient = uClient;
    SendCustomSMS:smsDirection = "Inbound SMS";
    return "nav_send_custom_sms";
}

string send_custom_sms_out(){
    SendCustomSMS:uClient = uClient;
    SendCustomSMS:smsDirection = "Outbound SMS";
	return "nav_send_custom_sms";
}

string nav_outgoing_sms(){
    UserActivityOutgoingSMS:uClient = uClient;
    return "nav_outgoing_sms";
}

void forceQueue(){
	
	Logger:log(String:concat("ForceQueue invoked for client: ", uClient));

    ClientSMSQueue[] cQs = ClientSMSQueue:relationshipIn(c_clientsmsqueue, uClient);

    if (cQs.length() > 0){
        
        cQs.sortAsc("smsDateTime");

        for(int i = 0; i < cQs.length(); i++){
            ClientSMSQueue cQ = cQs.get(i);
            Client c = cQ.c_clientsmsqueue;
            if(BLUnits:fIsClientAlreadyInSMSToBeSentOut(c) == false){
                BLUnits:fAddClientToSMSToBeSentOut(c, cQ);
            }
        }   
    
        SMSToBeSentOut[] smsSOs = SMSToBeSentOut:all();
        SMSToBeSentOut smsSO = SMSToBeSentOut:new();
        
        if (smsSOs.length()>0){

            for(int i = 0; i < smsSOs.length(); i++){
                smsSO = smsSOs.get(i);
                BLUnits:fSendSMSSentOut(smsSO);
            }
        }
        BLUnits:fDeleteSMSSentOut();
    }

	string msg = String:concat("Earliest SMS in queue has been sent for user: ", uClient.firstName, " ", uClient.surname);
	Alerter:alert(msg);
	init();
}

TopicUserSetup[] getTusForFilters(){

    TopicUserSetup[] tusArr; Topic st;

    if(bShowHideDetail == true){
        tusArr = TopicUserSetupController:getAllTusForUser(uClient);
    } else {
        st = uGetCurrentSchedule:fGetCurrentTopicIncludePaused(uClient);
        tusArr = TopicUserSetupController:getAllTusForUserSubTopic(uClient, st);
    }
    
    return tusArr;
}

void deleteSelectedTus() {
    TopicUserSetupController:deleteTopicUserSetup(tusDelete);
    init();
}

void startSelectedTus(){
    TopicUserSetupController:startTopicUserSetup(tusStart);
    init();
}

void pauseSelectedTus(){
    TopicUserSetupController:pauseTopicUserSetup(tusPause);
    init();
}

void resumeSelectedTus(){
    TopicUserSetupController:resumeTopicUserSetup(tusResume);
    init();
}

void endSelectedTus() {
    TopicUserSetupController:endTopicUserSetup(tusEnd);
    init();
}