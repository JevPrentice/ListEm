/* 
 * Beyers Nel 2015-04-01
 */

unit RoleManagement;

LearningManager lm;
ProgramManager pm;
Admin a;

bool bInviteProgramManager;
bool bInviteClient;

CLIENTTYPE clientType;

// string name;
// string surname;
// string mobileNumber;

// MANAGERS man;

// string lastView;
// string inviteMan;


Admin[] getSA() {
	return Admin:all();
}
ProgramManager[] getPM() {
	return ProgramManager:all();
}
LearningManager[] getLM() {
	return LearningManager:all();
}


string saveSA(){
	a.save();
	return "goBack";
}
string savePM(){
	pm.save();
	return "goBack";
}
string saveLM(){
	lm.save();
	return "goBack";
}


string edit() {
	return "edit";
}


void uninviteSA(){
	Admin[] allAdmins = Admin:all();
	if (allAdmins.length() <= 1) {
		Alerter:alert("Can not remove last Administrator");
	} else {
		a.removeRole();
		Admin:delete(a);
	}
}

void uninvitePM(){
	pm.removeRole();
	ProgramManager:delete(pm);
}
void uninviteLM(){
	lm.removeRole();
	LearningManager:delete(lm);
}

string inviteAdminProgramManager(Admin admin){
	ProgramManager[] flag = ProgramManager:contains(mobileNumber, admin.mobileNumber);

	if (flag.length() > 0) {
		Alerter:alert("There is already an ProgramManager with that mobile number");
  		return "error";
  	} 

	ProgramManager pm = ProgramManager:new();
	pm.registered = Mez:now();
	pm.firstNames = admin.firstNames;
	pm.surname = admin.surname;
	pm.mobileNumber = admin.mobileNumber;
	pm.save();
}

string inviteAdminAsClient(Admin admin, CLIENTTYPE type){

	Client[] flag = Client:contains(mobileNumber, a.mobileNumber);

	if (flag.length() > 0) {
		Alerter:alert("There is already an CHV or CHEW with that mobile number");
  		return "error";
  	} 

  	RoleKeyObject roleKey;
  	if (type == CLIENTTYPE.Chv){
		roleKey = RoleKeyController:getRoleKeyByID(1);
  	} else {
		roleKey = RoleKeyController:getRoleKeyByID(2);
  	}
  	
  	LanguageKeyObject lko = LanguageKeyController:getLanguageKeyByID(1);

	Client c = Client:new();
	c.firstName = a.firstNames;
	c.surname = a.surname;
	c.mobileNumber = a.mobileNumber;

	c.client_LanguageKey = lko;
	c.language = LANGUAGE.English;
	c.registered = Mez:now();
	c.client_RoleKey = roleKey;
	c.roleID = roleKey.roleID;

	string nname = String:concat(a.firstNames, a.surname);

	c.nickname = nname;
	c.isActive = true;
	c.save();

	uIVRIntegration:fScheduleIVRLanguage(c, lko.languageID);

	if (c.roleID == 2){
		SmartChew chew = SmartChew:new();
		chew.client = c;
		chew.registered = Mez:now();
		chew.invite(c.mobileNumber);
		chew.save();
	}

}

string inviteAdmin() {
  	Admin[] flag = Admin:contains(mobileNumber, a.mobileNumber);
  	if (flag.length() > 0) {
		Alerter:alert("There is already an Administrator with that mobile number");
  		return "error";
  	} 

	a.invite(a.mobileNumber);
	a.save();	

	if (bInviteProgramManager == true){

		string s = inviteAdminProgramManager(a);
		if (s == "error"){
			return s;
		}
	}

	if (bInviteClient == true){

		if (clientType == null){
			Alerter:alert("Please select CHV or CHEW for the User");
	  		return "error";
		}

		string s = inviteAdminAsClient(a, clientType);
		if (s == "error"){
			return s;
		}
	}

	return "goBack";
}

string invitePM() {
  	ProgramManager[] flag = ProgramManager:contains(mobileNumber, pm.mobileNumber);
  	if (flag.length() > 0) {
		Alerter:alert("There is already a Program Manager with that mobile number");
  		return "error";
  	} else {
		pm.invite(pm.mobileNumber);
		pm.save();
	}
	return "goBack";
}

string inviteLM() {
  	LearningManager[] flag = LearningManager:contains(mobileNumber, lm.mobileNumber);
  	if (flag.length() > 0) {
		Alerter:alert("There is already a Learning Manager with that mobile number");
  		return "error";
  	} else {
		lm.invite(lm.mobileNumber);
		lm.save();
	}
	return "goBack";
}


string initInviteAdmin() {
	a = Admin:new();

	bInviteProgramManager = false;
	bInviteClient = false;
	clientType = null;

	return "invite";
}
string initInvitePM() {
	pm = ProgramManager:new();
	return "invite";
}
string initInviteLM() {
	lm = LearningManager:new();
	return "invite";
}


//TEST
void testTimer(){
	Mez:log("Forcing timer to run");
	ScheduledActions:checkDowntime();
}











