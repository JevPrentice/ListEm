unit uCalculatePPE;

/* ********************************************************************************************************** */
/* ********************************************************************************************************** */

int fGetConfigSetting(string cv){
    
    ConfigTable[] cfs = ConfigTable:equals(sConfigDescription, cv);
  
    if(cfs.length()>0){
        ConfigTable cf = cfs.get(0);
        return cf.iConfigValue;
    } else {
        return 0;
    }
}

/* ********************************************************************************************************** */
/* ********************************************************************************************************** */

int fCheckandExpireUmbrella(TopicUserSetup tU, int statuscode){

    int ir = 0; datetime dtnow = Mez:now(); string slog;

    Client c = tU.client_topicUserSetup;
    Topic t = tU.topic_topicUserSetup;
    Umbrella u = tU.umbrella_topicUserSetup; 
    if(c==null||t==null||u==null){ return ir; }

    UmbrellaPPE uP = UmbrellaPPEController:fCreateorUpdateClientUmbrellaPPE(c, u); 
    if (uP==null){ return ir; }

    slog = String:concat("fCheckandExpireUmbrella : Check for client '",c.mobileNumber, "' on Topic '", u.umbrellaID, "' and Sub-Topic '", t.topicID, "' and statuscode '", statuscode, "'."); Mez:log(slog);

    if(dtnow>=uP.umbrellaEndDateTime){ 

        slog = String:concat("fCheckandExpireUmbrella : Expire for client '",c.mobileNumber, "' on Topic '", u.umbrellaID, "' and statuscode '", statuscode, "'."); Mez:log(slog);
        
        UmbrellaScheduling:fScheduleclientumbrella(c, u, null, null, -1, 0, statuscode);
        
        ir = 1;

    }

    return ir;

}

/* ********************************************************************************************************** */
/* ********************************************************************************************************** */

void fUpdateCurrentUmbrellaPPEStatus(Client c, string statustype, int statuscode){

    datetime dtnow = Mez:now(); bool bDoUpdate = false; bool bRealEnd = false;

    Umbrella u = uGetCurrentSchedule:fGetCurrentUmbrella(c);
    UmbrellaPPE uP = UmbrellaPPEController:fCreateorUpdateClientUmbrellaPPE(c, u); 
    if (uP==null||u==null){ return null; }

    string slog = String:concat("fUpdateCurrentUmbrellaPPEStatus for client '",c.mobileNumber, "' on Topic '", u.umbrellaID, "' with Statustype '", statustype, "' and statuscode '", statuscode, "'."); Mez:log(slog);

    if(statustype=="escalation"){

        // Escalation : If now > the umbrella escalation date, then update the umbrella to reflect now as escalation date
        if(dtnow>=uP.umbrellaEscalateDateTime){ bDoUpdate = true; uP.umbrellaEscalateDateTime = dtnow; }
    
    } else if(statustype=="forcedend"){

        if( (statuscode>=80&&statuscode<=89&&statuscode!=88)||
            (statuscode==88&&uP.umbrellaEndDateTime<=dtnow)
          ){ bRealEnd = true; }

        if(bRealEnd==true){
            bDoUpdate = true;
            // ForceEnd : If now < the umbrella "must end" date, then update the umbrella to reflect now as end date
            if(uP.umbrellaEndDateTime>=dtnow){ uP.umbrellaEndDateTime = dtnow; }
            // ForceEnd : If not yet escalated (escalation date > now), then set escalation date to null
            if(uP.umbrellaEscalateDateTime>=dtnow){ uP.umbrellaEscalateDateTime = null; }
        }

    }

    if(bDoUpdate==true){
        uP.status = UmbrellaPPEController:fInterpretPPEStatus(uP, statuscode);
        uP.save();
    }

    return null;

}

/* ********************************************************************************************************** */
/* ********************************************************************************************************** */

void fReactivateClientUmbrellaPPE(Client c, Umbrella u){

    UmbrellaPPE uP = UmbrellaPPEController:fCreateorUpdateClientUmbrellaPPE(c, u);
    datetime dtnow = Mez:now();
    int iDefaultDaysAfterExpiry = fGetConfigSetting("DefaultDaysAfterExpiry");

    if(uP!=null){

        uP.status = UmbrellaPPEController:fInterpretPPEStatus(uP, 1);

        if(uP.umbrellaEndDateTime==null){ uP.umbrellaEndDateTime=dtnow; }
        if(uP.umbrellaEndDateTime<=dtnow){
            uP.umbrellaEndDateTime = Date:addDays(dtnow, iDefaultDaysAfterExpiry);
        }

        uP.save();

    }

    return null;

}



int fGetClientCurrentUmbrellaPPEStatus(Client c){

    Umbrella u = uGetCurrentSchedule:fGetCurrentUmbrella(c); if(u==null){ return null; }
    UmbrellaPPE uP = UmbrellaPPEController:fCreateorUpdateClientUmbrellaPPE(c, u); if(uP==null){ return null; }
    if(uP.status==null){ return null; }
    return uP.status;

}

/* ********************************************************************************************************** */
/* ********************************************************************************************************** */

int fConsiderPassFail(Client c, Topic t){

    // Variables
    int ireturn = 0; 
    if(fGetConfigSetting("PPE") == 0) { return ireturn; }

    /* PPEFIX */
    Umbrella u = uGetCurrentSchedule:fGetLastUmbrella(c, t);

    // Get relevant TopicPPE
    TopicPPE tE = uCalculatePPESub:fGetTopicPPE(c, t, u, 0); if (tE==null){ return ireturn; }

    // Set up variables required for calculations
    int iPass = fGetConfigSetting("PPEPassRate");
    int iMaxF = fGetConfigSetting("MaxFails");
    int iPrevAttempts = TopicList:fGetLastTopicHistoryLogAttempt(c, u, t); if(iPrevAttempts==null) { iPrevAttempts = 0; }
    int cPerf = tE.performance;
    string mOut = ""; datetime dt = Mez:now();

    // Set up variables required for calculations
    string slog = String:concat("Client: ", c.mobileNumber, " | Topic: ", t.topicID, " | Passrate: ", iPass, " | MaxFails: ", iMaxF, " | Previous Attempts : ", iPrevAttempts, " | Performance : ", cPerf);
    Mez:log(slog);

    // Calculate booleans used in evaluations for Pass, Fail and CanDoAgain
    bool cPass = false; if(cPerf>=iPass){ cPass = true; }
    bool canAgain = false; if(iMaxF>iPrevAttempts){ canAgain = true; }

    // Create log of user score
    TopicList:fCreateTopicHistoryLog(c, u, t, 99, null, 0, cPerf);

    // Perform evaluation
    if(cPass==true){

        mOut = FixMessageList:fMessageStringPerFixedMessages(c, "Pass");
        ireturn = 1;

    } else if(canAgain==true){

        mOut = FixMessageList:fMessageStringPerFixedMessages(c, "Fail1");
        
        /* 
            Do not reschedule entire Umbrella for the moment 
            Umbrella:fScheduleclientumbrella(c, u, 1, -1, 0);
        */

        UmbrellaModelControllers:fSaveTopicUserSetupList(u, 0, 2, dt, c, t, 1, 0, 2);
        ireturn = 1;

    } else {

        mOut = FixMessageList:fMessageStringPerFixedMessages(c, "Fail2");
        ireturn = 1;
                
    }

    if(mOut!=""){
        if(u!=null){ mOut = BLUnits:fSS(mOut,"topicname", u.umbrellaName); }
        if(cPerf!=null){ mOut = BLUnits:fSS(mOut,"userscore", cPerf); }
        if(iPass!=null){ mOut = BLUnits:fSS(mOut,"passrate", iPass); }
        BLUnits:SendSMSToClient(c, mOut); 
    }

    return ireturn;

}

/*
    createFixMessagesExec(1,"Pass", "Congratulations! You have passed the quiz on . Your score is .");
    createFixMessagesExec(1,"Fail1", "Sorry, you have not passed the quiz. You have one more chance to repeat the quiz. You have to score passrate & above to pass the quiz. The quiz will now restart.");
    createFixMessagesExec(1,"Fail2", "Sorry, you have failed the quiz. You will be directed to the next activity. You can repeat this quiz only after finishing all topics assigned to you.");
*/
