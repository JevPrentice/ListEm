unit uCalculatePPEDetail;

/* ********************************************************************************************************** */
/* ********************************************************************************************************** */

int fGetConfigSetting(string cv){
    
    ConfigTable[] cfs = ConfigTable:equals(sConfigDescription, cv);
  
    if(cfs.length()>0){
        ConfigTable cf = cfs.get(0);
        return cf.iConfigValue;
    } else {
        return 0;
    }
}

/* ********************************************************************************************************** */
/* *********************************** UMBRELLA PPE           *********************************************** */
/* ********************************************************************************************************** */

/*
QUIZ  QuizWeight        CHAT ChatWeight             PRACTICUM PracticumWeight
topictype = 5                                       topicType = 6
weight = 30                                         weight = 40

30 pts 90%+             30 pts top contributor      40 pts 90%+
20 pts for 80-89%       20 pts second               30 pts for 80-89%
10 pts for 70-79%       10 pts all who > 0          20 pts for 70-79%
5 pts for 60-69%                                    10 pts for 60-69%
0 pts for <60%                                      0 pts for <60%
*/

    int fGetAdjustedScore(int iin, int tt){
        
        int ir = 0; int ia = 0;

        string defcode = "";
        if(tt==5){ defcode = "QuizWeight"; } else if (tt==6){ defcode = "PracticumWeight"; }
        int w = fGetConfigSetting(defcode); if (w==null){ w=0; }

        if(tt==5){
            if(iin>=90){ ia = 0; }
            else if(iin>=80){ ia = -10; }
            else if(iin>=70){ ia = -20; }
            else if(iin>=60){ ia = -25; }
            else if(iin>=0){ ia = -1*w; }
        } else if (tt==6){
            if(iin>=90){ ia = 0; }
            else if(iin>=80){ ia = -10; }
            else if(iin>=70){ ia = -20; }
            else if(iin>=60){ ia = -30; }
            else if(iin>=0){ ia = -1*w; }
        }

        //string slog = String:concat(" fGetAdjustedScore : iin : ", iin, " | tt : ", tt, " | w : ", w, " | ia : ", ia); Mez:log(slog);

        ir = w + ia;
        if(ir<0){ ir = 0; }
        return ir;

    }

    /* **************************************************************************************** */

    void fUpdateChatCount(Client c){
        UmbrellaPPE uP = UmbrellaPPEController:fGetClientCurrentUmbrellaPPE(c);
        if(uP!=null){
            if(uP.chatscore==null){ uP.chatscore=0; }
            uP.chatscore = uP.chatscore + 1;
            uP.save();
        }
        return null;
    }

    /* **************************************************************************************** */

    UmbrellaPPE[] fGetMatchingUmbrellaPPE(Client c, Umbrella u){

        // Set variables        
        UmbrellaPPE[] uPs1 = UmbrellaPPE:relationshipIn(umbrella_umbrellaPPE, u); UmbrellaPPE[] uPsR; UmbrellaPPE uP;
        ClientGroup cgo = ClientGroupList:getGroupForClient(c); if(cgo==null){ return null; }
        ClientGroup cgcomp; Client clientcomp;

        // Loop through original Umbrella PPE set, as derived from Umbrella
        for(int i = uPs1.length()-1; i>=0; i--){

            // Get UmbrellaPPE-specific record
            uP = uPs1.get(i);

            // Get individual client and corresponding group
            clientcomp = uP.client_umbrellaPPE;
            cgcomp = ClientGroupList:getGroupForClient(clientcomp);

            // Check for nulls, them compare and add to return collection if there is a match
            if(cgcomp!=null){  
                if(cgo==cgcomp){
                    uPsR.append(uP);
                }
            }
        }

        return uPsR;

    }

    /* **************************************************************************************** */

int fGetAdjustedChat(Client c, Umbrella u, int ci){
        
    // Declare variables
    int r = 0; int i = 0; int comps = 0; int v1 = 1; int v2 = 1; int v3 = 1; int v4 = 1; int v5 = 1; 

    // Return 0 if no chats exist for this Umbrella for this Client
    if(ci==0){ return r; } 

    //Cycle through
    UmbrellaPPE uP; UmbrellaPPE[] uPs = fGetMatchingUmbrellaPPE(c, u); int maxi = uPs.length();
    if(maxi>0){

        uPs.sortDesc("chatscore"); 

        // Loop through other, related, UmbrellaPPE records
        for(i=0; i<maxi; i++){
            uP = uPs.get(i); comps = uP.chatscore;
            if(v1<=comps){
                v1 = comps; 
            } else if(v2<=comps){
                v2 = comps; 
            } else if(v3<=comps){
                v3 = comps; 
            } else if(v4<=comps){
                v4 = comps; 
            } else if(v5<=comps){
                v5 = comps; i = maxi; 
            }
        }

    }

    /* 
      From 9 April 2015 
        - 30 for top contributor
        - 25 for second
        - 20 for 3rd contributor
        - 15 for fourth
        - 10 for fifth
        - any other contributor 5 points
        - 0 for no contribution at all 
    */

    // Add score based on matrix
    if(ci>=v1){ r = 30; } 
    else if (ci>=v2){ r = 25; } 
    else if (ci>=v3){ r = 20; } 
    else if (ci>=v4){ r = 15; } 
    else if (ci>=v5){ r = 10; } 
    else if (ci>0){ r = 5; }

    string slog = String:concat("fGetAdjustedChat for ", c.mobileNumber, " and ",u.umbrellaID, " and chat in : ", ci, " | v1 : ", v1, " | v2 : ", v2, " | r : ", r); Mez:log(slog);

    return r;

}

/* **************************************************************************************** */
/* **************************************************************************************** */

int fGetTopicPPECountforUmbrella(Client c, UmbrellaTopicSetupTable[] uTs){

    int i = 0; int umbrellaWeight = 0; int topicWeight = 0; LanguageKeyObject lang; int itot = uTs.length(); 
    Umbrella u; Topic t; UmbrellaTopicSetupTable uT; TopicPPE[] tEs;

    /* PPEFIX : Check for re-use of Sub-Topic within multiple Topics... add Umbrella field to TopicPPE table */

    for(i=0;i<itot;i++){

        uT = uTs.get(i); 
        t = uT.topic_UmbrellaUserSetup; 
        u = uT.umbrella_UmbrellaUserSetup;
        tEs = uCalculatePPESub:fGetTopicPPECollections(c, t, u, 100);
        /* Trello #380 */
            lang = t.topic_LanguageKey;
            topicWeight = SubTopicController:calculateSubTopicTotalWeightForLanguage(t, lang);
        /* Trello #380 */
        if (tEs.length()>0){ umbrellaWeight = umbrellaWeight + topicWeight; }

    }

    return umbrellaWeight;

}

/* **************************************************************************************** */
/* **************************************************************************************** */

int fGetTopicNumberSameLanguage(Umbrella u, LanguageKeyObject lk){
    
    if (u==null||lk==null){ return null; }

    UmbrellaTopicSetupTable[] uTs = UmbrellaTopicSetupTable:relationshipIn(umbrella_UmbrellaUserSetup, u); 
    UmbrellaTopicSetupTable uT = null; Topic t = null; int i = 0; int umbrellaWeight = 0; int maxi = uTs.length();
    int topicWeight = 0; 

    if(maxi>0){
        for(i=0; i<maxi; i++){
            uT = uTs.get(i);
            if(uT.topic_UmbrellaUserSetup!=null){
                t = uT.topic_UmbrellaUserSetup;
                if(t.topic_LanguageKey == lk){
                    /* Trello #380 */
                        topicWeight = SubTopicController:calculateSubTopicTotalWeightForLanguage(t, lk);
                    /* Trello #380 */
                    umbrellaWeight = umbrellaWeight + topicWeight;
                }
            }
        }
    }

    return umbrellaWeight;

}

/* **************************************************************************************** */
/* **************************************************************************************** */

int fGetProgressUmbrella(Client c, Umbrella u){

    // Assign variables
    int r = 0; int r1 = 0; int r2 = 0; LanguageKeyObject lko = c.client_LanguageKey;

    // Umbrella Topic setup table - counting the total number of Topics linked to the Umbrella
    UmbrellaTopicSetupTable[] uts = UmbrellaTopicSetupTable:relationshipIn(umbrella_UmbrellaUserSetup,u); 

    // Count only the topics of the same language
    r2 = fGetTopicNumberSameLanguage(u, lko);

    // Calculate percentage progress, based on the number of completed topics out of the total number of topics
    if(r2>0){
        r1 = fGetTopicPPECountforUmbrella(c, uts);
        r = uCalculatePPESub:fReturnPer(r2,r1);
    }

    // Log calculations of progress PPE for user and umbrella
    string slog = String:concat("fGetProgressUmbrella... for client '",c.mobileNumber,"' and umbrella '", u.umbrellaID, "' with counter max '", r2, "' and user completed number '", r1, "'.");
    Mez:log(slog);

    return r;

}

/* **************************************************************************************** */
/* **************************************************************************************** */

string fConcatLocal(string slog, UmbrellaPPE uP){

    if(uP.umbrellaStartDateTime!=null){
        slog = String:concat(slog, "*01*", uP.umbrellaStartDateTime , "*01* ");
    }

    if(uP.umbrellaEndDateTime!=null){
        slog = String:concat(slog, "*02*", uP.umbrellaEndDateTime , "*02* ");
    }

    if(uP.umbrellaEscalateDateTime!=null){
        slog = String:concat(slog, "*03*", uP.umbrellaEscalateDateTime , "*03* ");
    }

    if(uP.status!=null){
       slog = String:concat(slog, "*04*", uP.status , "*04* ");
    }

    if(uP.duration!=null){
        slog = String:concat(slog, "*05*", uP.duration , "*05* ");
    }

    if(uP.flags!=null){
        slog = String:concat(slog, "*06*", uP.flags , "*06* ");
    }

    if(uP.progress!=null){
        slog = String:concat(slog, "*07*", uP.progress , "*07* ");
    }

    if(uP.quizscore!=null){
        slog = String:concat(slog, "*08*", uP.quizscore , "*08* ");
    }

    if(uP.chatscore!=null){
        slog = String:concat(slog, "*09*", uP.chatscore , "*09* ");
    }

    if(uP.practicumscore!=null){
        slog = String:concat(slog, "*10*", uP.practicumscore , "*010* ");
    }

    if(uP.totalscore!=null){
        slog = String:concat(slog, "*11*", uP.totalscore , "*11* ");
    }

    return slog;

}

/* **************************************************************************************** */
/* **************************************************************************************** */

void fLogUmbrellaPPE (UmbrellaPPE uP, Umbrella u, Topic t, Client c){
    
    string slog = "";

    slog = String:concat(slog, "fUpdateUmbrellaPPE... for *c*'", c.mobileNumber, "'*c* on Topic *t*'", u.umbrellaID, "'*t* and Sub-Topic completed *st*'", t.topicID, "'*st*: "); 
    slog = fConcatLocal(slog, uP);

    Mez:log(slog);
    
    return null;

}

/* **************************************************************************************** */
/* **************************************************************************************** */

void fInterpretPPEStatusExec_UnitTest(){
    int i_out; int i;
    for(i=1;i<=100;i++){
        
        if(i==1||i==2||i==3||i==9||i==39||i==81||i==88||i==97||i==99){
            i_out = fInterpretPPEStatusExec(i, 1);
            i_out = fInterpretPPEStatusExec(i, 9);
            i_out = fInterpretPPEStatusExec(i, 39);
            i_out = fInterpretPPEStatusExec(i, 81);
            i_out = fInterpretPPEStatusExec(i, 88);
            i_out = fInterpretPPEStatusExec(i, 97);
            i_out = fInterpretPPEStatusExec(i, 99);
        }

    }
    Alerter:alert("Unit test 'fInterpretPPEStatusExec_UnitTest' has been performed.");
    return null;
}

/* **************************************************************************************** */
/* **************************************************************************************** */

int fIStatusGuide(string statuskey){
    int ir = 1;
    if (statuskey=="Active"){ ir = 1; }
    if (statuskey=="statusInProgressLate"){ ir = 9; }
    if (statuskey=="statusCompleteFailedQuiz") { ir = 39; }
    if (statuskey=="statusExpired") { ir = 88; } 
    if (statuskey=="statusCompleteLate") { ir = 97; }
    if (statuskey=="statusCompleteOnTime") { ir = 99; }
    return ir;
} 

/* **************************************************************************************** */
/* **************************************************************************************** */

int fInterpretPPEStatusExec(int currentstatus, int statusin){
    
    // Variables - default to NO CHANGE in status
    int ireturn = currentstatus;
    bool bStatusInEighties = false; if(statusin>=80&&statusin<=89){ bStatusInEighties = true; }
    bool bCurrentStatusEighties = false; if(currentstatus>=80&&currentstatus<=89){ bCurrentStatusEighties = true; }

    // If active, can move to (a) Late or (b) Completed Late or (c) Completed On Time or (d) Forced End = Eighties
    if(currentstatus==fIStatusGuide("Active")){

        if(     statusin==fIStatusGuide("statusInProgressLate")
            ||  statusin==fIStatusGuide("statusCompleteLate")
            ||  statusin==fIStatusGuide("statusCompleteOnTime")
            ||  statusin==fIStatusGuide("statusCompleteFailedQuiz")
            ||  bStatusInEighties==true                             ){
            ireturn = statusin;
        }

    }

    // If already Late, can move to (a) Completed Late or (b) Forced End = Eighties
    else if(currentstatus==fIStatusGuide("statusInProgressLate")){
        
        if(statusin==fIStatusGuide("statusCompleteOnTime")||statusin==fIStatusGuide("statusCompleteLate")||statusin==fIStatusGuide("statusCompleteFailedQuiz")){
            ireturn = fIStatusGuide("statusCompleteLate");
        } 

        else if(bStatusInEighties==true){
            ireturn = statusin;
        }

    }

    // If already expired, when reactivated, can move to (a) Late or (b) Completed Late
    else if(currentstatus==fIStatusGuide("statusExpired")){
        
        if(statusin==fIStatusGuide("Active")||statusin==fIStatusGuide("statusInProgressLate")){
            ireturn = fIStatusGuide("statusInProgressLate");
        }

        else if(statusin==fIStatusGuide("statusCompleteOnTime")||statusin==fIStatusGuide("statusCompleteLate")){
            ireturn = fIStatusGuide("statusCompleteLate");
        }

    }

    // Do not change if you've arrived at (a) Completed On Time or (b) Completed Late
    else if(currentstatus==fIStatusGuide("statusCompleteOnTime")||currentstatus==fIStatusGuide("statusCompleteLate")){

        ireturn = currentstatus;

    }

    // If current status in other eighties - ie not expired... then go to status in as requested
    else if(bCurrentStatusEighties==true){

        ireturn = statusin;

    }

    // Else change to one of the new statuses if they are valid
    else if(statusin==1||statusin==9||statusin==39||statusin==97||statusin==99||bStatusInEighties==true) {

        ireturn = statusin;

    }

    // Log
    string slog = String:concat("fInterpretPPEStatusExec with currentstatus '", currentstatus, "' and instruction '", statusin, "' and output '", ireturn, "'."); Mez:log(slog);

    // Return
    return ireturn;
   
}
