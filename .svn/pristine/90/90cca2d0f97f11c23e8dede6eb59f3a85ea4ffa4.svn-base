unit UserTopicScheduling;

bool bShowAllClients;
string clientFilter;

Umbrella selectedTopic;
ClientGroup selectedGroup;
Client[] users;

Client selectedUser;

datetime dStartDateTime;
bool bIgnoreDefaultTime;

TopicUserSetup[] tusArr;
TopicUserSetup startTus;
TopicUserSetup removeTus;

string tusFilter;

string msg;


void init(){
	resetVars();
	showAllUsers();
	showAllTus();
}

void resetVars(){
	if(BLUnits:fGetConfigSettingInt("DefaultTimeIgnore")==1) { bIgnoreDefaultTime = true; } else { bIgnoreDefaultTime = false; }
	bShowAllClients = false;
	selectedTopic = null;
	selectedGroup = null;
	selectedUser = null;
	dStartDateTime = Mez:now(); /* JV added */
}

void showAllTus(){
	tusArr = TopicUserSetupController:getAllTus();
	tusFilter = "Displaying All Scheduled Users";
}

void showTusForUser(){

	if (selectedUser == null){
		msg = "No User selected";
		Alerter:alert(msg);
		return null;
	}

	tusArr = TopicUserSetupController:getAllTusForUser(selectedUser);
	tusFilter = String:concat("Displaying Schedule for User:", selectedUser.firstName, " ", selectedUser.surname, " ", selectedUser.mobileNumber);
}

void showTusForGroup(){

	if (selectedGroup == null){
		msg = "No Group Selected";
		Alerter:alert(msg);
		return;
	}

	tusArr = TopicUserSetupController:getAllTusForGroup(selectedGroup);
	tusFilter = String:concat("Displaying Schedule for Group:", selectedGroup.name);

}

void filterUsersForGroup(){

	if (selectedGroup == null){
		msg = "No Group Selected";
		Alerter:alert(msg);
		return;
	}

	bShowAllClients = false;
	clientFilter = String:concat("Showing Users for Group: ", selectedGroup.name);
	users =  UserController:getAssociatedClientsForGroup(selectedGroup);

}

void showAllUsers(){
	bShowAllClients = true;
	selectedGroup = null;
	clientFilter = "Showing ALL Users";
	users = UserController:getAllUsers();
}

/* ******************************************************** */
/* ******************************************************** */

void scheduleUserOrGroupForTopic(){
	fCycleThroughGroup(1);
	showTusForUser();
}

void clearUserOrGroupForTopic(){
	fCycleThroughGroup(-1);
	showTusForUser();
}

void runScheduledStartForUserOrGroup(){
	fCycleThroughGroup(2);
	showTusForUser();
}

/* ******************************************************** */
/* ******************************************************** */

void fCycleThroughGroup(int c){
	int removecode = 89;
	if ( selectedUser==null || (selectedTopic==null && c!=2) ){

		if(c==2){
			Mez:alert("umbrellaview.noselectionUserGroup");
		} else {
			Mez:alert("umbrellaview.noselection");
		}

		return;
	}

	if(selectedUser!=null) {
		if(c!=2){ UmbrellaScheduling:fScheduleclientumbrella(selectedUser, selectedTopic, dStartDateTime, bIgnoreDefaultTime, c, 1, removecode); }
		TSPReminder:fManualTopicStart(selectedUser, 1);
	}
}

void startUserOnTopic(){

	if (startTus == null){
		msg = "Topic User Setup not found";
		Alerter:alert(msg);
		return null;
	}

    Client c = startTus.client_topicUserSetup;

	if (c == null){
		msg = "User not found for selected Topic User Setup";
		Alerter:alert(msg);
		return null;
	}

    Topic t = uGetCurrentSchedule:fGetCurrentTopic(c);
    
    if(t == null){
        TopicList:startTopic(startTus, 1);
        startTus = TopicUserSetup:new();

        msg = String:concat("Sub-Topic started for User:", c.firstName, " ", c.surname);
		Alerter:alert(msg);
    } else {
    	msg = String:concat("Sub-Topic not started. There is already an active Sub-Topic for User:", c.firstName, " ", c.surname, " ", c.mobileNumber);
		Alerter:alert(msg);
    }

    selectedUser = c;
    showTusForUser();

}

void endTopicUserSetup() {

	Client c = removeTus.client_topicUserSetup;

	UmbrellaModelControllers:fDeleteTopicUserSetupExec(removeTus, 89, "endTopicUserSetup");
	removeTus = null;

	selectedUser = c;
	showTusForUser();
}

void showTusForUser(){

	if (selectedUser == null){
		msg = "No User selected";
		Alerter:alert(msg);
		return null;
	}

	tusArr = TopicUserSetupController:getAllTusForUser(selectedUser);
	tusFilter = String:concat("Displaying Schedule for User:", selectedUser.firstName, " ", selectedUser.surname, " ", selectedUser.mobileNumber);
}

void showUnscheduledUsers(){
	users = getUnscheduledUsers();
}

Client[] getUnscheduledUsers(){

	Client[] clients = Client:all();

	Client client;
	TopicUserSetup[] tus = TopicUserSetup:all();

	for(int i=(clients.length()-1); i>=0; i--){
		client = clients.get(i);
		if(fIsScheduled(tus, client) == true){
			clients.remove(i);
		}
	}

	clientFilter = "Showing ALL Unscheduled Users";

	return clients;
}


bool fIsScheduled(TopicUserSetup[] tus, Client client){
	TopicUserSetup[] tus2 = tus.select(and(relationshipIn(client_topicUserSetup, client),equals(active,2)));
	if(tus2.length()>0){return true;} else {return false;}
}