unit ScheduledActions;
    
@Scheduled("15 * * * *")
void ivrScheduleWatch(){

    string msg;
    ScheduleURL[] urls = ScheduleUrlController:getAllScheduleUrlsNotProcessed();

    if (urls.length() <= 5){
        return;
    }

    string isLive = ConfigTableController:getConfigValueForDesc("isLiveEnvironment");
    string environment;
    if (isLive == "1"){
        environment = "Production";
    } else {
        environment = "PreProduction";
    }

    string applicationName = ConfigTableController:getConfigValueForDesc("ApplicationName");
    if (applicationName == null){
        applicationName = "Communicator (ApplicationName is not set)";
    }

    string messageBody = String:concat("Check the status IVR Integration for ", applicationName, " because there are ", urls.length(), " scheduled IVR calls queued on environment ", environment);

    string emailDescription = "IVR Scheduler URL Notification";
    string emailSubject = "IVR Scheduler URL Notification";
    string emailBody = String:concat("<h1>", messageBody, "</h1>");

    /* Send Jev Prentice */
    string emailAddress = "jprentice@mezzanineware.com";
    Client u = UserController:getJevPrenticeTestUser();

    EmailService:sendEmail(emailAddress, emailDescription, emailSubject, emailBody);

    msg = String:concat("IVR Scheduler {EMAIL} Notification sent to ", emailAddress , " - ", emailBody);
    Alerter:alert(msg);
    Logger:log(msg);

    BLUnits:SendSMSToClient(u, messageBody);

    msg = String:concat("IVR Scheduler {SMS} Notification sent to ", u.mobileNumber, " - ", messageBody);
    Alerter:alert(msg);
    Logger:log(msg);
    u = null;
    emailAddress = "";
    /* Send Jev Prentice */

    /* Send John Vorster */
    emailAddress = "jvorster@mezzanineware.com";
    u = UserController:getJohnVorsterTestUser();

    EmailService:sendEmail(emailAddress, emailDescription, emailSubject, emailBody);

    msg = String:concat("IVR Scheduler {EMAIL} Notification sent to ", emailAddress , " - ", emailBody);
    Alerter:alert(msg);
    Logger:log(msg);

    BLUnits:SendSMSToClient(u, messageBody);

    msg = String:concat("IVR Scheduler {SMS} Notification sent to ", u.mobileNumber, " - ", messageBody);
    Alerter:alert(msg);
    Logger:log(msg);
    /* Send John Vorster */

}


/*
*   =================================
*   Server Downtime Recovery Notifier
*   =================================
*   AUTHOR: Beyers Nel 21/04/15
*   Periodically checks if the server has experienced any downtime
*   Uses and updates a Datetime object every 60 seconds
*   Sends messages to users after a configrable threshold of downtime
*/
@Scheduled("* * * * *")
void checkDowntime(){

    Timer timer = getTimer();

    timer.time_threshold = getTimeThreshold();
    datetime lastcheck = timer.lastcheck;
    int downtime = Date:secondsBetween(lastcheck, Date:now());
    int threshold = timer.time_threshold;

    if (downtime >= threshold) {
        Mez:log(Strings:concat("DOWNTIME: ", downtime, " seconds. Sending messages."));

        Client[] users;
        string message;

        message = "Dear CHEW, please note that the system is now available.";
        users = UserController:getCHEWUsers();
        BLUnits:fSendDirect(users, message, "MT");

        message = "Dear CHV, please note that the system is now available.";
        users = UserController:getCHVUsers();
        BLUnits:fSendDirect(users, message, "MT");
    }
    Mez:log(String:concat("DOWNTIME: completed check. Threshold is ", threshold));
    timer.lastcheck = Date:now();
}

void createTimer(){
    //Mez:log("DOWNTIME: creating timer");
    Timer timer = Timer:new();
    timer.lastcheck = Date:now();
    timer.time_threshold = getTimeThreshold();
    timer.save();
}

int getTimeThreshold(){
    int threshold = ConfigTableController:getConfigIntForDesc("DowntimeMessageThreshold");
    //Mez:log(String:concat("DOWNTIME: Getting threshold of ", threshold));
    if (threshold > 0) {
        return threshold;
    }
    return 3600;
}

Timer getTimer(){
    Timer[] timers = Timer:all();

    if (timers.length() <= 0) {
        createTimer();
        timers = Timer:all();
    }

    // Deletes any excess timers
    for (int i = timers.length(); i > 1; i--) {
        Timer:delete(timers.get(i-1));
    }

    Timer timer = timers.get(0);

    if (timer.lastcheck == null) {
        timer.lastcheck = Date:now();
    }

    return timer;
}

// TEST
// void setDowntime(){
//     Timer timer = getTimer();
//     date fakeTime;
//     fakeTime = Date:now();
//     fakeTime = Date:addSeconds(fakeTime, -3601);
//     timer.lastcheck = fakeTime;
//     Alerter:alert("fake time set");
// }

// @Scheduled("0 1 * * *")
// void updateGroupPpePerformance(){
    
//  UmbrellaPPE[] ppeArr = UmbrellaPPEController:getAllUmbrellaPPE();

//  int totalProgress = 0;
        
//  /* values to set per group
    
//  int avequizscore = 0;
//  int avechatscore = 0;
//     int avepracticumscore = 0;
//     int avetotalscore = 0;

//     int percomplete;
//     int perinprogress;
//     int perlate;
//     int perexpired;

//     */

//  for(int i = 0; i < ppeArr.length(); i++){
//      UmbrellaPPE ppe = ppeArr.get(i);

//      totalProgress = totalProgress + ppe.progress;


//      // int progress;
//      // int quizscore;
//      // int chatscore;
//      // int practicumscore;
//      // int totalscore;

//  }

//  GroupUmbrellaPPE groupPpe = GroupUmbrellaPPE:new();
//  groupPpe.totalUsers = ppeArr.length();
//  groupPpe.aveprogress = totalProgress / ppeArr.length();

// }