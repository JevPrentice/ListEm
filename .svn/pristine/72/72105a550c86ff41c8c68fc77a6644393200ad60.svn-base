unit ActivityController;

string msg;

Pattern createActivity(string pid, string ps, string pe, string pr, int ir, int ptid, string pIVR){

    Pattern[] check = Pattern:equals(patternID, pid); 
    if(check.length()>0) {
        msg = String:concat("Unable to create Activty with ID: ", pid, " becuase it already exists");
        Logger:log(msg);
        Alerter:alert(msg);
        return null; 
    }

    ChannelKeyObject[] patternChannelKeys = ChannelKeyObject:equals(patternChannelID,ptid);
    ChannelKeyObject cKo = patternChannelKeys.get(0);
    if(cKo == null){ 
        msg = String:concat("UploadLog : fCreatePattern : No channel key object : ", pid, " : ", ptid);
        Logger:log(msg);
        Alerter:alert(msg);
        return null;
    }

    Pattern pattern = Pattern:new();
    pattern.patternID = pid;
    pattern.patternStartSMS = ps;
    pattern.patternEndSMS = pe;
    pattern.patternReminderSMS = pr;
    pattern.patternReminderTime = ir;

    /* JP #323 */
    if (ptid == 1){
        pattern.patternChannelID = CHANNEL.sms;
    } else if (ptid == 3){
        pattern.patternChannelID = CHANNEL.ivr;
    }
    
    pattern.PatternChannelKey = cKo;
    if(ptid==3){pattern.patternIVRstring = pIVR;} else {pattern.patternIVRstring="";}
    pattern.save();

    msg = String:concat("Activty with ID: ", pattern.patternID, " created");
    Logger:log(msg);
    Alerter:alert(msg);

    return pattern;

}

Pattern[] fGetSMSPatterns(){
    Pattern[] ps = Pattern:all(); 
    int ml = (ps.length()-1);
    Pattern[] psr;
    Pattern p;
    for(int i = 0; i<=ml; i++){
        p = ps.get(i);

        int channelID = getActivityChannelKeyID(p);
        if(channelID == 1){
            psr.append(p);
        }
    }
    return psr;
}

Pattern[] getAllActivities(){
	return Pattern:all();
}

Pattern getActivityFromActivityID(string activityID){
    
    Pattern activity;
    Pattern[] activities = Pattern:equals(patternID, activityID);

    if (activities.length() >= 1){

        if (activities.length() > 1){
            string msg = String:concat("There are currently ", activities.length(), " activities with ActivityID:", activityID);
            Logger:log(msg);
            Alerter:alertError(msg);

            msg = String:concat("WARNING: There is duplication for ActivityID: ", activityID);
            Logger:log(msg);
            Alerter:alertError(msg);
        }

        activity = activities.get(0);

    } else {
        return null;
    }

    return activity;
}

Pattern[] getActivitiesForSequence(Sequence s){

    PatternOrder[] sequence_patterns_arr = ActivityOrderController:getActivityOrdersForSequence(s);
    Pattern[] patterns;

    for (int i = 0; i < sequence_patterns_arr.length(); i++){
        PatternOrder sequence_pattern = sequence_patterns_arr.get(i);
        patterns.append(sequence_pattern.pattern_patternOrder);
    }

    return patterns;

}

int getActivityChannelKeyID(Pattern activity){
    int keyID;
    ChannelKeyObject cko = activity.PatternChannelKey;

    if (cko != null){
        keyID = cko.patternChannelID;
    }

    if (keyID == null){
        keyID = 0;
    }

    return keyID;
    
}
