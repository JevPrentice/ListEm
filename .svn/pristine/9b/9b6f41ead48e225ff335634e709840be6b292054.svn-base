unit IVRMappingTable;

//string imts;
Pattern imtp;
ChannelKeyObject imtck;
IVRMappingTable imt;

void init(){
    imt = IVRMappingTable:new();
    return null;
}

Pattern[] fGetIVRPatterns(){
    Pattern[] ps = Pattern:all(); 
    int ml = (ps.length()-1);
    Pattern[] psr;
    Pattern p;
    for(int i = 0; i<=ml; i++){
        p = ps.get(i);
        /* JP HEL-178 */
        int channelID = ActivityController:getActivityChannelKeyID(p);
        if(channelID == 3){
            psr.append(p);
        }
    }
    return psr;
}

IVRMappingTable[] getIVRMappingTable(){
    return IVRMappingTable:all();
}

string editIVRMappingTable(){
    imtp = imt.ivrmappingtable_pattern;
    imtck = imt.ivrmappingtable_channelkey;
    return null;
}

string removeIVRMappingTable(){
    IVRMappingTable:delete(imt);
    init();
    return null;
}

void buildIVRMappingTableClick(){
    fClearIVRMappingTable();
    buildIVRMappingTable();
    init();
}

/* ********************************************************** */
/* ********************************************************** */

string saveIVRMappingTable(){
    
    if(imt.ivractivityid==null){ imt.ivractivityid = ""; }
    if(imt.ivractivityid==""){ return null; }

    imt.ivrmappingtable_pattern = imtp;
    imt.ivrmappingtable_channelkey = imtck;
    imt.ivractivityid = String:upper(imt.ivractivityid);
    imt.save();
    init();
    return null;
}

/* ********************************************************** */
/* ********************************************************** */

int fGetLanguageKey(Pattern p){
    int rl = 1; LanguageKeyObject lko;

    Topic t = SequenceList:fGetTopicFromPattern(p);
    if(t!=null){
        lko = t.topic_LanguageKey;
        if(lko!=null){
            rl = lko.languageID;
        }
    }

    return rl;
}

/* JV removed - December 2014

string ia(string p){
    string s = p; 
    int l = (String:length(s)-1);
    if(l>=2){
        if(String:substring(s,0,2)=="T10"){
            s = String:concat("T",String:substring(s,3,l));
        }
    }
    return s;
}*/

/* ********************************************************** */
/* ********************************************************** */

void addIVRMappingTable(Pattern p){

    if (p == null){
        return;
    }

    if(p.patternIVRstring==null){ p.patternIVRstring = ""; p.save(); }

    IVRMappingTable[] iMt = IVRMappingTable:relationshipIn(ivrmappingtable_pattern, p);

    if( (iMt.length()==0) && (String:length(p.patternIVRstring)>1) ){
        IVRMappingTable im = IVRMappingTable:new();
        im.ivrmappingtable_pattern = p;
        im.ivrmappingtable_channelkey = p.PatternChannelKey;
        im.languageid = fGetLanguageKey(p);
        /* im.ivractivityid = String:upper(p.patternIVRstring); J Prentice #341 */
        im.ivractivityid = p.patternIVRstring; /* J Prentice #341 */
        im.save();
    }
}

/* ********************************************************** */
/* ********************************************************** */

void deleteIVRMappingTable(Pattern p){

   IVRMappingTable[] ivrArr = IVRMappingTable:relationshipIn(ivrmappingtable_pattern, p);

    if(ivrArr.length()>0){
        for(int i = 0; i < ivrArr.length(); i++){
            IVRMappingTable ivr = ivrArr.get(i);
            IVRMappingTable:delete(ivr);
        }
    }

    return null;
}

/* ********************************************************** */
/* ********************************************************** */

void fClearIVRMappingTable(){
        IVRMappingTable[] xxs = IVRMappingTable:all();
        IVRMappingTable x; int maxi = (xxs.length()-1);
        if (maxi>=0){
            for(int i = 0; i <= maxi; i++ ){
                x = xxs.get(i); IVRMappingTable:delete(x);
            }
        }
}

/* ********************************************************** */
/* ********************************************************** */

void buildIVRMappingTable(){

    Pattern[] ps = Pattern:all(); ps.sortAsc("patternID");
    Pattern p;
    int ml = ps.length();
    for(int i = 0; i<ml; i++){
        p = ps.get(i);

        /* JP HEL-178 */
        int channelID = ActivityController:getActivityChannelKeyID(p);
        if (channelID == 3){
            addIVRMappingTable(p);
        }
    }
    
    return null;
}

/* ********************************************************** */
/* ********************************************************** */

void fReplaceIVRMappingTable(Pattern p){
    deleteIVRMappingTable(p);
    addIVRMappingTable(p);
}