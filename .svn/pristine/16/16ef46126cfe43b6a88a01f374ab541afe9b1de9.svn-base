unit Umbrella;

/* ************************************************************************************************* */
/* ****************************** DEFINING VARIABLES *********************************************** */
/* ************************************************************************************************* */

datetime dStartDateTime;
Topic topic;
ClientGroup clientgroup;
Umbrella umbrellaNew;
Umbrella umbrellaDelete;
Umbrella umbrellaList;
Umbrella umbrellaSave;
UmbrellaTopicSetupTable umbrellaT;
TopicUserSetup deleteTopicUserSetup;
TopicUserSetup startTopicUserSetup;
Client client;
bool bDeleteConfirmation;
bool bShowAllClients;
bool bIgnoreDefaultTime;
bool bRescheduleForce;
int vrunType;
Client[] usersDropDown;

/* ************************************************************************************************ */
/* ******************************* START FOR CLIENT *********************************************** */
/* ************************************************************************************************ */

	void fStartTopicUserSetuponUmbrella(){
	    Client c = startTopicUserSetup.client_topicUserSetup;
	    Topic t = uGetCurrentSchedule:fGetCurrentTopic(c);
	    
	    if(t == null){
	        TopicList:startTopic(startTopicUserSetup, 1);
	        startTopicUserSetup = TopicUserSetup:new();
	        Mez:alert("TopicStartAlertOK");
	    } else
	    {
	        Mez:alert("TopicStartAlert");
	    }
	}

/* ************************************************************************************************ */
/* ****************************** DELETE FOR CLIENT *********************************************** */
/* ************************************************************************************************ */

	void fDeleteforclient(){
		TopicUserSetup[] tus; TopicUserSetup tu; int maxi;
		if (client == null){
			Mez:alert("umbrellaview.deleteclientalert");
			return null;
		} else if(client!=null) {
			if(bDeleteConfirmation==false){
				bDeleteConfirmation = true;
				Mez:alert("umbrellaview.deleteclientwarning");
			} else {
				tus = fGetAllTopicUserSetups(); maxi = tus.length();
				if(maxi>0){
					for(int i = (maxi-1); i>=0; i--){
						tu = tus.get(i);
						UmbrellaModelControllers:fDeleteTopicUserSetupExec(tu, 89,"fDeleteforclient");
					}
					Mez:alert("umbrellaview.deleteclientconfirmation");
				}
			}
		}
	}

/* ************************************************************************************************************************* */
/* ****************************** INITIALISING VARIABLES AND BASIC FUNCTIONS *********************************************** */
/* ************************************************************************************************************************* */

	void initbuttonreschedule(){

		dStartDateTime = Mez:now();
		if(BLUnits:fGetConfigSettingInt("DefaultTimeIgnore")==1) { bIgnoreDefaultTime = true; } else { bIgnoreDefaultTime = false; }
		if(BLUnits:fGetConfigSettingInt("DefaultRescheduleForce")==1) { bRescheduleForce = true; } else { bRescheduleForce = false; }
		return null;

	}

	void initbutton(){
		umbrellaNew = Umbrella:new();
		umbrellaSave = Umbrella:new();
		umbrellaT = UmbrellaTopicSetupTable:new();
		clientgroup = null;
		client = null;
		bDeleteConfirmation = false;
		bShowAllClients = false;
		vrunType = 1;
		dStartDateTime = Mez:now();

		usersDropDown = fGetclientsnotscheduled();

		if(BLUnits:fGetConfigSettingInt("DefaultTimeIgnore")==1) { bIgnoreDefaultTime = true; } else { bIgnoreDefaultTime = false; }
		if(BLUnits:fGetConfigSettingInt("DefaultRescheduleForce")==1) { bRescheduleForce = true; } else { bRescheduleForce = false; }


		return;
	}

/* ************************************************************************************************************************* */
/* ******************************* FUNCTIONS TO CYCYLE THROUGH FROM BUTTONS ************************************************ */
/* ************************************************************************************************************************* */

	/* ************************************************************************************************ */

	void fDeleteClientforUmbrella(){
		fCycleThroughGroup(-1, bIgnoreDefaultTime);
		return;
	}

	/* ************************************************************************************************ */

	void fSaveumbrellalink(){
		fCycleThroughGroup(1, bIgnoreDefaultTime);
		return;
	}

	/* ************************************************************************************************ */

	void fForcestartumbrellalink(){
		fCycleThroughGroup(2, bIgnoreDefaultTime);
		return;	
	}

	/* ************************************************************************************************ */

	void fReschedulembrellalink(){
		fCycleThroughGroup(3, bIgnoreDefaultTime);
		return null;
	}

	/* ************************************************************************************************ */

	void fCycleThroughGroup(int c, bool bIgnoreDefTime){
		int removecode = 89;
		if ( (clientgroup==null && client==null) || (umbrellaSave==null && c!=2) ){

			if(c==2){
				Mez:alert("umbrellaview.noselectionUserGroup");
			} else {
				Mez:alert("umbrellaview.noselection");
			}

		} else {
			if(client!=null) {
				if(c!=2){ UmbrellaScheduling:fScheduleclientumbrella(client, umbrellaSave, dStartDateTime, bIgnoreDefTime, c, 1, removecode); }
				TSPReminder:fManualTopicStart(client, 1);
			} else if(clientgroup!=null){
				UmbrellaScheduling:fSchedulegroupumbrella(clientgroup, umbrellaSave, c, dStartDateTime, bIgnoreDefTime);
			}
		}
		return;
	}

/* ************************************************************************************************************************* */
/* ****************************************** RETURN UMBRELLA COLLECTIONS ************************************************** */
/* ************************************************************************************************************************* */

	TopicUserSetup[] fGetAllTopicUserSetups(){
		TopicUserSetup[] tus;
		if(client == null){
			tus = TopicUserSetup:all();
		} else {
			tus = TopicUserSetup:relationshipIn(client_topicUserSetup, client);
		}
		return tus;
	}

	/* ************************************************************************************************ */

	TopicUserSetup[] fGetAllTopicUserSetupsActive3(){
		TopicUserSetup[] tus = TopicUserSetup:equals(active, 3);
		return tus;
	}

	/* ************************************************************************************************ */

	void filterUsersForGroup(){

		usersDropDown = fGetclientsnotscheduled();


		return null;
	}

	/* ************************************************************************************************ */

	void fViewalllients(){
		if(bShowAllClients == false){bShowAllClients = true;} else {bShowAllClients = false;}
		usersDropDown = fGetclientsnotscheduled();
		return null;
	}

	/* ************************************************************************************************ */

	Client[] fGetclientsnotscheduled(){
		Client[] clients = Client:all(); 
		Client client; TopicUserSetup[] tus = TopicUserSetup:all();
		int maxi = clients.length();
		if(bShowAllClients == false){
			for(int i=(maxi-1); i>=0; i--){
				client = clients.get(i);
				if(fIsScheduled(tus, client) == true){
					clients.remove(i);
				}
			}
		}
		return clients;
	}

	/* ************************************************************************************************ */

	Topic fGetIndexZeroTopicInUmbrella(Umbrella u, LanguageKeyObject lk, string st){
		
		if (u==null){ return null; }

		UmbrellaTopicSetupTable[] uTs = UmbrellaTopicSetupTable:relationshipIn(umbrella_UmbrellaUserSetup, u); 
		UmbrellaTopicSetupTable uT = null; Topic t = null; int i = 0; int maxi = uTs.length();

		if(maxi>0){
			if(st=="first"){
				uTs.sortAsc("ordernum");
			} else if(st=="last"){
				uTs.sortDesc("ordernum");
			}
			for(i=0; i<maxi; i++){
				uT = uTs.get(i);
				if(uT.topic_UmbrellaUserSetup!=null){
					t = uT.topic_UmbrellaUserSetup;
					if(t.topic_LanguageKey != lk){
						t = null;
					} else{
						i = maxi;
					}
				}
			}
		}

		string slog = "null"; if(t!=null){ slog = t.topicID; }
		slog = String:concat("fGetIndexZeroTopicInUmbrella : UmbrellaID = '",u.umbrellaID,"' | Comparison = '", st, "' | Topic = '", slog, "'"); Mez:log(slog);

		return t;

	}

	/* ************************************************************************************************ */

	bool fIsScheduled(TopicUserSetup[] tus, Client client){
		TopicUserSetup[] tus2 = tus.select(and(relationshipIn(client_topicUserSetup, client),equals(active,2)));
		if(tus2.length()>0){return true;} else {return false;}
	}

/* ************************************************************************************************ */
/* ************************************************************************************************ */

	void deleteUmbrellaT(){
		UmbrellaTopicSetupTable:delete(umbrellaT);
		initbutton();
		return;
	}

	/* ************************************************************************************************ */

	void saveUmbrellaT(){
		umbrellaT.topic_UmbrellaUserSetup = topic;
		umbrellaT.umbrella_UmbrellaUserSetup = umbrellaList;
		if(umbrellaT.ordernum==null){ umbrellaT.ordernum=1; }
		umbrellaT.save();
		initbutton();
		return null;
	}

	/* ************************************************************************************************ */

	void editUmbrellaT(){
		topic = umbrellaT.topic_UmbrellaUserSetup;
		umbrellaList = umbrellaT.umbrella_UmbrellaUserSetup;
		return null;
	}

	/* ************************************************************************************************ */

	void fdeleteUmbrellaObject(){
		Umbrella:delete(umbrellaDelete);
		initbutton();
		return;
	}

	/* ************************************************************************************************ */

	string feditUmbrellaObject(){
		umbrellaNew = umbrellaDelete;
		return null;
	}

	/* ************************************************************************************************ */

	string fsaveUmbrellaObject(){
		umbrellaNew.umbrellaFlags = String:lower(umbrellaNew.umbrellaFlags);
		umbrellaNew.save();
		initbutton();
		return "linkumbrellaview";
	}

	/* ************************************************************************************************ */

	Topic[] umbrellaview_topicids(){
		return Topic:all();
	}

	/* ************************************************************************************************ */

	Topic[] fGetTopicsByUmbrella(Umbrella u){
		UmbrellaTopicSetupTable[] uTs = UmbrellaTopicSetupTable:relationshipIn(umbrella_UmbrellaUserSetup,u); int maxi = uTs.length();
		UmbrellaTopicSetupTable uT; Topic[] tRs = null; Topic t;

		if(maxi>0){
			uTs.sortAsc("ordernum");
			for(int i=0;i<maxi;i++){
				uT = uTs.get(i); t = uT.topic_UmbrellaUserSetup;
				tRs.append(t);
			}
		}
		return tRs;
	}

	/* ************************************************************************************************ */

	Umbrella[] umbrellaview_umbrellas(){

	    Umbrella[] uS = Umbrella:all(); Umbrella[] uRs = null; Umbrella u; string s; bool b;

	    uS.sortAsc("umbrellaID");

	    for(int i=0; i<uS.length(); i++){
	        u = uS.get(i); b = false;
	        s = ""; if(u.umbrellaFlags!=null){ s = u.umbrellaFlags; }
	        if(s!=""){ b = BLUnits:fStringContains(s, "nr", 0); }
	        if(b==false){ uRs.append(u); }
	    }

	    return uRs;
	
	}

	/* ************************************************************************************************ */

	UmbrellaTopicSetupTable[] umbrellaview_umbrellatopicsetups(){
		return UmbrellaTopicSetupTable:all();
	}

	/* ************************************************************************************************ */

	Umbrella fGetdefaultumbrella(){
		Umbrella[] us = Umbrella:equals(umbrellaFlags,"default"); Umbrella u = null;
		if(us.length()>0){
			u = us.get(0);
		}
		return u;
	}

/* ************************************************************************************************ */
/* ************************************************************************************************ */