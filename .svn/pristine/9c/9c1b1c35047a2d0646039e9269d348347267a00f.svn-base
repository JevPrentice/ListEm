unit BLUnits;

/* ********************************* */
/* ********************************* */

string fGetReleaseVersion(){
    return "Sprint 8b : 14 April 2015 20:29 (After Preproduction Testing)";
}

/* ********************************* */
/* ********************************* */

ClientSMSQueue[] fGetAllSMSQueue(){
     return ClientSMSQueue:all();    
}

/* ******************************************************************************************** */
/* ******************************************************************************************** */

//@ReceiveSms("Receive Client's SMS Messages")
void processRecievedSMS ( Client client , string mobileNumber, string message) {
	return null;
}

/* ********************************************************************************** */
/* ********************************************************************************** */

bool validValue(string s, int maxs) {
    
    if (maxs == 0) { maxs = 10; }
    bool r = false;
    int i = Integer:fromString(s);
    if(i!=null){
        if(i>=1&&i<=maxs){
            r = true;}
    }

    //string ls = String:concat("validvalue: ", s, "|", maxs, "|", r); Mez:log(ls);

    return r;
}

/* ********************************************************************************** */
/* ********************************************************************************** */

string getFirstLetter(string smsText) {
	string validFirstLetter = "";
	int lenghtM = String:length(smsText);
	if(lenghtM >1) {
		 validFirstLetter = String:substring(smsText,0,0);
		 validFirstLetter = String:lower(validFirstLetter);
	} 
	return validFirstLetter;
}

string getSMSTextClean(string smsText ) {
	string smsTextClean = "";
	int lenghtM = String:length(smsText)-1;
	smsTextClean = String:substring(smsText,1,lenghtM);
	
	bool hasSpace = String:startsWith(smsTextClean," ");
	if(hasSpace == true) {
	 	lenghtM = String:length(smsTextClean) -1;
	 	smsTextClean = String:substring(smsTextClean,1,lenghtM);
	}	
	return smsTextClean;
}

/* ********************************************************************************** */
/* ********************************************************************************** */

void fSendDirect(Client[] cs, string s, string sCode){
    Client c; string text = s;

    if(cs.length() <= 0){
        return null;
    }

    if(fGetConfigSettingInt("DoNotSendSMS") == 1){
        
        for(int i = 0; i<cs.length(); i++){
            c = cs.get(i);
            saveAllSMSLogs(c, s, sCode);
        }
        
        return;

    }

    for(int i = 0; i<cs.length(); i++){
        c = cs.get(i);
        if (c.isActive == true){
            Mez:sms(c, "mobileNumber", "sentSMSTOUser.message");
        }
    }

    if(sCode!="Chat") {
        for(int i = 0; i<cs.length(); i++){
            c = cs.get(i);
            saveAllSMSLogs(c, s, sCode);
        }
    }
    
    return null;
}

/* ********************************************************************************** */
/* ********************************************************************************** */

string fSS(string originalstring, string searchfor, string replacestring){

    string returnstring = originalstring; 
    string[] sss = String:split(originalstring, searchfor);
    int i = sss.length();

    if (i>1){
        returnstring = String:concat(sss.get(0), replacestring, sss.get(1));
        //string ls = String:concat("Replacing_in_fSS: |", originalstring, "|", searchfor, "|", replacestring, "|", i, "|", returnstring, "|"); Mez:log(ls);
    }

    return returnstring;
}

/* ********************************************************************************** */
/* ********************************************************************************** */

bool fStringContains(string originalstring, string searchfor, int ic){

    bool bR = false;

    if(originalstring==null || searchfor==null){ return bR; }

    if(ic==0){ originalstring = String:lower(originalstring); searchfor = String:lower(searchfor); }

    originalstring = String:concat("*****",originalstring,"*****");
    string[] sss = String:split(originalstring, searchfor);

    int i = sss.length();

    if (i>1){ bR = true; }

    string ls = String:concat("fStringContains: |", originalstring, "|", searchfor, "|", ic, "|", i, "|", bR, "|"); Mez:log(ls);

    return bR;

}

/* ********************************************************************************** */
/* ********************************************************************************** */

string fFinalReplace(Client c, string s){
    string r = s;
    r = fSS(r, "pharmacyname", c.firstName);
    return r;
}

/* ********************************************************************************** */
/* ********************************************************************************** */

void SendSMSToClient(Client client, string smsText) {
    
    if(smsText == null || client == null) { return null; }
    if(client.mobileNumber == null) { return null; }
    
    if(client.isActive != true) { return null; } /* JP #383 2015-04-14 */

    bool loguser = (client.mobileNumber == "27000000000"); 
    
    if (String:length(smsText)>0){
        Client[] clients;
    	clients.append(client);

        /* Added to clean up outgoing message and ensure that it replaces the final string */
    	string outgoingText = fFinalReplace(client, smsText);
        string text = outgoingText;
    	/* Added to clean up outgoing message and ensure that it replaces the final string */

        if ((loguser == true)||(fGetConfigSettingInt("DoNotSendSMS") == 1)) {
            saveAllSMSLogs (client, outgoingText, "MT");
        } else if (fGetConfigSettingInt("DelaySMS") == 1){
    	    creatClientSMSQueue(client, outgoingText);
        } else
        {
            //Mez:sms(clients, "mobileNumber", "sentSMSTOUser.message");  //NY 20141210 for testing purposes 
            saveAllSMSLogs (client, outgoingText, "MT");
        }
    }

}

/* ********************************************************************************** */
/* ********************************************************************************** */

void creatClientSMSQueue(Client c, string smsText) {
    ClientSMSQueue csmsq = ClientSMSQueue:new();
	csmsq.c_clientsmsqueue = c;
	csmsq.smsText = smsText;
	csmsq.smsDateTime = Mez:now();
	csmsq.save();	
}

/* **************************************************************** */

void fAddClientToSMSToBeSentOut(Client c, ClientSMSQueue smsq) {
	SMSToBeSentOut smsSO = SMSToBeSentOut:new();
	smsSO.c_smsTBSO = c;
	smsSO.stbe_csmsq = smsq;
	smsSO.save();
}

/* **************************************************************** */

void fSendSMSSentOut(SMSToBeSentOut smsSO){
    ClientSMSQueue smsq = smsSO.stbe_csmsq;
    Client c = smsq.c_clientsmsqueue;
    string text = smsq.smsText; 
    Mez:sms(c, "mobileNumber", "sentSMSTOUser.message");
    saveAllSMSLogs (c, text, "MT");
}

void fDeleteSMSSentOut(){
    
    SMSToBeSentOut[] smsSOs = SMSToBeSentOut:all();
    ClientSMSQueue smsq; SMSToBeSentOut smsSO;
    
    int maxi = (smsSOs.length());
    
    for(int i = 0; i<maxi; i++){
        smsSOs = SMSToBeSentOut:all();
        if(smsSOs.length()>0){
            smsSO = smsSOs.last();
            if(smsSO != null){
                smsq = smsSO.stbe_csmsq;
                ClientSMSQueue:delete(smsq);
                SMSToBeSentOut:delete(smsSO);
            }
        }
    }
    
}

/* **************************************************************** */

bool fIsClientAlreadyInSMSToBeSentOut(Client c){
    bool b = false;
    SMSToBeSentOut[] smsSOs = SMSToBeSentOut:relationshipIn(c_smsTBSO, c);
    if(smsSOs.length()>0){
        b = true;
    }
    return b;
}

/* **************************************************************** */

@Scheduled("* * * * *")
void sentClientSMSQueue(){

    int maxi; int i; string text; Client c;
    
    ClientSMSQueue[] cQs = ClientSMSQueue:all();
    ClientSMSQueue cQ = ClientSMSQueue:new();
    
    if (cQs.length()>0){
        
        cQs.sortAsc("smsDateTime");
        maxi = (cQs.length()-1);
        for(i = 0; i<= maxi; i++){
            cQ = cQs.get(i);
            c = cQ.c_clientsmsqueue;
            if(fIsClientAlreadyInSMSToBeSentOut(c) == false){
                fAddClientToSMSToBeSentOut(c, cQ);
            }
        }   
    
        SMSToBeSentOut[] smsSOs = SMSToBeSentOut:all();
        SMSToBeSentOut smsSO = SMSToBeSentOut:new();
        
        if (smsSOs.length()>0){
            maxi = (smsSOs.length()-1);
            for(i = 0; i<=maxi; i++){
                smsSO = smsSOs.get(i);
                fSendSMSSentOut(smsSO);
            }
        }
        fDeleteSMSSentOut();
    }
}

/* **************************************************************** */
/* **************************************************************** */

void saveAllSMSLogs(Client client, string smsText, string directionstr) {	
    if(client == null){
        client = fGetLogClient();
    }

    AllSMSLog allSMSLogs = AllSMSLog:new();
    allSMSLogs.messageText = smsText;
    allSMSLogs.dateTimeStamp = Mez:now();
    allSMSLogs.allSMSLog_client = client;
    allSMSLogs.direction = directionstr;
    allSMSLogs.save();
}

AllSMSLog[] getAllSMSLogs() { 
    return AllSMSLog:all();
}

/* **************************************************************** */
/* **************************************************************** */

Client fGetLogClient(){
    string vLogClientNumber = "27000000000";
    Client sClient;
    Client[] sClients = Client:equals(mobileNumber, vLogClientNumber);
    if(sClients.length()>0){
        sClient = sClients.get(0);
        return sClient;
    } else
    {
        sClient = Client:new();
        sClient.mobileNumber = vLogClientNumber;
        sClient.save();
        return sClient;
    }
}

/* **************************************************************** */
/* **************************************************************** */

int fGetConfigSettingInt(string cv){
    
    ConfigTable[] cfs = ConfigTable:equals(sConfigDescription, cv);
  
    if(cfs.length()>0){
        ConfigTable cf = cfs.get(0);
        return cf.iConfigValue;
    } else {
        return 0;
    }
}

string fGetConfigSettingStr(string cv){
    
    ConfigTable[] cfs = ConfigTable:equals(sConfigDescription, cv);
  
    if(cfs.length()>0){
        ConfigTable cf = cfs.get(0);
        return cf.sConfigValue;
    } else {
        return 0;
    }
}
/* **************************************************************** */
/* **************************************************************** */
string updateNumber(string number){
	int i = String:length(number); i = i - 1;
    if (i>=8)
    {
        if (String:substring(number,0,0) == "0"){
           return String:concat("254",String:substring(number,1,i)); /* JV : Add Country Code Table */
        } else if ((String:substring(number,0,0) != "2") && (String:substring(number,0,0) != "0")) {
        	return String:concat("254",number);       
        }else  if(i ==8){
        	return String:concat("254",number);       
        }else{
        	return number;
        }
    }else {
    	 return number; //String:concat("254",String:substring(number,1,i));
    }
}

/* **************************************************************** */
//is type of number 
/* **************************************************************** */
string isNumber(string number){
	bool isInteger = true;
    int l = String:length(number);
	for(int i=0; i<l; i++){
		string c=String:substring(number,i,i);
		if((c>="0" && c<="9") != true)
		{ 
			isInteger = false;
		}
	}
	return isInteger;
}


/* JV-Added-Confirmation-Message */
void fConfirmPharmacistRegistration(Pharmacist pmct, string pn){
	if(pmct!=null){
	Pharmacist[] pmcts; pmcts.append(pmct);
	string s = fGetConfigSettingStr("PharmacistConfirmationMessage");
	s = fSS(s, "pharmacyname", pn);
	s = fSS(s, "mobileNumber", pmct.mobileNumber);
	string text = s;
	Mez:sms(pmcts, "mobileNumber", "sentSMSTOUser.message");
	saveAllSMSLogs(null, s, "Reg");
	}
/* ***************************** */
}
