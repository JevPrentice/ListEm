unit TopicUserSetupList;

TopicUserSetup pauseTopicUserSetup;
TopicUserSetup endTopicUserSetup;
TopicUserSetup startTopicUserSetup;
TopicUserSetup deleteTopicUserSetup;
TopicUserSetup topicUserSetup;

Topic topic;
Client client;
bool edit;
bool clearSchedule;
bool stopSchedule;
bool pauseSchedule;
bool resumeSchedule;
bool bClearTopicHistory;
ClientGroup sClientGroup;
LanguageKeyObject languageKey;

Umbrella umbrellaSchedule;

/* ************************************************* */
/* ************************************************* */

void init() {
    topicUserSetup = TopicUserSetup:new();
    topicUserSetup.active = 2;
    topicUserSetup.runType = 1;
    topicUserSetup.topicMinStartDate = Mez:now();
    edit = false;
    clearSchedule = false;
    stopSchedule = false;
    pauseSchedule = false;
    resumeSchedule = false;
    bClearTopicHistory = false;
    return null;
}

/* ************************************************************************************************** */
/* ************************************************************************************************** */

void saveTopicUserSetupGroup(){
    int l = TopicList:fGuessTopicLanguageID(topic);
    LanguageKeyObject lO = LanguageKeyController:getLanguageKeyByIDNotNull(l);

    if (languageKey!=null && languageKey==lO){
        if(sClientGroup != null){
            fCycleGroupScheduleExec(sClientGroup, 11);
            Mez:alert("savetopicconfirmgroup.text");
        }
    } else {
        Mez:alert("savetopicconfirmgroup.alertlanguage");
    }
}

/* ************************************************************************************************** */
/* ************************************************************************************************** */

void pauseTopicUserSetupGroup(){
    if(pauseSchedule == true){
        if(sClientGroup != null){
            fCycleGroupScheduleExec(sClientGroup, 0);
            pauseSchedule = false;
            Mez:alert("topicuserlist.pausegroupscheduleconfirm");
        }
    } else {
        pauseSchedule = true;
        Mez:alert("topicuserlist.pausegroupschedulealert");
    }
    return null;
}


/* ************************************************************************************************** */
/* ************************************************************************************************** */

void resumeTopicUserSetupGroup(){
    if(resumeSchedule == true){
        if(sClientGroup != null){
            fCycleGroupScheduleExec(sClientGroup, 1);
            resumeSchedule = false;
            Mez:alert("topicuserlist.resumegroupscheduleconfirm");
        }
    } else {
        resumeSchedule = true;
        Mez:alert("topicuserlist.resumegroupschedulealert");
    }
    return null;
}

/* ************************************************************************************************** */
/* ************************************************************************************************** */

void stopTopicUserSetupGroup(){
    if(stopSchedule == true){
        if(sClientGroup != null){
            fCycleGroupScheduleExec(sClientGroup, 2);
            stopSchedule = false;
            Mez:alert("topicuserlist.stopgroupscheduleconfirm");
        }
    } else {
        stopSchedule = true;
        Mez:alert("topicuserlist.stopgroupschedulealert");
    }
    return null;
}

/* ************************************************************************************************** */
/* ************************************************************************************************** */

void clearTopicUserSetupGroup(){
    if(clearSchedule == true){
        if(sClientGroup != null){
            fCycleGroupScheduleExec(sClientGroup, 3);
            clearSchedule = false;
            Mez:alert("topicuserlist.cleargroupscheduleconfirm");
        }
    } else {
        clearSchedule = true;
        Mez:alert("topicuserlist.cleargroupschedulealert");
    }
    return null;
}

/* ************************************************************************************************** */
/* ************************************************************************************************** */

void fCycleClientScheduleExec(Client c, int code){
    TopicUserSetup[] tus = TopicUserSetup:relationshipIn(client_topicUserSetup, c); int maxi = tus.length(); TopicUserSetup tU;

    if(maxi>0){

        tus.sortDesc("topicMinStartDate");

        for(int i = (maxi-1); i>=0; i--){
            tU = tus.get(i);

            if((code >= 2) && (tU.active == 1)) { TopicList:fForceEndTopic(tU, 89); }

            if(code == 3 && (tU.active == 0)) {TopicUserSetup:delete(tU);}
        }
    }

    return null;
}

/* ************************************************************************************************** */
/* ************************************************************************************************** */

void fCycleGroupScheduleExec(ClientGroup cg, int code){
    Client[] cs = ClientGroupList:getAllClientsFromGroupIn(cg);  int maxi = cs.length(); Client c; int i = 0; int rp;
    
    if (maxi>0){
        for(i = 0; i < maxi; i++){

            c = cs.get(i);
            if(code == 11){
                if(c.client_LanguageKey == languageKey && languageKey!=null){
                    TopicUserSetupController:saveTopicUserSetupExec(2, c, topic, topicUserSetup, umbrellaSchedule);
                }
            } else if(code>1) {
                fCycleClientScheduleExec(c, code);
            } else if(code==0){
                rp = NewFlowControllers:fPauseCurrentOrResumeLastTopic(c, 1);
            } else if(code==1){
                rp = NewFlowControllers:fPauseCurrentOrResumeLastTopic(c, 2);
            }

        }
    }

    return null;
}

/* ************************************************* */
/* ************************************************* */

void fFilterForGroup(){
    init();
}

/* ************************************************* */
/* ************************************************* */

Client[] fGetClients(){
    Client[] cs = null;
    if(sClientGroup == null){
        cs = ClientList:getClients();
    } else {
        cs = uPPESummary:fGetAllClientsFromGroup(sClientGroup);
    }
    return cs;
}

/* ************************************************* */
/* ************************************************* */

void fClearTopicHistory(){
    if(client != null && topic != null){
        if(bClearTopicHistory == true){
                uResetUsers:fReactivateClientSpecificTopic(client, null, topic, 1);
                uResetUsers:fRestoreTopicVersion(client, null, topic);
                bClearTopicHistory = false;
                Mez:alert("topicuserlist.clearscheduleconfirm");
        } else {
            bClearTopicHistory = true;
            Mez:alert("topicuserlist.clearschedulealert");
        }
    }
    return null;
}

/* ************************************************* */
/* ************************************************* */

void fReactivateAll(){
    uResetUsers:fReactivateAll();
}


/* ************************************************* */
/* ************************************************* */

TopicHistory[] fGetTopicHistory(){
    TopicHistory[] topicHistorys = TopicHistory:all();
    return topicHistorys;
}

TopicHistoryLog[] fGetTopicHistoryLog(){
    TopicHistoryLog[] tHls = TopicHistoryLog:all();
    return tHls;
}

CurrentTopic[] fGetCurrentTopic(){
    CurrentTopic[] cts = CurrentTopic:all();
    return cts;
}

/* ************************************************* */
/* ************************************************* */

void fStartTopicUserSetup(){
    Client c = startTopicUserSetup.client_topicUserSetup;
    Topic t = uGetCurrentSchedule:fGetCurrentTopic(c);
    
    if(t == null){
        TopicList:startTopic(startTopicUserSetup, 1);
        /* startTopicUserSetup = TopicUserSetup:new(); JV : Check Here */
        Mez:alert("TopicStartAlertOK");
    } else
    {
        Mez:alert("TopicStartAlert");
    }
}

/* ************************************************************************************************** */
/* ************************************************************************************************** */

void fEndClientStoponStop(Client c){
    fCycleClientScheduleExec(c, 3);    
}

/* ************************************************************************************************** */
/* **********                                Flow Controllers                              ********** */
/* ************************************************************************************************** */

string fActionTopicUser(int i){
    Topic t = pauseTopicUserSetup.topic_topicUserSetup;
    Client c = pauseTopicUserSetup.client_topicUserSetup;
    string s = NewFlowControllers:fPauseTopic(c, t, i);
    return s;
}

void fPauseTopicUser(){
    string s = fActionTopicUser(1);
    if(s=="paused"){ Mez:alert("learningManager.topicList.pauseConfirm"); }
}

void fResumeTopicUser(){
    string s = fActionTopicUser(2);
    if (s=="resumed") { Mez:alert("learningManager.topicList.resumeConfirm"); }
}


/* ************************************************************************************************** */
/* ************************************************************************************************** */

string saveTopicUserSetup() {
    
    string result = ""; int code = 0; if(edit==true){ code = 1; }
    result = TopicUserSetupController:saveTopicUserSetupExec(code, client, topic, topicUserSetup, umbrellaSchedule);
    if (result == "EDIT" || result == "NEW"){
        Mez:alert("savetopicconfirm.text");
        init();    
    } else if (result == "DUPL"){
        Mez:alert("savetopicduplicationalert.text");
    }
    return null;
    
}

/* ************************************************* */
/* ************************************************* */

string editTopicUserSetup() {
    edit = true;
    topic = topicUserSetup.topic_topicUserSetup;
    client = topicUserSetup.client_topicUserSetup;
    return null;
}
/* ************************************************* */
/* ************************************************* */

string ForceTopicUserEnd() {
    TopicUserSetup tU = startTopicUserSetup;
    if(tU.active == 1||tU.active == 20){
        TopicList:fForceEndTopic(tU, 89);
    }
    return null;
}

/* ************************************************* */
/* ************************************************* */

string deleteTopicUserSetup() {
    TopicUserSetup tU = deleteTopicUserSetup;
    if(tU.active == 1){ 
        TopicList:fForceEndTopic(tU, 89); 
    }
	TopicUserSetup:delete(tU);
	init();
	return null;
}

/* ************************************************* */
/* ************************************************* */

    TopicUserSetup[] fAddCollection1(Client c){
        TopicUserSetup[] tUS = TopicUserSetup:relationshipIn(client_topicUserSetup, c);
        return tUS;
    }

/* ************************************************* */

    TopicUserSetup[] fAddCollection2(TopicUserSetup[] tUS, TopicUserSetup[] tUSr){
        int i; int maxi = tUSr.length(); TopicUserSetup tU;
        for(i=0; i<maxi; i++){
            tU = tUSr.get(i);
            tUS.append(tU);
        }
        return tUS;
    }

/* ************************************************* */
/* ************************************************* */

TopicUserSetup[] fGetAllTopicUserSetups(){
    TopicUserSetup[] tUS; TopicUserSetup[] tUSr; Client[] cs; int i=0; int maxi=0; Client c;

    if(client!=null){
        tUSr = fAddCollection1(client);
        tUS = fAddCollection2(tUS, tUSr);
    } else if(sClientGroup==null){
        tUS = TopicUserSetup:all();
    } else {
        tUS.clear();
        cs = uPPESummary:fGetAllClientsFromGroup(sClientGroup);
        maxi = (cs.length());
        for(i=0; i<maxi; i++){
            tUSr.clear();
            c = cs.get(i);
            if(client==null||client==c){
                tUSr = fAddCollection1(c);
                tUS = fAddCollection2(tUS, tUSr);
            }
        }
    }
    
    return tUS;
}

/* ************************************************* */
/* ************************************************* */

Topic[] fGetTopicsByUmbrella(){
    Topic[] tS = null;
    if(umbrellaSchedule==null){
        tS = TopicList:getAllTopicsFiltered();
    } else {
        tS = Umbrella:fGetTopicsByUmbrella(umbrellaSchedule);
    }
    return tS;
}

/* ************************************************* */
/* ************************************************* */

TopicUserSetup[] fGetAllTopicUserSetupsGroup() {
    TopicUserSetup[] tus; tus.clear();
    if(sClientGroup!=null){
      tus = fGetAllTopicUserSetups();
	} 
    return tus;
    
}

/* ************************************************* */
/* ************************************************* */

TopicUserSetup[] getAvailableClientTopicUserSetups(Client client) {
    TopicUserSetup[] tss = TopicUserSetup:and(relationshipIn(client_topicUserSetup, client), equals(active, 1)); 
    if (tss.length() == 0){
        return null;
    } else {
        return tss;
    }
}

/* ************************************************* */
/* ************************************************* */

TopicUserSetup getActiveTopicFromTopicUserSetup(Client client) {

    TopicUserSetup[] tss = getAvailableClientTopicUserSetups(client);
    TopicUserSetup ts;
    
    if(tss.length() == 0) {
        return null;
    } else {
        tss.sortAsc("topicOrder");
        ts = tss.first();
        return ts;        
    }
}