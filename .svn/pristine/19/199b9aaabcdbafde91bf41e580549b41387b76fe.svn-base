unit SubTopicController;

string message;

Topic createSubTopic(
		int topicType, 
		int langKeyID, 
		string topicFlags, 
		string subTopicID, 
		string subTopicName, 
		string subTopicStartSMS, 
		string subTopicEndSMS, 
		string subTopicReminderSMS, 
		int subTopicReminderTime, 
		int subTopicEscalationTime, 
		int subTopicMaxDuration){

    Topic[] check = Topic:equals(topicID, subTopicID); 
    if(check.length() > 0) {
    	string msg = String:concat("Unable to create SubTopic with ID: ", subTopicID, " becuase it already exists");
    	Logger:log(msg);
    	Alerter:alert(msg);
    	return null;
    }

    LanguageKeyObject lKo = LanguageKeyController:getLanguageKeyByID(langKeyID);
    if (lKo==null) {
    	string msg = String:concat("UploadLog : fCreateTopic : No language object : ", subTopicID, " : ", langKeyID);
    	Logger:log(msg);
    	Alerter:alert(msg);
        return null;
    }

    Topic topic = Topic:new();
    topic.topicID = subTopicID;
    topic.topicName = subTopicName;
    topic.topicStartSMS = subTopicStartSMS;
    topic.topicEndSMS = subTopicEndSMS;
    topic.topicReminderSMS = subTopicReminderSMS;
    topic.topicReminderTime = subTopicReminderTime;
    topic.topicEscalationTime = subTopicEscalationTime;
    topic.topicMaxDuration = subTopicMaxDuration;

    topic.topicType = topicType;
    topic.topicFlags = topicFlags;
    topic.topic_LanguageKey = lKo;

    topic.save();

	string msg = String:concat("SubTopic with ID: ", topic.topicID, " created");
	Logger:log(msg);
    Alerter:alert(msg);

    return topic;
}

Topic[] getAllSubTopics(){
    return Topic:all();
}

Topic[] getSubTopicsForTopic(Umbrella u){

    UmbrellaTopicSetupTable subTopicOrder;
    UmbrellaTopicSetupTable[] subTopicOrders = SubTopicOrderController:getSubTopicOrdersForTopic(u);

    Topic[] subTopics;

    for (int i = 0; i < subTopicOrders.length(); i++){
        subTopicOrder = subTopicOrders.get(i);
        subTopics.append(subTopicOrder.topic_UmbrellaUserSetup);
    }
    return subTopics;
}

Topic[] getSubTopicsForTopicID(string subTopicID){

	Topic[] subTopics;

	if (subTopicID == null){
		return null;
	}

	if (subTopicID == ""){
		return null;
	}

	subTopics = Topic:equals(topicID, subTopicID);	

	return subTopics;
}

Topic getSubTopicsForTopicID_singleRecord(string subTopicID){
	Topic[] subTopics = getSubTopicsForTopicID(subTopicID);

	if(subTopics.length() > 1){
		return null;
	}

	return subTopics.get(0);
}

int countMtForSubTopic(Topic subTopic, LanguageKeyObject lang){
	int count = 0;

	if (subTopic == null){
		return null;
	}

	LanguageKeyObject topicLang = subTopic.topic_LanguageKey;

	if ( lang == null || (topicLang.languageID == lang.languageID) ){

		Sequence[] sequences = SequenceController:getSequencesForSubTopic(subTopic);
		Sequence sequence;

		if (subTopic != null){
			if (subTopic.topicStartSMS != null && subTopic.topicStartSMS != ""){
				count++;
			}
			if (subTopic.topicEndSMS != null && subTopic.topicEndSMS != ""){
				count++;
			}
		}

		for(int i = 0; i < sequences.length(); i++){
			sequence = sequences.get(i);

			if (sequence != null){
				if (sequence.sequenceStartSMS != null && sequence.sequenceStartSMS != ""){
					count++;
				}
				if (sequence.sequenceEndSMS != null && sequence.sequenceEndSMS != ""){
					count++;
				}
			}

			//message = String:concat("count now = ", count);
	        //Alerter:alert(message);
	        //Logger:log(message);

			Pattern[] activities = ActivityController:getActivitiesForSequence(sequence);
			Pattern activity;

			//message = String:concat("There are ", activities.length(), " activities for sequence: ", sequence.sequenceID);
	        //Alerter:alert(message);
	        //Logger:log(message);

			for(int j = 0; j < activities.length(); j++){
				activity = activities.get(j);

				if (activity != null){
					if (activity.patternStartSMS != null && activity.patternStartSMS != ""){
						count++;
					}
					if (activity.patternEndSMS != null && activity.patternEndSMS != ""){
						count++;
					}
				
					PatternMessageText[] messageOrders = MessageOrderController:getMassageOrdersForActivity(activity);
					Message[] messages = MessageController:getMessagesFromMessageOrders(messageOrders);

					int channelID = ActivityController:getActivityChannelKeyID(activity);
					if (channelID == 1){

						//message = String:concat("activity ", j ,": ", activity.patternID, " has ", messages.length(), " messages");
				        //Alerter:alert(message);
			      		//Logger:log(message);

						for (int k = 0; k < messages.length(); k++){
							count++;
						}
					}
				}
			}
		}
	}

	
	return count;
}

int countMoForSubTopic(Topic subTopic, LanguageKeyObject lang){
	int count = 0;

	if (subTopic == null){
		return null;
	}

	LanguageKeyObject topicLang = subTopic.topic_LanguageKey;

	if ( lang == null || (topicLang.languageID == lang.languageID) ){

		Sequence[] sequences = SequenceController:getSequencesForSubTopic(subTopic);
		Sequence sequence;

		for(int i = 0; i < sequences.length(); i++){
			sequence = sequences.get(i);

			Pattern[] activities = ActivityController:getActivitiesForSequence(sequence);
			Pattern activity;

			for(int j = 0; j < activities.length(); j++){
				activity = activities.get(j);

				if (activity != null){

					PatternType activityType = ActivityTypeController:getActivityTypeForActivity(activity);

					if (activityType != null){
						if (activityType.MOMultiple == 1){

							PatternMessageText[] messageOrders = MessageOrderController:getMassageOrdersForActivity(activity);
							Message[] messages = MessageController:getMessagesFromMessageOrders(messageOrders);
						
							int channelID = ActivityController:getActivityChannelKeyID(activity);
							if (channelID == 1){

								for (int k = 0; k < messages.length(); k++){
									count++;
								}
							}
						}
					}
				}
			}
		}

	}
	return count;
}

int countIvrLengthInSecondsForSubTopic(Topic subTopic, LanguageKeyObject lang){

	int secs = 0;

	if (subTopic == null){
		return secs;
	}

	LanguageKeyObject topicLang = subTopic.topic_LanguageKey;

	if ( lang == null || (topicLang.languageID == lang.languageID) ){

		Sequence[] sequences = SequenceController:getSequencesForSubTopic(subTopic);
		Sequence sequence;

		for(int i = 0; i < sequences.length(); i++){
			sequence = sequences.get(i);
		
			if (sequence != null){

				// message = String:concat(subTopic.topicID, "-" ,sequence.sequenceID);
				// Alerter:alert(message);
				// Logger:log(message);

				Pattern[] activities = ActivityController:getActivitiesForSequence(sequence);
				Pattern activity;

				for(int j = 0; j < activities.length(); j++){
					activity = activities.get(j);
				   	
					if (activity != null){
						int channelID = ActivityController:getActivityChannelKeyID(activity);
						if (channelID == 3 && activity.ivr_length_sec != null){
							int s = activity.ivr_length_sec;
							if (s != null && s >= 0){
								secs = secs + s;
							} else {
								message = String:concat("INVALID IVR LENGTH ON: ST=", subTopic.topicID, " Seq=" ,sequence.sequenceID, " Act=", activity.patternID);
							   	Alerter:alert(message);
							   	Logger:log(message);
							}
						}
					}
				}
			}
		}
	}

	

	return secs;

}

int calculateSubTopicTotalWeightForLanguage(Topic subTopic, LanguageKeyObject lang){

	int smsMtCount = countMtForSubTopic(subTopic, lang);
	int smsMoCount = countMoForSubTopic(subTopic, lang);
	int secs = countIvrLengthInSecondsForSubTopic(subTopic, lang);
	secs = ContentCatalogue:getIvrMinutesForSeconds(secs);

	return smsMtCount + smsMoCount + secs;

}