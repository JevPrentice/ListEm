unit BLUnits_RunOnce;

//BLUnits_RunOnce:fCreateConfigTableForLog();

/* ******************************************************************************************** */
/* ******************************************************************************************** */
/* ******************************************************************************************** */
/* ******************************************************************************************** */

void buildAllStaticSetup(){

	// Run these every time to ensure new configuration settings are added
	fCreateConfigTable();

	// Run these every time to ensure new statusses are added
    fCreateStatusKeys();

	// Run these every time to ensure new Fixed Messages are added
	createFixedMessages();

    // Run these every time to ensure new items on the System Overview page are added
    SystemOverview:fCreateMenuItems_RunOnce();

    // Run these only once to avoid any duplication
    PatternType[] pts = PatternType:all();
    if (pts.length()==0){
        createValidFirstLetters();
        createChannelKeyTable();
        createEscalationKeys();
    	createLanguageKey();
    	createFirstPatternType();
    	createRoleKey();
    	createDisclaimerMessages();
        uCreateTestData:fCreateTestClientExec("LogUser", "27000000000");
    }

    // Perform unit test of status update configurations
    uCalculatePPEDetail:fInterpretPPEStatusExec_UnitTest();

    fCreateTestCounty();

    fCreateTestGroup();

}

/* ******************************************************************************************** */
/* ******************************************************************************************** */

void fCreateTestGroup(){

    if (UserGroupController:getGroupForGroupId("TG") != null){
        return null;
    }

    SubCounty subCounty = SubCountyController:getSubCountyForName("TestSubCounty");

    ClientGroup testGroup = ClientGroup:new();
    testGroup.idd = "TG";
    testGroup.name = "Test Group";
    testGroup.geographyType = GEOGRAPHY.Rural;
    testGroup.subCounty = subCounty;
    testGroup.client_chews = UserController:getLogUserTestUser();
    testGroup.save();

}

/* ******************************************************************************************** */
/* ******************************************************************************************** */

void fCreateTestCounty(){

    if (CountyController:getCountyForName("TestCounty") != null){
        return;
    }

    County testCounty = County:new();
    testCounty.countyName = "TestCounty";
    testCounty.save();

    SubCounty testSubCounty = SubCounty:new();
    testSubCounty.subCountyName = "TestSubCounty";
    testSubCounty.county = testCounty;
    testSubCounty.save();
}

/* ******************************************************************************************** */
/* ******************************************************************************************** */


void fCreateConfigTable(){
    fCreateConfigTableExec(1, "1", "FilterSearch");
    fCreateConfigTableExec(1, "1", "DelaySMS");
    fCreateConfigTableExec(1, "1", "PPE");
    fCreateConfigTableExec(0, "0", "DoNotSendSMS");
    fCreateConfigTableExec(0,"0", "StoponStop");
    fCreateConfigTableExec(0,"0", "SendProgressOnRemind");    
    fCreateConfigTableExec(1,"1", "SendExpiryNotice");
    fCreateConfigTableExec(3,"3", "DefaultTopicEscalation");
    fCreateConfigTableExec(7,"7", "DefaultTopicExtension");
    fCreateConfigTableExec(1,"1", "DefaultDaysAfterExpiry");

    fCreateConfigTableExec(1,"1", "DefaultScore");
    fCreateConfigTableExec(100,"100", "DefaultScorePracticum");
    fCreateConfigTableExec(2,"2", "MaxFails");
    fCreateConfigTableExec(0, "0", "PPEOnTrack");
    fCreateConfigTableExec(80, "80", "PPEPassRate");
    fCreateConfigTableExec(30,"30", "QuizWeight");
    fCreateConfigTableExec(30,"30", "ChatWeight");
    fCreateConfigTableExec(40,"40", "PracticumWeight");
    fCreateConfigTableExec(40,"40", "DefaultTypeSearchMainMenu");
    fCreateConfigTableExec(40,"40", "DefaultTypeSearchJumpTo");
    
    fCreateConfigTableExec(-900,"-900", "PendingActivityDelay");
    fCreateConfigTableExec(10, "10", "MaxChatCount");
    
    fCreateConfigTableExec(7,"07:00:00", "Morning");
    fCreateConfigTableExec(12,"12:00:00", "Afternoon");
    fCreateConfigTableExec(19,"19:00:00", "Evening");
	fCreateConfigTableExec(7,"07:00:00", "DefaultStartTime");
    fCreateConfigTableExec(1,"1", "DefaultTimeIgnore");
    fCreateConfigTableExec(0,"0", "DefaultRescheduleForce");

    fCreateConfigTableExec(0,"U;T;S;A", "RepeatReminders");  
  	fCreateConfigTableExec(0,"abcdefghijklmnopqrstuvwxyz123456789* ;", "FirstCharRemove");
    fCreateConfigTableExec(0,"APP URL, Registration URL, CHEW name, Mobile Number", "CHEWConfirmationMessage");

    fCreateConfigTableExec(0, "http://amref-ivr.mezzanineware.com/amref/amref-ivr", "AmrefIvrUrl");
	fCreateConfigTableExec(0, "http://amref-ivr-test.mezzanineware.com/amref/amref-ivr", "AmrefIvrTestUrl");

    fCreateConfigTableExec(1, "1", "UseCleverSkipLogic");
    fCreateConfigTableExec(0, "0", "isLiveEnvironment");
    fCreateConfigTableExec(0, "0", "CanDeletePerformance");
    fCreateConfigTableExec(0, "0", "StopScheduling");
    fCreateConfigTableExec(1, "1", "MaxUsersUpdateGroupUmbrellaPPE");
    fCreateConfigTableExec(1, "1", "RescheduleGroupEscalationsFromTopicScheduling");
    fCreateConfigTableExec(10, "10", "TopicNameInitialCharacters");
    fCreateConfigTableExec(0, "HELP", "ApplicationName");

    fCreateConfigTableExec(3600, "3600", "DowntimeMessageThreshold");

}

/* ******************************************************************************************** */
/* ******************************************************************************************** */

void fCreateStatusKeys() {

    fCreateStatusKeyExec(0, "0", "No longer available for scheduled start");

    fCreateStatusKeyExec(1, "1", "Active");
    fCreateStatusKeyExec(2, "2", "Available for scheduled start");
    fCreateStatusKeyExec(3, "3", "Available for searching");

    fCreateStatusKeyExec(9, "9", "InProgress-Late");    

    fCreateStatusKeyExec(10, "10", "Schedule Jump To at the back of the queue, but do not interrupt current Sub-Topic");
    fCreateStatusKeyExec(11, "11", "Schedule Jump To at the back of the queue, and reschedule (without interrupting) current Sub-Topic thereafter");
    fCreateStatusKeyExec(12, "12", "Schedule Jump To with priority, but do not interrupt current Sub-Topic");
    fCreateStatusKeyExec(13, "13", "Schedule Jump To with priority, and reschedule (without interrupting) current Sub-Topic at the back of the queue");
    fCreateStatusKeyExec(14, "14", "Schedule Jump To with priority, and reschedule (without interrupting) current Sub-Topic directly after with priority");
    fCreateStatusKeyExec(15, "15", "Schedule Jump To with priority, and reschedule (without interrupting) current Sub-Topic after all other priority Sub-Topics");   

    fCreateStatusKeyExec(20, "20", "Paused");
	fCreateStatusKeyExec(21, "21", "Paused - Scheduled but not started");

    fCreateStatusKeyExec(31, "31", "Incorrect-Redo");
    fCreateStatusKeyExec(32, "32", "Incorrect-InformCorrect");
    fCreateStatusKeyExec(33, "33", "Incorrect-Next");
    fCreateStatusKeyExec(39, "39", "Completed-FailedQuiz");

    fCreateStatusKeyExec(40, "40", "Searching-NoScoring");

    fCreateStatusKeyExec(82, "82", "Sub-Topic Ended by Jump To - Then Search");
    fCreateStatusKeyExec(83, "83", "Topic Ended by Jump To - Then Search");
    fCreateStatusKeyExec(84, "84", "Sub-Topic Ended by Jump To");
    fCreateStatusKeyExec(85, "85", "Topic Ended by Jump To");
    fCreateStatusKeyExec(86, "86", "Accessed through Search and ended with Progress");

    fCreateStatusKeyExec(88, "88", "Scheduled Force End Topic");
    fCreateStatusKeyExec(89, "89", "Manual Force End Topic");

    fCreateStatusKeyExec(92, "92", "Completed-NoValidation");
    fCreateStatusKeyExec(98, "98", "Completed-IVR");

    fCreateStatusKeyExec(97, "97", "Completed-Late");
    fCreateStatusKeyExec(99, "99", "Completed-OnTime");

    fCreateStatusKeyExec(100, "100", "Completed-Validated-Correct");
}

/* ******************************************************************************************** */
/* ******************************************************************************************** */

void createFixedMessages () {
    
    createFixedMessagesExec(1,"1","Message was not understood. Please try again. Expecting answer to start with : ");
    createFixedMessagesExec(1,"2","Not valid option. Please try again. Expecting 1 - ");
    createFixedMessagesExec(1,"3","Your response is incorrect. Please try again.");
    createFixedMessagesExec(1,"4","This topic is no longer available : ");
    createFixedMessagesExec(1,"5","Incorrect.");
    createFixedMessagesExec(1,"6","Correct.");
    createFixedMessagesExec(1,"7","You do not have any current activities. Please contact your CHEW.");
    createFixedMessagesExec(1,"8","Reply with validfirstletter and your answer.");
    createFixedMessagesExec(1,"9","CHV clientname has not yet completed topic topicname.");
    createFixedMessagesExec(1,"10","CHV nickname not found. Please try again.");
    createFixedMessagesExec(1,"11","Your CHEW could not be found. Please try again.");
    createFixedMessagesExec(1,"12","You have reached your maximum chat allowance. Please try again tomorrow.");
    createFixedMessagesExec(1,"13","Your group message did not have any recipients. Please try again later.");
    createFixedMessagesExec(1,"14","Your SMS message was not understood. Please try again later.");
    
    createFixedMessagesExec(1,"15","Your % completion:;Your % quiz score:;CHVs that are not on track:;notused...Performance Fails;notused...Progress Stars;notused...Performance Stars;here is your performance report for;Progress update:;CHVs In Progress:;CHVs Behind Schedule:;CHVs Complete:;notused...Fail;The average quiz score % is:;Well done to this week's top performer:;None;");
    
    createFixedMessagesExec(1,"20", "You have completed your search Topic, and will now return to the Topic of the week.");

    createFixedMessagesExec(1,"vJumpTo", "For 'Search' Use Type '40' : Pause current Sub-Topic and jump to destination as a 'Search' | For 'Quiz' Use Type '15' : Schedule Jump To with priority, and reschedule current Sub-Topic after all other priority Sub-Topics | For 'Forced Jump' Use Type '85' : End current Topic and jump to destination immediately (83=Jump with Search) | Other available Types are '10' : Schedule Jump To at the back of the queue, but do not interrupt current Sub-Topic | '11' : Schedule Jump To at the back of the queue, and reschedule (without interrupting) current Sub-Topic thereafter | '12' : Schedule Jump To with priority, but do not interrupt current Sub-Topic | '13' : Schedule Jump To with priority, and reschedule (without interrupting) current Sub-Topic at the back of the queue | '14' : Schedule Jump To with priority, and reschedule (without interrupting) current Sub-Topic directly after with priority | '84' : End current Sub-Topic and jump to destination immediately (82 = Jump with Search) ");

    createFixedMessagesExec(1,"Pass", "Congratulations! You have passed the quiz on topicname. Your score is userscore%.");
    createFixedMessagesExec(1,"Fail1", "Sorry, you have not passed the quiz. You have one more chance to repeat the quiz. You have to score passrate% and above to pass the quiz. The quiz will now restart.");
    createFixedMessagesExec(1,"Fail2", "Sorry, you have failed the quiz. You will be directed to the next activity. You can repeat this quiz only after finishing all topics assigned to you.");

    createFixedMessagesExec(1,"NoSearchAvailable", "Sorry, the Topic you have Searched for is not available before you have been scheduled for it. Please contact your CHEW for assistance.");

    createFixedMessagesExec(1,"PerformanceSMS", "Thank you for completing topic topicname. Your total score is totalscore/100. You scored quizscore/30 on Quiz, practicumscore/40 on Practicum & chatscore/30 points for group chat participation.");
    createFixedMessagesExec(1,"PerformanceSMSSentImmediately", "Thank you for completing topic topicname. Your total score is totalscore/100. You scored quizscore/30 on Quiz, practicumscore/40 on Practicum & chatscore/30 points for group chat participation.");
    createFixedMessagesExec(1,"TopPerformersReport", "Congratulations to the top performers for topicname: rank1 name1 surname1 nickname1, rank2 name2 surname2 nickname2, rank3 name3 surname3 nickname3.");

    createFixedMessagesExec(1,"ProgressSMS", "Your progress on topicname is progresspercentage%.");

    /* Added by JV on 9 April 2015 */
    createFixedMessagesExec(1,"PracticumscoreSMS", "Thank you for completing the practicum. Your total score is practicumpercentage%.");
    createFixedMessagesExec(1,"QuizNotPassed", "Thank you for completing all activities within the topic. You have not passed the quiz. Your status is incomplete for this topic. Call the Help Desk 0800 720 270 to schedule the quiz again.");
    createFixedMessagesExec(1,"TopicExpiry", "topicname topic has expired for you. Call the Help Desk 0800 720 270 to schedule the topic. You will be automatically moved to the next topic.");
    createFixedMessagesExec(1,"DefaultTopicReminder", "You have 1 day left to finish this topic. Remember you need to complete this on time for a chance to be a top performer! SMS Progress to 21899 to proceed.");
    createFixedMessagesExec(2,"DefaultTopicReminder", "Una siku moja tu kuimaliza mada, usisahau kukamilisha shuguli zote kabla ya muda huo kuisha! Tuma ujumbe 'kuendelea' kwa nambari 21899 ili kujua yafuatayo");
    createFixedMessagesExec(1,"TopicManuallyEnded", "topicname topic is no longer available. Please contact the Help Desk for more information.");
    createFixedMessagesExec(1,"LaggardSMS", "Laggards for groupname for topicname : ");
     /* ************************* */

}

/* ******************************************************************************************** */
/* ******************************************************************************************** */
/* ******************************************************************************************** */
/* ******************************************************************************************** */

string[] getUpperOrderCollection() {
    string[] questionOrderUpper = getUpperOrderCollection_RO();
	return questionOrderUpper;
}

/* ******************************************************************************************** */
/* ******************************************************************************************** */

// create ValidFirstLetter_Setup_Table
void createValidFirstLetters() {
    
	ValidFirstLetterObject validFirstLetterObject = ValidFirstLetterObject:new();
	string [] letters = getUpperOrderCollection();
	
	for(int i= 0 ; i<letters.length(); i++) {
		validFirstLetterObject.ValidFirstLetterID = i+1; 
		validFirstLetterObject.validFirstLetter = letters.get(i);
		validFirstLetterObject.save();
		validFirstLetterObject = ValidFirstLetterObject:new();
	}
	
}

/* ******************************************************************************************** */
/* ******************************************************************************************** */

void createLanguageKey() {
    
    LanguageKeyObject languageKeyObject;

    languageKeyObject = LanguageKeyObject:new();
	languageKeyObject.languageID = 1;
	languageKeyObject.language = "English";
	languageKeyObject.save();
	
	languageKeyObject = LanguageKeyObject:new();
	languageKeyObject.languageID = 2;
	languageKeyObject.language = "Swahili";
	languageKeyObject.save();
}

/* ******************************************************************************************** */
/* ******************************************************************************************** */

void createRoleKey(){

	RoleKeyObject roleKeyObject;

	roleKeyObject = RoleKeyObject:new();
	roleKeyObject.roleID = 1;
	roleKeyObject.roleName = "CHV";
	roleKeyObject.save();

	roleKeyObject = RoleKeyObject:new();
	roleKeyObject.roleID = 2;
	roleKeyObject.roleName = "CHEW";
	roleKeyObject.save();

}

/* ******************************************************************************************** */
/* ******************************************************************************************** */

void createChannelKeyTable() {
    
    ChannelKeyObject channelKeyObject;
    
	channelKeyObject = ChannelKeyObject:new();
	channelKeyObject.patternChannelID = 1;
	channelKeyObject.patternChannelDescription = "SMS";
	channelKeyObject.save();

	channelKeyObject = ChannelKeyObject:new();
	channelKeyObject.patternChannelID = 3;
	channelKeyObject.patternChannelDescription = "IVR";
	channelKeyObject.save();
}

/* ******************************************************************************************** */
/* ******************************************************************************************** */

void createFixedMessagesExec(int lid, string fid, string fmt){
    FixMessage[] fms = FixMessage:and(equals(languageID, lid),equals(fixedMessageID, fid));
    if(fms.length() == 0){
        FixMessage fM = FixMessage:new();    
        fM.languageID = lid;
        fM.fixedMessageID = fid;
		fM.fixedMessageText = fmt;
		fM.save();
    }
    
}
/* ******************************************************************************************** */
/* ******************************************************************************************** */

void createDisclaimerMessagesExec(int lid, int typeID,string dmtt, string dmt){
    DisclaimerMessage[] dms = DisclaimerMessage:and(equals(languageID, lid),equals(typeID, typeID));
    if(dms.length() == 0){
        DisclaimerMessage dM = DisclaimerMessage:new();    
        dM.languageID = lid;
        dM.typeID = typeID;
        dM.disclaimerMessageType = dmtt;
		dM.disclaimerMessageText = dmt;
		dM.save();
    }
    
}

void createDisclaimerMessages () {
	createDisclaimerMessagesExec(1,1,"Do you consent to participate in the campaign", "Terms and conditions ");
}

/* ******************************************************************************************** */
/* ******************************************************************************************** */

void fCreateStatusKeyExec(int i, string s, string d){
    StatusKeyObject[] sos = StatusKeyObject:equals(statusID, i); StatusKeyObject so;
    if(sos.length()==0){
        so = StatusKeyObject:new();
        so.statusID = i;
        so.statusString = s;
        so.statusDescription = d;
        so.save();
    }
}

/* ******************************************************************************************** */
/* ******************************************************************************************** */

//Config Table
void fCreateConfigTableExec(int i, string s, string sd){
    ConfigTable[] cts = ConfigTable:equals(sConfigDescription, sd);
    ConfigTable ct;
    
    if(cts.length()==0){
        ct = ConfigTable:new();
        ct.iConfigValue = i;
    	ct.sConfigValue = s;
    	ct.sConfigDescription = sd;
    	ct.save();
    }
}

/* ***************************** */
/* ***************************** */

void fCreateConfigTableForLog(string s){
	int i;
	ConfigTable[] cts = ConfigTable:all(); cts.sortAsc("iConfigValue");
	ConfigTable ct = cts.get(0); i = (ct.iConfigValue - 1);

	datetime dt = Mez:now(); s = String:concat(s, " (", dt, ")");

    ConfigTable ct2 = ConfigTable:new();
    ct2.iConfigValue = i;
   	ct2.sConfigValue = "testlogging";
    ct2.sConfigDescription = s;
    ct2.save();

}

/* ********************************************************* */
/* ********************************************************* */

string[] getUpperOrderCollection_RO() {

    string[] questionOrderUpper;

	questionOrderUpper.append("A");
	questionOrderUpper.append("B");
	questionOrderUpper.append("C");
	questionOrderUpper.append("D");
	questionOrderUpper.append("E");
	questionOrderUpper.append("F");
	questionOrderUpper.append("G");
	questionOrderUpper.append("H");
	questionOrderUpper.append("I");
	questionOrderUpper.append("J");
	questionOrderUpper.append("K");
	questionOrderUpper.append("L");
	questionOrderUpper.append("M");
	questionOrderUpper.append("N");
	questionOrderUpper.append("O");
	questionOrderUpper.append("P");
	questionOrderUpper.append("Q");
	questionOrderUpper.append("R");
	questionOrderUpper.append("S");
	questionOrderUpper.append("T");
	questionOrderUpper.append("U");
	questionOrderUpper.append("V");
	questionOrderUpper.append("W");
	questionOrderUpper.append("X");
	questionOrderUpper.append("Y");
	questionOrderUpper.append("Z");

	return questionOrderUpper;
	
}

/* ********************************************************* */
/* ********************************************************* */

void createEscalationKeys() {
    
    EscalationKeyObject escalationKeyObject;
    
    escalationKeyObject = EscalationKeyObject:new();
	escalationKeyObject.escalationID = 1;
	escalationKeyObject.escalationDescription = "None";
	escalationKeyObject.save();
	
	escalationKeyObject = EscalationKeyObject:new();
	escalationKeyObject.escalationID = 2;
	escalationKeyObject.escalationDescription = "Reminded";
	escalationKeyObject.save();
	
	escalationKeyObject = EscalationKeyObject:new();
	escalationKeyObject.escalationID = 3;
	escalationKeyObject.escalationDescription = "Escalated";
	escalationKeyObject.save();
	
}

/* ********************************************************* */
/* ********************************************************* */

//create the first set of pattern type
void createFirstPatternType() {
    
    PatternType patternType;
    
	 patternType = PatternType:new();
	 patternType.patternTypeID = "1";
	 patternType.MOMultiple = 0;
	 patternType.RespValMCR = 0;
	 patternType.RespValQO = 0;
	 patternType.RespValASV = 0;
	 patternType.infoRedo = 0;
	 patternType.informNext = 0;
	 patternType.StopPatternOnCorrect = 0;
	 patternType.RandomPattern = 0;
	 patternType.save();

	 patternType = PatternType:new();
	 patternType.patternTypeID = "2";
	 patternType.MOMultiple = 1;
	 patternType.RespValMCR = 1;
	 patternType.RespValQO = 0;
	 patternType.RespValASV = 0;
	 patternType.infoRedo = 0;
	 patternType.informNext = 0;
	 patternType.StopPatternOnCorrect = 0;
	 patternType.RandomPattern = 0;
	 patternType.save();
	 
	 patternType = PatternType:new();
	 patternType.patternTypeID = "3";
	 patternType.MOMultiple = 1;
	 patternType.RespValMCR = 0;
	 patternType.RespValQO = 1;
	 patternType.RespValASV = 1;
	 patternType.infoRedo = 1;
	 patternType.informNext = 0;
	 patternType.StopPatternOnCorrect = 0;
	 patternType.RandomPattern = 0;
	 patternType.save();
	 
	 patternType = PatternType:new();
	 patternType.patternTypeID = "4";
	 patternType.MOMultiple = 1;
	 patternType.RespValMCR = 0;
	 patternType.RespValQO = 0;
	 patternType.RespValASV = 0;
	 patternType.infoRedo = 0;
	 patternType.informNext = 0;
	 patternType.StopPatternOnCorrect = 0;
	 patternType.RandomPattern = 0;
	 patternType.save();
	 
	 patternType = PatternType:new();
	 patternType.patternTypeID = "5";
	 patternType.MOMultiple = 1;
	 patternType.RespValMCR = 1;
	 patternType.RespValQO = 0;
	 patternType.RespValASV = 1;
	 patternType.infoRedo = 0;
	 patternType.informNext = 1;
	 patternType.StopPatternOnCorrect = 0;
	 patternType.RandomPattern = 0;
	 patternType.save();
	 
	 patternType = PatternType:new();
	 patternType.patternTypeID = "6";
	 patternType.MOMultiple = 1;
	 patternType.RespValMCR = 0;
	 patternType.RespValQO = 1;
	 patternType.RespValASV = 1;
	 patternType.infoRedo = 0;
	 patternType.informNext = 0;
	 patternType.StopPatternOnCorrect = 0;
	 patternType.RandomPattern = 0;
	 patternType.save();
	 
	patternType = PatternType:new();
	 patternType.patternTypeID = "7";
	 patternType.MOMultiple = 1;
	 patternType.RespValMCR = 1;
	 patternType.RespValQO = 1;
	 patternType.RespValASV = 1;
	 patternType.infoRedo = 1;
	 patternType.informNext = 0;
	 patternType.StopPatternOnCorrect = 0;
	 patternType.RandomPattern = 0;
	 patternType.save();
	 
	 patternType = PatternType:new();
	 patternType.patternTypeID = "8";
	 patternType.MOMultiple = 1;
	 patternType.RespValMCR = 1;
	 patternType.RespValQO = 1;
	 patternType.RespValASV = 1;
	 patternType.infoRedo = 0;
	 patternType.informNext = 1;
	 patternType.StopPatternOnCorrect = 0;
	 patternType.RandomPattern = 0;
	 patternType.save();
	 
	 patternType = PatternType:new();
	 patternType.patternTypeID = "9";
	 patternType.MOMultiple = 1;
	 patternType.RespValMCR = 0;
	 patternType.RespValQO = 1;
	 patternType.RespValASV = 1;
	 patternType.infoRedo = 0;
	 patternType.informNext = 0;
	 patternType.StopPatternOnCorrect = 1;
	 patternType.RandomPattern = 0;
	 patternType.save();
	 
	 patternType = PatternType:new();
	 patternType.patternTypeID = "10";
	 patternType.MOMultiple = 1;
	 patternType.RespValMCR = 1;
	 patternType.RespValQO = 0;
	 patternType.RespValASV = 1;
	 patternType.infoRedo = 0;
	 patternType.informNext = 1;
	 patternType.StopPatternOnCorrect = 0;
	 patternType.RandomPattern = 1;
	 patternType.save();

	 patternType = PatternType:new();
	 patternType.patternTypeID = "11";
	 patternType.MOMultiple = 1;
	 patternType.RespValMCR = 1;
	 patternType.RespValQO = 0;
	 patternType.RespValASV = 1;
	 patternType.infoRedo = 0;
	 patternType.informNext = 0;
	 patternType.StopPatternOnCorrect = 0;
	 patternType.RandomPattern = 0;
	 patternType.save();

		PatternType pt;

		 pt = PatternType:new();
		 pt.patternTypeID = "SurveyOpen";
		 pt.MOMultiple = 1;
		 pt.RespValMCR = 1;
		 pt.RespValQO = 0;
		 pt.RespValASV = 0;
		 pt.infoRedo = 0;
		 pt.informNext = 0;
		 pt.StopPatternOnCorrect = 0;
		 pt.RandomPattern = 0;
		 pt.save();

		 pt = PatternType:new();
		 pt.patternTypeID = "SurveySkip";
		 pt.MOMultiple = 1;
		 pt.RespValMCR = 1;
		 pt.RespValQO = 0;
		 pt.RespValASV = 1;
		 pt.infoRedo = 0;
		 pt.informNext = 0;
		 pt.StopPatternOnCorrect = 0;
		 pt.RandomPattern = 0;
		 pt.save();

}

}