unit uPPESummary;

ClientGroup sClientGroup;
Topic sTopic;
int ot; int pr; int bestscore; datetime bestdate;

/* ****************************************************************************************** */
/* ****************************************************************************************** */

void init(){
    return null;
}

void initgroup(){
    if(sTopic == null) {
        Topic[] ts = Topic:all(); 
        if(ts.length()>0){
            ts.sortAsc("topicID"); sTopic = ts.get(0);
        }
    }
    if(sClientGroup == null){
        ClientGroup[] cgs = ClientGroup:all(); 
        if(cgs.length()>0){
            cgs.sortAsc("name"); sClientGroup = cgs.get(0);
        }
    }
    if(sClientGroup != null){
        fFilterForGroup();
    }
}

TopicPPE[] fgetAllTopicPPEs() {
    return TopicPPE:all();
}

SequencePPE[] fgetAllSequencePPEs() {
    return SequencePPE:all();
}

PatternPPE[] fgetAllPatternPPEs() {
    PatternPPE[] pppes = PatternPPE:all();
    return pppes;
}

void fFilterForGroup(){
    return null;
}

/* ****************************************************************************************** */
/* ****************************************************************************************** */

void fSendGroupMessagesCHEW(){
    fMessageSendTrigger(3);
    fMessageSendTrigger(7);
}

void fSendGroupMessagesTop(){
    fMessageSendTrigger(8);
}

void fSendGroupMessagesCHV(){
    fMessageSendTrigger(9);
}

/* ****************************************************************************************** */
/* ****************************************************************************************** */

void fMessageSendTrigger(int id){
    /* PPEFIX - JV removed this section to avoid any potential wrongful information being circulated - 1 April 2015 */
    /*
    ConfigTable[] cts; ConfigTable ct; ClientGroup cg = sClientGroup; Topic t = sTopic; 
    Client cL = BLUnits:fGetLogClient();
    if(cg!=null && t!=null){
        if(id==9){
            cts = fAddCHVMessages(cts, cg, t, id, 1);
        } else {
            ct = fGetGroupMessageByID(cg, cL, t, id, 1);
        }
    }
    */
    return null;
}

/* ****************************************************************************************** */
/* ****************************************************************************************** */

Client fGetLanguageClient(Topic t){
    int l = TopicList:fGuessTopicLanguageID(t);
    Client nC = Client:new();
    nC.client_LanguageKey = LanguageKeyController:getLanguageKeyByIDNotNull(l);
    return nC;
}

/* ****************************************************************************************** */
/* ****************************************************************************************** */

ConfigTable[] fGetGroupMessages(){
    ConfigTable[] cts; ConfigTable[] cts2; cts.clear(); cts2.clear();
    ConfigTable ct; ClientGroup cg = sClientGroup; Topic t = sTopic;
    
    Client cL = fGetLanguageClient(t);
    
    ct = fGetGroupMessageByID(cg, cL, t, 3, 0); if(ct!=null){cts.append(ct);}
    ct = fGetGroupMessageByID(cg, cL, t, 7, 0); if(ct!=null){cts.append(ct);}
    ct = fGetGroupMessageByID(cg, cL, t, 8, 0); if(ct!=null){cts.append(ct);}
    
    cts = fAddCHVMessages(cts, cg, t, 9, 0);

    return cts;
}

/* ****************************************************************************************** */
/* ****************************************************************************************** */

ConfigTable fGetGroupMessageByID(ClientGroup cg, Client cL, Topic t, int i, int dosend){
    ConfigTable ct = ConfigTable:new(); string sMessage = "";
    ct.iConfigValue = i;
    ct.sConfigDescription = fGetGroupMessageText(cg, cL, t, i);
    if(ct.sConfigDescription!=""){
        if(dosend==1){ sMessage = ct.sConfigDescription; }
        ct.sConfigValue = fGetGroupMessageRecipients(cg, cL, i, sMessage);
    }
    return ct;
}

/* ****************************************************************************************** */
/* ****************************************************************************************** */

void fSendActualMessageGroup(ClientGroup cg, string sMessage){

    Client[] chws = ClientGroupList:getAllClientsFromGroupIn(cg);
    Client chew = ClientGroupList:getClientGroupChew(cg);
    Client[] clients; Client chw;
    
    if(chws.length() > 0) {
        string s = String:concat("fSendActualMessageGroup: ", cg.name," : Forward update message to each CHW in and CHEW of GROUP....."); Mez:log(s);
        string resultingText = sMessage;
        
        for(int i= 0; i<chws.length(); i++) {
            chw = chws.get(i);
            if(chw != chew){
                clients.append(chw);
            }
        }
        
        if(chew != null){ clients.append(chew); }        
        if(clients.length()>0){ BLUnits:fSendDirect(clients, sMessage, "Report"); }    

    }
    
}

/* ****************************************************************************************** */
/* ****************************************************************************************** */

void fSendActualMessage(ClientGroup cg, Client c, string sMessage){
    
    if(sMessage!=""){
        if(c!=null){
            Client[] cs; cs.append(c);
            BLUnits:fSendDirect(cs, sMessage, "Report");
        } else {
            fSendActualMessageGroup(cg, sMessage);
        }
    }
    return null;
    
}

/* ****************************************************************************************** */
/* ****************************************************************************************** */

string fGetGroupMessageRecipients(ClientGroup cg, Client cL, int i, string sMessage){
  
   string s = ""; Client c = null;
   
    if(i<=7){ 
        
        c = ClientGroupList:getClientGroupChew(cg); s = "CHEW : ";
        if(sMessage!=""){ fSendActualMessage(cg, c, sMessage); }
        
    } else if (i==8){
        
        s = "All CHVs in and CHEW of Group"; 
        if(sMessage!=""){ fSendActualMessage(cg, c, sMessage); }
        return s;
        
    } else if (i==9){
        
        c = cL; s = "CHV : ";
        if(sMessage!=""){ fSendActualMessage(cg, c, sMessage); }
        
    }   
    
    if(c==null){
        s = String:concat(s, " not set");
    } else {
        s = String:concat(s, c.nickname, " ", c.mobileNumber);    
    }
    return s;
}

/* ****************************************************************************************** */
/* ****************************************************************************************** */

string fGetFixedMessageSplit(Client cL, int index, int code){
    string rS = ""; code = code - 1;
    string sT = FixMessageList:fMessageStringPerFixedMessages (cL, index);
    string[] ss = String:split(sT, ";");
    if(ss.length()>code){
        rS = ss.get(code);
    }
    return rS;
}

/* ****************************************************************************************** */
/* ****************************************************************************************** */

    string fGetGroupMessageText(ClientGroup cg, Client cL, Topic t, int i){
        string s = "";
        if(i<=8){ s = fGetGroupMessage_TopicSummary(cg, cL, t, i);}
        return s;
    }

    /* ****************************************************************************************** */
    /* ****************************************************************************************** */

    TopicPPE[] fSortTopicPPE(TopicPPE[] tppes, int i){
        if(i==1||i==3){ tppes.sortDesc("progress"); }
        if(i==5){ tppes.sortAsc("progress"); }
        if(i==2||i==4){ tppes.sortDesc("performance"); }
        if(i==6){ tppes.sortAsc("performance"); }
        return tppes;
    }

    /* ****************************************************************************************** */
    /* ****************************************************************************************** */

    int fGetGroupSumVal(TopicPPE tppe, int i){
        int r = 0;
            if(i==1||i==3||i==5){r = tppe.progress;}
            if(i==2||i==4||i==6){r = tppe.performance;}
        return r;
    }
    
    /* ****************************************************************************************** */
    /* ****************************************************************************************** */

    string rrS(Client cL, int i1){
        if(i1==0){ return ""; }
        string s = ""; s = fGetFixedMessageSplit(cL, 15, i1); return s;
    }

    /* ****************************************************************************************** */
    /* ****************************************************************************************** */

    int rrStartString(int id){
        int idgetstartstring = id; 
        if(id==8){ idgetstartstring = 14; }
        if(id==7){ idgetstartstring = 0; }
        return idgetstartstring;
    }
    
    /* ****************************************************************************************** */
    /* ****************************************************************************************** */
    
    int rrI(int i){
        if((i==1)||(i==3)||(i==5)){
            if(ot==0||ot==null) { ot = uCalculatePPE:fGetConfigSetting("PPEOnTrack"); } 
            return ot;
        }
        if((i==2)||(i==4)||(i==6)){
            if(pr==0||pr==null) { pr = uCalculatePPE:fGetConfigSetting("PPEPassRate"); }
            return pr;
        }
        return 0;
    }

/* ****************************************************************************************** */
/* ****************************************************************************************** */

string fGetSummarybyID(Client cL, int id, int maxt, int sumvalprog, int sumvalpass, int sumvalperf, int sumvalcomplete){
    string s2 = ""; int maxP = 100; int sumvalbusy = (sumvalprog-sumvalcomplete);
    sumvalperf = uCalculatePPESub:fReturnPer((maxt*maxP), sumvalperf);
    s2 = String:concat(rrS(cL,8), " ", maxt, " ");
    s2 = String:concat(s2, rrS(cL,11), " ", sumvalcomplete, " ");
    s2 = String:concat(s2, rrS(cL,9), " ", sumvalbusy, " ");
    s2 = String:concat(s2, rrS(cL,10), " ", (maxt-sumvalprog), " ");
    s2 = String:concat(s2, rrS(cL,13), " ", sumvalperf, "");
    return s2;
}

/* ****************************************************************************************** */
/* ****************************************************************************************** */

ConfigTable[] fAddCHVMessages(ConfigTable[] cts, ClientGroup cg, Topic t, int id, int dosend){
    TopicPPE[] tppes = fGetAllTopicPPEsGroup(cg, t); int maxt = tppes.length(); TopicPPE tppe; Client c; ConfigTable ct;
    string ssend = "";
    for(int i = 0; i<maxt; i++){
        ConfigTable ct = ConfigTable:new();
        tppe = tppes.get(i); c = tppe.client_topicPPE;
        ct.iConfigValue = id;
        ct.sConfigDescription = fGetGroupMessageTextCHV(tppe);
        if(dosend==1){ ssend = ct.sConfigDescription; }
        ct.sConfigValue = fGetGroupMessageRecipients(cg, c, id, ssend);
        cts.append(ct);
    }
    return cts;
}

/* ****************************************************************************************** */
/* ****************************************************************************************** */

 string fGetGroupMessageTextCHV(TopicPPE tppe){
        
        //Summary TopicName Progress (data) Performance (data)
        
        Topic t = tppe.topic_topicPPE; Client cL = tppe.client_topicPPE;
        string s = String:concat(cL.nickname, " ", rrS(cL, 7), " ", t.topicName," ");
        s = String:concat(s, rrS(cL,1), " ", tppe.progress, " ");
        s = String:concat(s, rrS(cL,2), " ", tppe.performance, ".");
        return s;
 }

/* ****************************************************************************************** */
/* ****************************************************************************************** */

string fGetBestScore(TopicPPE tppe, string s){
    Topic t = tppe.topic_topicPPE; Client c = tppe.client_topicPPE; TopicHistory th; datetime dt;
    
    if(tppe.progress==100){
        if(tppe.score>=bestscore){
            th = TopicList:getLastTopicHistoryPPE(c, t);
            if(th!=null){
                dt = th.actualEndDate; if(dt==null){ dt = Date:addMonths(Mez:now(),1201); }
                if(tppe.score>bestscore || dt<bestdate){
                    bestscore = tppe.score; bestdate = dt;
                    s = String:concat(c.firstName, " ", c.surname, " (", c.nickname, ")");
                }
            }
        }
    }
    return s;
}
 
/* ****************************************************************************************** */
/* ************************************ START THE ENGINE ************************************ */
/* ****************************************************************************************** */

    /*  ct.iConfigValue = i;
        ct.sConfigValue = fGetGroupMessageRecipients(cg, i);
        ct.sConfigDescription = fGetGroupMessageText(cg, cL, t, i); */

string fGetGroupMessage_TopicSummary(ClientGroup cg, Client cL, Topic t, int id){
    int sumval = 0; int sumvalprog = 0; int sumvalperf = 0; int sumvalpass = 0; int sumvalcomplete = 0;
    string s = ""; int i; string s2 = ""; string getbest = "";  string sNoresults = rrS(cL, 15);
    TopicPPE tppe; Client c; bestdate = Date:addMonths(Mez:now(),1200); bestscore = 0;
        
    TopicPPE[] tppes = fGetAllTopicPPEsGroup(cg, t); 
    int maxt = tppes.length();
    
    if(maxt>0){
        tppes = fSortTopicPPE(tppes, id);
        tppe = tppes.get(0); t = tppe.topic_topicPPE;
        s = String:concat(cg.name, " ", t.topicName," ", rrS(cL, rrStartString(id)), " ");
        
            /* ****************************************************************************************** */
            /* ****************************************************************************************** */
            for (i=0; i<maxt; i++){
                tppe = tppes.get(i); c = tppe.client_topicPPE;
                if(id<7){
                    sumval = fGetGroupSumVal(tppe, id);
                    if( 
                        (id==1) || (id==2) || ((sumval<rrI(id)) && (id==3||id==4)) || ((sumval>=rrI(id)) && (id==5||id==6))
                      ){
                        if(s2!=""){ s2 = String:concat(s2, ", ");}
                        s2 = String:concat(s2," ", c.nickname, " ", sumval, "");
                    }
                } else if(id==7) {
                    if(fGetGroupSumVal(tppe, 1)>=rrI(1)){ sumvalprog = sumvalprog + 1; }
                    if(fGetGroupSumVal(tppe, 2)>=rrI(2)){ sumvalpass = sumvalpass + 1; }
                    if(fGetGroupSumVal(tppe, 1)==100){ sumvalcomplete = sumvalcomplete + 1; }
                    sumvalperf = sumvalperf + fGetGroupSumVal(tppe, 2);
                } else if(id==8) {
                    getbest = fGetBestScore(tppe, getbest);
                }
            }
            /* ****************************************************************************************** */
            /* ****************************************************************************************** */
            
            if(id==7){
                s2 = fGetSummarybyID(cL, id, maxt, sumvalprog, sumvalpass, sumvalperf, sumvalcomplete);
            } else if(id==8){
                s2 = getbest;
            }
            
            /* ****************************************************************************************** */
            /* ****************************************************************************************** */
        
        if(String:length(s2)<3){ 
            s = String:concat(s, sNoresults, ".");
        } else {
            s = String:concat(s, s2, ".");
        }
    }
    return s;
}

/* ****************************************************************************************** */
/* ************************************* END THE ENGINE ************************************* */
/* ****************************************************************************************** */

TopicPPE[] fShowAllTopicPPEsGroup(){
    TopicPPE[] tR = fGetAllTopicPPEsGroup(sClientGroup, sTopic);
    if(tR.length()==0){
        tR = TopicPPE:all();
    }
    return tR;
}

SequencePPE[] fShowAllSequencePPEsGroup(){
    SequencePPE[] sR = fGetAllSequencePPEsGroup(sClientGroup);
    if(sR.length()==0){
        sR = SequencePPE:all();
    }
    return sR;
}

PatternPPE[] fShowAllPatternPPEsGroup(){
    PatternPPE[] pR = fGetAllPatternPPEsGroup(sClientGroup);
    if(pR.length()==0){
        pR = PatternPPE:all();
    }
    return pR;
}

/* ****************************************************************************************** */
/* ****************************************************************************************** */

TopicPPE[] fGetAllTopicPPEsGroup(ClientGroup cg, Topic t) {
    TopicPPE[] tppes_master; tppes_master.clear();
    TopicPPE[] tppes_add; TopicPPE tppe; int i2; int maxi2;

    if(cg != null) {
        Client[] cgs = fGetAllClientsFromGroup(cg); Client c; int maxc = cgs.length();
        for(int i = 0; i<maxc; i++){
            c = cgs.get(i);
            if(c.roleID==1){
                if(t == null)   { tppes_add = TopicPPE:relationshipIn(client_topicPPE, c); } else
                                { tppes_add = TopicPPE:and(relationshipIn(client_topicPPE, c),relationshipIn(topic_topicPPE, t)); } 
                maxi2 = tppes_add.length();
                for(i2 = 0; i2<maxi2; i2++){
                    tppe = tppes_add.get(i2);
                    tppes_master.append(tppe);
                }
            }
        }
        return tppes_master;
    }

    return null;
}

/* ****************************************************************************************** */
/* ****************************************************************************************** */

SequencePPE[] fGetAllSequencePPEsGroup(ClientGroup cg) {

    SequencePPE[] sppes_master; sppes_master.clear();
    SequencePPE[] sppes_add;
    SequencePPE sppe; int i2; int maxi2;

    if(cg != null) {
        Client[] cgs = fGetAllClientsFromGroup(cg); Client c; int maxc = cgs.length(); 
        for(int i = 0; i<maxc; i++){
            c = cgs.get(i);
            if(c.roleID==1){
                sppes_add = SequencePPE:relationshipIn(client_sequencePPE, c); maxi2 = sppes_add.length();
                for(i2 = 0; i2<maxi2; i2++){
                    sppe = sppes_add.get(i2);
                    sppes_master.append(sppe);
                }
            }
        }
        return sppes_master;
    } else {
        return null;
    }

}

/* ****************************************************************************************** */
/* ****************************************************************************************** */

PatternPPE[] fGetAllPatternPPEsGroup(ClientGroup cg) {

    PatternPPE[] pppes_master; pppes_master.clear();
    PatternPPE[] pppes_add;
    PatternPPE pppe; int i2; int maxi2;

    if(cg != null) {
        Client[] cgs = fGetAllClientsFromGroup(cg); Client c; int maxc = cgs.length(); 
        for(int i = 0; i<maxc; i++){
            c = cgs.get(i);
            if(c.roleID==1){
                pppes_add = PatternPPE:relationshipIn(client_patternPPE, c); maxi2 = pppes_add.length();
                for(i2 = 0; i2<maxi2; i2++){
                    pppe = pppes_add.get(i2);
                    pppes_master.append(pppe);
                }
            }
        }
        return pppes_master;
    } else {
        return null;
    }
    
}

/* ****************************************************************************************** */
/* ****************************************************************************************** */

Client[] fGetAllClientsFromGroup(ClientGroup cg) {
    return cg.client_chws;
}