unit UserActivityOutgoingSMS;

Client uClient;
bool bShowAll;
string vinfonote;
string vclientname;
string vcurrentactivity;

OutgoingSMSLog[] outgoingSmsArr;
UmbrellaPPE[] uPArr;
UmbrellaPPE uPdelete;

TopicPPE[] tPPEs;
SequencePPE[] sPPEs;
PatternPPE[] pPPEs;

void init(){
	bShowAll = false;
	fRefreshData();
}

/* **************************************************************************************************************** */
/* **************************************************************************************************************** */

string fGetvCurrentActivity(Client c){
	string s = "No Current Activity"; string s1 = ""; string s2 = "";

	Pattern p = uGetCurrentSchedule:fGetCurrentPattern(c); PatternHistory[] pHs; PatternHistory pH;

	if(p!=null){
		pHs = PatternHistory:relationshipIn(client_patternHistory,c);
		if(pHs.length()>0){
			pHs.sortDesc("startDate"); pH = pHs.get(0); s2 = pH.startDate; s2 = String:substring(s2,0,15);
			s1 = "SMS"; 

			int channelID = ActivityController:getActivityChannelKeyID(p);
			if(channelID == 3){ s1 = "IVR"; }
			s = String:concat(p.patternID, " (", s1,") ", s2);
		}
	}

	return s;
}

string fGetvClientName(Client c){
	string s = ""; string s1 = ""; string s2 = ""; string s3 = ""; string s4 = "";
	if(c!=null){
		if(c.firstName!=null){s1 = c.firstName;}
		if(c.surname!=null){s2 = c.surname;}
		if(c.mobileNumber!=null){s3 = c.mobileNumber;}
		if(c.nickname!=null){s4 = c.nickname;}	
	}
	s = String:concat(s1, " ", s2, " (", s4,") : ", s3);
	return s;
}

/* **************************************************************************************************************** */
/* **************************************************************************************************************** */

void fDeleteUserUmbrellaPPE(){
	
	int iEnd = BLUnits:fGetConfigSettingInt("CanDeletePerformance");
	if(iEnd==0){
		Mez:alert("user_activity.umbrellaPPE.alertnoconfig");	
	} else {
		UmbrellaPPE:delete(uPdelete);
		Mez:alert("user_activity.umbrellaPPE.confirmationdelete");
	}
	fRefreshData();
	return null;
	
}
 

void bShowAlloutgoingSMSLog(){
	if(bShowAll == true){ bShowAll = false; } else { bShowAll = true; } 
	fRefreshData();
}

void fRefreshData(){
	if(uClient==null){ return null; }
	
	vclientname = String:concat(uClient.firstName, " ", uClient.surname, " (", uClient.mobileNumber,") : ", uClient.nickname);
	vcurrentactivity = fGetvCurrentActivity(uClient);

	vinfonote = "The tables below are used to generate the user performance summary.";
	outgoingSmsArr = getOutgoingSMSs();
	uPArr = getUPs();
	tPPEs = fgetAllTopicPPEs();
	sPPEs = fgetAllSequencePPEs();
	pPPEs = fgetAllPatternPPEs();
}

/* **************************************************************************************************************** */

OutgoingSMSLog[] getOutgoingSMSs() {
	OutgoingSMSLog[] oSls; Topic t; Umbrella u;
	if(bShowAll==true){
    	oSls = OutgoingSMSLog:relationshipIn(client_outgoingSMSLog, uClient);
    } else {
    	t = uGetCurrentSchedule:fGetCurrentTopic(uClient);
    	u = uGetCurrentSchedule:fGetCurrentUmbrella(uClient);
    	oSls = OutgoingSMSLog:and(relationshipIn(client_outgoingSMSLog, uClient), relationshipIn(topic_outgoingSMSLog,t), relationshipIn(umbrella_outgoingSMSLog,u), notEquals(validFirstLetter,"0"));
    }
    return oSls;
}

/* **************************************************************************************************************** */

UmbrellaPPE[] getUPs() {
	UmbrellaPPE[] uPs; Umbrella u;
	if(bShowAll==true){
		uPs = UmbrellaPPE:relationshipIn(client_umbrellaPPE,uClient);
	} else {
		u = uGetCurrentSchedule:fGetCurrentUmbrella(uClient);
		uPs = UmbrellaPPE:and(relationshipIn(client_umbrellaPPE,uClient),relationshipIn(umbrella_umbrellaPPE,u));
	}
	return uPs;
}

/* **************************************************************************************************************** */

TopicHistoryLog[] fGetTopicHistoryLogFiltered(){

	/* PPEFIX */
	TopicHistoryLog[] thls; Topic t; Umbrella u;

	/* Get filtered collection */
	if(bShowAll==true){
		thls = TopicList:fGetCollectionTopicHistoryLog(uClient, null, null);
	} else {
		t = uGetCurrentSchedule:fGetCurrentTopic(uClient);
		u = uGetCurrentSchedule:fGetLastUmbrella(uClient, t);
		if(t!=null&&u!=null){
			thls = TopicList:fGetCollectionTopicHistoryLog(uClient, u, t);
		}
	}

	return thls; 

}

/* **************************************************************************************************************** */

TopicPPE[] fgetAllTopicPPEs() {
	TopicPPE[] tPs; Topic t; Client c = uClient; Umbrella u;
	if(bShowAll==true){
		tPs = uCalculatePPESub:fGetTopicPPECollections(c, null, null, 0);
	} else {
		t = uGetCurrentSchedule:fGetCurrentTopic(c);
		u = uGetCurrentSchedule:fGetLastUmbrella(c, t);
		if(t!=null&&u!=null){
			tPs = uCalculatePPESub:fGetTopicPPECollections(c, t, u, 0);
		}
	}
    return tPs;
}

/* **************************************************************************************************************** */

SequencePPE[] fgetAllSequencePPEs() {
	SequencePPE[] sPs; Sequence s;
	if(bShowAll==true){
		sPs = SequencePPE:relationshipIn(client_sequencePPE, uClient);
	} else {
		s = uGetCurrentSchedule:fGetCurrentSequence(uClient);
		sPs = SequencePPE:and(relationshipIn(client_sequencePPE, uClient),relationshipIn(sequence_sequencePPE,s));
	}
    return sPs;
}

/* **************************************************************************************************************** */

PatternPPE[] fgetAllPatternPPEs() {
	PatternPPE[] pPs; Pattern p;
	if(bShowAll==true){
		pPs = PatternPPE:relationshipIn(client_patternPPE, uClient);
	} else {
		p = uGetCurrentSchedule:fGetCurrentPattern(uClient);
		pPs = PatternPPE:and(relationshipIn(client_patternPPE, uClient),relationshipIn(pattern_patternPPE,p));
	}
    return pPs;
}

/* **************************************************************************************************************** */

string back(){
	UserActivity:uClient = uClient;
	return "nav_user_activity";
}