unit uPPESMSUnit;

/* **************************************************************************************** */
/* **************************************************************************************** */

void fSendUmbrellaPPEReportsOnEscalation(UmbrellaPPE[] uPs){

    int maxi = uPs.length(); int i = 0; UmbrellaPPE uP;

    for(i=0; i<maxi; i++){

        uP = uPs.get(i);
        fSendMessageOnEscalation(uP);

    }

}

/* **************************************************************************************** */
/* **************************************************************************************** */

void fSendMessageOnEscalation(UmbrellaPPE uP){

    bool bPassedUmbrella = UmbrellaPPEController:fPassedUmbrellaPPE(uP);

    // If progress=100, ie entire Topic has been completed
    if(uP.progress==100){

        // If status = Quiz Not Passed ... send out Quiz Not Passed message
        if(bPassedUmbrella==false){
            fSendPPESMS(uP, "QuizNotPassed");
        // Else send the Performance SMS
        } else {                
            fSendPPESMS(uP, "PerformanceSMS");                        
        }

    // Else send the Progress SMS
    } else {
        fSendPPESMS(uP, "ProgressSMS");
    }

    return null;
}

/* **************************************************************************************** */
/* **************************************************************************************** */

void fSendAllSubTopicsCompletedMessageRealTime(UmbrellaPPE uP){

    bool bPassedUmbrella = UmbrellaPPEController:fPassedUmbrellaPPE(uP);

    // If progress=100, ie entire Topic has been completed
    if(uP.progress==100){

        // If status = Quiz Not Passed ... send out Quiz Not Passed message
        if(bPassedUmbrella==false){
            uPPESMSUnit:fSendPPESMS(uP, "QuizNotPassed");
        }  
        // Only if status = late
        else if(uP.status==97){                
            uPPESMSUnit:fSendPPESMS(uP, "PerformanceSMSSentImmediately");                        
        }

    }

    return null;
}

/* **************************************************************************************** */
/* **************************************************************************************** */

void fDoEscalateDayIndivMessages(UmbrellaPPE[] uPs, ClientGroup cg){

    // Send Performance and/or Progress reports to all group members
    fSendUmbrellaPPEReportsOnEscalation(uPs);

    // Assign variables
    Client c; Client cCHEW; UmbrellaPPE uP; uPs.sortAsc("status"); int maxi = uPs.length();
    int i = 0; int icounter = 0; string sCHVs = ""; string sBase = ""; string sOut = ""; string s = "";

    // Do for loop to get Laggards
    for(i=0; i<maxi; i++){
        uP = uPs.get(i); c = uP.client_umbrellaPPE;
        if(uP.status<10){
            sCHVs = String:concat(sCHVs, s, c.nickname); s = ", ";
        } else {
            i = maxi;
        }
    }

    // If there are laggards, then create the message to send it
    if(sCHVs!=""){
        
        // Get client group CHEW from cg as passed in
        cCHEW = ClientGroupList:getClientGroupChew(cg);

        if(cCHEW!=null){

            // Get and sanitise base message
            sBase = FixMessageList:fMessageStringPerFixedMessages (cCHEW, "LaggardSMS");
            if(sBase!=""){
                sBase = fGetSanePPESMSText(uP, sBase);
                sOut = String:concat(sBase, sCHVs, ".");
            }

            // Send out message
            if(cCHEW!=null&&sOut!=""){
                BLUnits:SendSMSToClient(cCHEW, sOut); 

            }

        }

    }

    return null;

}

/* **************************************************************************************** */
/* **************************************************************************************** */

void fSendTopicEndedMessage (Client c, Umbrella u, string smskey){
    
    string mOut = FixMessageList:fMessageStringPerFixedMessages(c, smskey);
        
        if(mOut!=""){
            mOut = fGetSaneTopicSMSText(u, mOut);            
            BLUnits:SendSMSToClient(c, mOut); 
        }

    return null;

}

/* **************************************************************************************** */
/* **************************************************************************************** */

void fSendOverallTopPerformers(UmbrellaPPE[] uPs){

    int maxi = uPs.length(); int i = 0; int icounter = 0;
    UmbrellaPPE uP; uPs.sortDesc("totalscore"); string mOut = ""; Client c; Umbrella u;

    /* ******************************************** */

    string rank1=""; string name1=""; string surname1=""; string nickname1="";
    string rank2=""; string name2=""; string surname2=""; string nickname2="";
    string rank3=""; string name3=""; string surname3=""; string nickname3="";
    string topicname="";

    /* ******************************************** */

    for(i=0; i<maxi; i++){

        uP = uPs.get(i); c = uP.client_umbrellaPPE;
        if(uP.progress==100&&uP.status==99){
            if(icounter==0){
                rank1="1."; name1=c.firstName; surname1=c.surname; nickname1=c.nickname; icounter = icounter + 1;
            } else if(icounter==1){
                rank2="2."; name2=c.firstName; surname2=c.surname; nickname2=c.nickname; icounter = icounter + 1;
            } else if(icounter==2){
                rank3="3."; name3=c.firstName; surname3=c.surname; nickname3=c.nickname; icounter = icounter + 1;
            } else {
                i = maxi;
            }
        }

    }

    /* ******************************************** */

    for(i=0; i<maxi; i++){

        uP = uPs.get(i); c = uP.client_umbrellaPPE; u = uP.umbrella_umbrellaPPE; topicname = u.umbrellaName;

        mOut = FixMessageList:fMessageStringPerFixedMessages(c, "TopPerformersReport");

        if(mOut!=""){
	        mOut = BLUnits:fSS(mOut,"rank1", rank1); mOut = BLUnits:fSS(mOut,"surname1", surname1); mOut = BLUnits:fSS(mOut,"nickname1", nickname1); mOut = BLUnits:fSS(mOut,"name1", name1);
	        mOut = BLUnits:fSS(mOut,"rank2", rank2); mOut = BLUnits:fSS(mOut,"surname2", surname2); mOut = BLUnits:fSS(mOut,"nickname2", nickname2); mOut = BLUnits:fSS(mOut,"name2", name2);
	        mOut = BLUnits:fSS(mOut,"rank3", rank3); mOut = BLUnits:fSS(mOut,"surname3", surname3); mOut = BLUnits:fSS(mOut,"nickname3", nickname3); mOut = BLUnits:fSS(mOut,"name3", name3);
	        mOut = BLUnits:fSS(mOut,"topicname",topicname);
	        BLUnits:SendSMSToClient(c, mOut); 
	    }

    }

}

/* **************************************************************************************** */
/* **************************************************************************************** */

void fSendPPESMS(UmbrellaPPE uP, string smskey){

    Client c = uP.client_umbrellaPPE;
    string mOut = FixMessageList:fMessageStringPerFixedMessages(c, smskey);

        if(mOut!=""){
            mOut = fGetSanePPESMSText(uP, mOut);            
            BLUnits:SendSMSToClient(c, mOut); 
        }

    return null;

}

/* **************************************************************************************** */
/* **************************************************************************************** */

    string fGetSaneTopicSMSText(Umbrella u, string insanetext){

        string mOut = insanetext; 
        if(mOut==null||mOut==""||u==null){ return ""; }
        if(u!=null){ mOut = BLUnits:fSS(mOut,"topicname", fGetInitialCharacters(u.umbrellaName)); }
        return mOut;

    }

    /* **************************************************************************************** */

    string fGetSanePPESMSText(UmbrellaPPE uP, string insanetext){

        /* *********************************************** */
        Umbrella u = uP.umbrella_umbrellaPPE;
        Client c = uP.client_umbrellaPPE;
        string cgname = ClientGroupList:getGroupNameForClient(c);
        string mOut = insanetext; 
        if(mOut==null||mOut==""||u==null){ return ""; }
        /* *********************************************** */

        /* *********************************************** */
        int tempchat = uP.totalscore - (uP.quizscore + uP.practicumscore);
        /* *********************************************** */

            /* *********************************************** */
            if(u!=null){ mOut = BLUnits:fSS(mOut, "topicname", fGetInitialCharacters(u.umbrellaName)); }
            if(cgname!=null){ mOut = BLUnits:fSS(mOut, "groupname", cgname); }
            if(uP.chatscore!=null){ mOut = BLUnits:fSS(mOut, "chatscore", tempchat); }

            if(uP.totalscore!=null){ mOut = BLUnits:fSS(mOut, "totalscore", uP.totalscore); }
            if(uP.quizscore!=null){ mOut = BLUnits:fSS(mOut, "quizscore", uP.quizscore); }
            if(uP.practicumscore!=null){ mOut = BLUnits:fSS(mOut, "practicumscore", uP.practicumscore); }
            if(uP.progress!=null){ mOut = BLUnits:fSS(mOut, "progresspercentage", uP.progress); }
            if(uP.chatscore!=null){ mOut = BLUnits:fSS(mOut, "chatcount", uP.chatscore); }

            if(uP.quizpercentage!=null){ mOut = BLUnits:fSS(mOut, "quizpercentage", uP.quizpercentage); }
            if(uP.chatscoreadjusted!=null){ mOut = BLUnits:fSS(mOut, "chatscoreadjusted", uP.chatscoreadjusted); }
            if(uP.practicumtotalscoreachieved!=null){ mOut = BLUnits:fSS(mOut, "practicumtotalscoreachieved", uP.practicumtotalscoreachieved); }
            if(uP.practicumpercentage!=null){ mOut = BLUnits:fSS(mOut, "practicumpercentage", uP.practicumpercentage); }
            /* *********************************************** */

        return mOut;

    }

     /* **************************************************************************************** */

    string fGetInitialCharacters(string sin){

       int i = BLUnits:fGetConfigSettingInt("TopicNameInitialCharacters"); if (i==0){ i=10; }
       
       if(sin==null||sin==""){ return "null"; }

       string sout = sin;
       if(String:length(sin)>i && i>=0){ 
            sout = String:substring(sin, 0, i-1);
       }

       return sout;

    }

/* **************************************************************************************** */
/* **************************************************************************************** */
