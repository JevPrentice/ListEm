unit TopicManagement;

Umbrella[] topics;

Umbrella topic;
Umbrella topicFilter;

string message;

string nav_result;

void init() {
	message = "";

	if (nav_result == null || nav_result == ""){
		nav_result = "nav_subtopic_order_management";
	}

	if(topicFilter == null){
		topics = TopicController:getAllTopics();
	} else {
		topics = TopicController:getTopicsForTopicID(topicFilter.umbrellaID);
	}

}

string navigate(){
	return nav_result;
}

string backButton(){
	nav_result = "nav_subtopic_order_management";
	return navigate();
}

string navCreateTopic(){
	TopicEdit:topic = null;
	TopicEdit:nav_result = "nav_topic_management";
	nav_result = "nav_edit_topic";
	return navigate();
}

string navEditTopic(){
	TopicEdit:topic = topic;
	TopicEdit:nav_result = "nav_topic_management";
	nav_result = "nav_edit_topic";
	return navigate();
}

void deleteTopic(){

	if (topic == null){
		message = "Topic could not be found";
   		Alerter:alert(message);
		return null;
	}

	UmbrellaTopicSetupTable[] subTopicOrders = SubTopicOrderController:getSubTopicOrdersForTopic(topic);

	if (subTopicOrders != null){
		if (subTopicOrders.length() > 0){
			UmbrellaTopicSetupTable subTopicOrder = subTopicOrders.get(0);
			Topic subTopic = subTopicOrder.topic_UmbrellaUserSetup;
			message = String:concat("Topic cannot be removed because it is associated to the SubTopic: ", subTopic.topicID, " - SubTopicOrder: ", subTopicOrder.ordernum);
			Alerter:alert(message);
			return null;
		}
	} 

	Umbrella:delete(topic);
	message = "Topic Deleted";
	Alerter:alert(message);

	init();
	
	return null;
}

string navCreateSubTopic(){
	SubTopicEdit:topic = topic;
	nav_result = "nav_sub_topic_edit";
	return navigate();
}


string navCreateSubTopicOrder(){
	SubTopicOrderEdit:topic = topic;
	SubTopicOrderEdit:nav_return = null;
	nav_result = "nav_sub_topic_order_edit";
	return navigate();
}

string navManageSubTopics(){
	nav_result = "nav_sub_topic_management";
	return navigate();
}

string navManageSubTopicOrders(){
	nav_result = "nav_subtopic_order_management";
	return navigate();
}

string viewSubTopicOrders(){

	UmbrellaTopicSetupTable[] subTopicOrders = SubTopicOrderController:getSubTopicOrdersForTopic(topic);
	if (subTopicOrders.length() < 1){
		message = "There are no SubTopic Orders associated to this Topic";
		Alerter:alert(message);
		return null;
	}

	SubTopicOrderManagement:topicFilter = topic;
	SubTopicOrderManagement:subTopicFilter = null;
	
	nav_result = "nav_subtopic_order_management";
	return navigate();
}

void removeFiltersButton(){
	removeFilters();
	init();
}

void removeFilters(){
	topicFilter = null;
}