unit TSPReminder;
/*
    To summarize the schedule string format: {minute} {hour} {day-of-month} {month} {day-of-week}
*/

/* *********************************************************************** */
/* Move reminders forward by a fixed period */
/* *********************************************************************** */

bool fIsIn(string longstr, string shortstr){
	longstr = String:lower(longstr); shortstr = String:lower(shortstr);
	int i = String:indexOf(longstr, shortstr);

	if(i == null){
		return false;
	} else {
		return true;
	}		
}

bool fRepeatReminder(string sc){
	bool isin = fIsIn(BLUnits:fGetConfigSettingStr("RepeatReminders"), sc); 
	return isin;
}

void fMoveOnReminder(TopicReminder tr, SequenceReminder sr, PatternReminder pr){
	if(tr!=null){
		tr.reminderDate = Date:addDays(tr.reminderDate, 1); tr.save();
	}
	if(sr!=null){
		sr.reminderDate = Date:addDays(sr.reminderDate, 1); sr.save();
	}
	if(pr!=null){
		pr.reminderDate = Date:addDays(pr.reminderDate, 1); pr.save();
	}
}

/* *********************************************************************** */
/* Code for creating a topic reminder. Called in : TopicList- startTopic() */
/* *********************************************************************** */
void fCreateTopicReminder(Client c, Topic t){
	
    if((t.topicReminderSMS != null) && ((t.topicReminderSMS != ""))) {
        //check if there is an existing topic reminder and delete it if exist
    	fClearTopicReminder(c, t);
    	
    	TopicReminder tr = TopicReminder:new();
    	tr.reminderDate =  Date:addDays(Mez:now(), t.topicReminderTime);
    	
    	//update the relationship link between client and topicReminder 
    	tr.client_topicReminder = c;
    	tr.topic_topicReminder = t;
    	
    	tr.reminderMessage = t.topicReminderSMS;
    	tr.esc_id = t.topicEscalationTime;
    	tr.reminderTime = t.topicReminderTime;
    	
    	tr.save();
   }
} 

/* ********************************** */
/* Code for deleting or extending a topic reminder */
/* ********************************** */

void fClearorMoveTopicReminder(Client c , Topic t){
	
	TopicReminder[]  trs = TopicReminder:intersect(relationshipIn(client_topicReminder, c) , relationshipIn(topic_topicReminder, t));
	if (trs.length() > 0) {
		TopicReminder tr = trs.first();
		if (fRepeatReminder("T")==true){
			fMoveOnReminder(tr, null, null);
		} else {
			TopicReminder:delete(tr);
		}
	}
	return;
} 

/* ********************************** */
/* Code for deleting a topic reminder */
/* ********************************** */
void fClearTopicReminder(Client c , Topic t){
	
	TopicReminder[]  trs = TopicReminder:intersect(relationshipIn(client_topicReminder, c) , relationshipIn(topic_topicReminder, t));
	if (trs.length() > 0) {
		TopicReminder tr = trs.first();
		TopicReminder:delete(tr);
	}
	return;
} 

/* ************************************************* */
/* Code for creating a sequence reminder            */
/* ************************************************* */
void fCreateSequenceReminder(Client c , Sequence s){
	
    if((s.sequenceReminderSMS !=null ) && (s.sequenceReminderSMS !="" )) {
        //check if there is an existing sequence reminder and delete it if exist
        fClearSequenceReminder(c, s);
    	
    	SequenceReminder sr = SequenceReminder:new();
    	sr.reminderDate =  Date:addDays( Mez:now(), s.sequenceReminderTime);
    	sr.client_sequenceReminder = c;
    	sr.sequence_sequenceReminder = s;
    	sr.reminderMessage = s.sequenceReminderSMS;
    	sr.reminderTime = s.sequenceReminderTime;
    	sr.save();
   }
	
} 

/* ************************************** */
/* Code for deleting or extending a sequence reminder  */
/* ************************************** */
void fClearorMoveSequenceReminder(Client c , Sequence s){

    SequenceReminder[]  srs = SequenceReminder:intersect(relationshipIn(client_sequenceReminder, c) , relationshipIn(sequence_sequenceReminder, s));
	if (srs.length() > 0) {
		SequenceReminder sr = srs.first();
		if (fRepeatReminder("S")==true){
			fMoveOnReminder(null, sr, null);
		} else {		
			SequenceReminder:delete(sr);
		}
	}
} 

/* ************************************** */
/* Code for deleting a sequence reminder  */
/* ************************************** */
void fClearSequenceReminder(Client c , Sequence s){

    SequenceReminder[]  srs = SequenceReminder:intersect(relationshipIn(client_sequenceReminder, c) , relationshipIn(sequence_sequenceReminder, s));
	if (srs.length() > 0) {
		SequenceReminder sr = srs.first();		
		SequenceReminder:delete(sr);
	}
} 

/* ************************************************* */
/* ************************************************* */
void fCreatePatternReminder(Client c , Pattern p){
	
    if((p.patternReminderSMS != null ) && (p.patternReminderSMS != "" )) {
    	//check if there is an existing pattern reminder and delete it if exist
    	fClearPatternReminder(c, p);
    	
    	PatternReminder pr = PatternReminder:new();
    	pr.reminderDate =  Date:addDays( Mez:now(), p.patternReminderTime);
    	
    	//update the relationship link between client and topicReminder 
    	pr.client_patternReminder = c;
    	pr.pattern_patternReminder = p;
    	pr.patternReminderSMS = p.patternReminderSMS;
    	pr.save();
   }	
} 

/* ************************************** */
/* Code for deleting or extending a pattern reminder  */
/* ************************************** */
void fClearorMovePatternReminder(Client c , Pattern p){

    PatternReminder[]  prs = PatternReminder:intersect(relationshipIn(client_patternReminder, c) , relationshipIn(pattern_patternReminder, p));
	if (prs.length() > 0) {
		PatternReminder pr = prs.first();
		if (fRepeatReminder("A")==true){
			fMoveOnReminder(null, null, pr);
		} else {
			PatternReminder:delete(pr);
		}
	}
} 

/* ************************************** */
/* Code for deleting a pattern reminder  */
/* ************************************** */
void fClearPatternReminder(Client c , Pattern p){

    PatternReminder[]  prs = PatternReminder:intersect(relationshipIn(client_patternReminder, c) , relationshipIn(pattern_patternReminder, p));
	if (prs.length() > 0) {
		PatternReminder pr = prs.first();
		PatternReminder:delete(pr);
	}
} 

/* ************************************************* */
/* Code for creating a topic escalation reminder            */
/* ************************************************* */
void fCreateTopicEscalator(Client c, Umbrella u, Topic t){
	
	//check if there is an existing TopicEscalator and delete it if exist
	fClearTopicEscalator(c, t);

	datetime dTopicEscalator = UserGroupUmbrellaTimeCalculations:fGetTopicEscalationDatePerUmbrella(c, u, t);
	
	TopicEscalator t_e = TopicEscalator:new();
	t_e.escalationTime = dTopicEscalator;  
	t_e.client_topicEscalator = c;
	t_e.topic_topicEscalator = t;
	t_e.save();
	
} 

/* ************************************** */
/* Code for deleting a topic escalation  reminder  */
/* ************************************** */
void fClearTopicEscalator(Client c , Topic t){

    TopicEscalator[]  t_es = TopicEscalator:and(relationshipIn(client_topicEscalator, c) , relationshipIn(topic_topicEscalator, t));
	if (t_es.length() > 0) {
		TopicEscalator t_e = t_es.first();
		TopicEscalator:delete(t_e);
	}
} 

/* ************************************************* */
/* Code for creating a forced topic end event	 	 */
/* ************************************************* */

void fCreateForcedTopicEnd(Client c, Umbrella u, Topic t, int rt){

	datetime dtetarget = UserGroupUmbrellaTimeCalculations:fGetDateTimeExpiryTarget(c, u, t, rt);

	//check if there is an existing ForceTopicEnd and delete it if exist
	fClearForceTopicEnd(c, t);
	
	ForceTopicEnd t_end = ForceTopicEnd:new();
	t_end.forceEndDateTime =  dtetarget;
	t_end.client_fTopicEnd = c;
	t_end.topic_fTopicEnd = t;
	t_end.save();

	return null;
	
}

/* **************************************************** */
/* Code for clearing a forced topic end  				*/
/* **************************************************** */

void fClearForceTopicEnd(Client c , Topic t){
	
    ForceTopicEnd[] tes = ForceTopicEnd:and(relationshipIn(client_fTopicEnd, c) , relationshipIn(topic_fTopicEnd, t));
	if (tes.length() > 0) {
        ForceTopicEnd te = tes.first();
        ForceTopicEnd:delete(te);
	} else {
      return null;   
	}
}

/* *********************************************************************************************************************** */
/* Checks if topic reminder has been scheduled so as to be available for client based on the relevant dates */
/* *********************************************************************************************************************** */

int checkReminderValue(datetime compareDate, datetime datetimeNow) {
    if(datetimeNow >= compareDate){                                  
        return 0;
    } else {
        return 1;
    }
}

/* *********************************************************************************************************************** */
/* *********************************************************************************************************************** */

TopicUserSetup fManualTopicStart(Client c, int rtin) {

    TopicUserSetup[] tuas = TopicUserSetup:and(relationshipIn(client_topicUserSetup, c), equals(active, 2),lessThan(topicMinStartDate,Mez:now())); 
    TopicUserSetup sTUS; int rt;

    if( tuas.length() > 0 ) {    
        tuas.sortDesc("topicOrder");
        for(int i=(tuas.length()-1); i>=0; i--) {

	        sTUS = tuas.get(i); rt = sTUS.runType;

	        if((sTUS.client_topicUserSetup!=null)&&(rt==rtin)) {

	            TopicList:startTopic(sTUS, 1);
	            return sTUS;

	        } else {
	        	return null;
	        }

	    }
    } else {
        return null;
    }

}

/* *********************************************************************************************************************** */
/* *********************************************************************************************************************** */
/* *********************************************************************************************************************** */

/* SCHEDULED REMINDER SECTION */

/* *********************************************************************************************************************** */
/* 	Code excututed to start topics as per the schedule if the client is not currently busy                                 */
/* *********************************************************************************************************************** */

@Scheduled("10 * * * *")  
void fAutoTopicToStart() {

	if(BLUnits:fGetConfigSettingInt("StopScheduling")==1) { return null; }

    TopicUserSetup[] tuas = TopicUserSetup:and(equals(active, 2),lessThan(topicMinStartDate,Mez:now())); 
    TopicUserSetup sTUS; int maxi = tuas.length(); bool bCanRun = true;
    string ss = String:concat("Autostarting users on topic as per setup : ", maxi); Mez:log(ss);
    
    if( maxi > 0 ) {    
        tuas.sortDesc("topicOrder");
        for(int i=(tuas.length()-1); i>=0; i--) {
            sTUS = tuas.get(i);
            if(sTUS.client_topicUserSetup != null && sTUS.topic_topicUserSetup != null){

            	ss = String:concat("Autostarting topic index : ", i, " : ", sTUS.client_topicUserSetup); Mez:log(ss);

            	bCanRun = UserGroupUmbrellaTimeCalculations:fCanRunUmbrella(sTUS);

            	if(bCanRun==true){
            		TopicList:startTopic(sTUS, 0);	
            	} else {
            		sTUS.active = 3;
            		sTUS.save();
            	}

            } else {
            	TopicUserSetup:delete(sTUS);
            }
        }
    }else {
        return null;
    }
}

/* *********************************************************************************************************************** */
/* Code executed to send a Pattern reminder			                                                                       */
/* *********************************************************************************************************************** */

@Scheduled("25 * * * *") 
void PatternReminderLogic(){
   
    if(BLUnits:fGetConfigSettingInt("StopScheduling")==1) { return null; }

	PatternReminder[]  pRs = PatternReminder:lessThan(reminderDate, Mez:now());
	int maxi = pRs.length(); string ss = String:concat("Now sending the pattern reminders to the current clients: ", maxi); Mez:log(ss);

	if (maxi > 0) {
		PatternReminder pR;

	    for (int i=(pRs.length()-1); i>=0; i--) {
		    pR = pRs.get(i);
            
	    	//get the client for this reminder
	    	Client  c = pR.client_patternReminder;
	    
	    	//get the pattern for this reminder
	    	Pattern p = pR.pattern_patternReminder;
	    	
			if (checkReminderValue(pR.reminderDate, Mez:now()) <= 0) { 
				
				//send the paterrn reminder sms to the client
			    BLUnits:SendSMSToClient(c, p.patternReminderSMS);

			    //also send the progress message 
			    if(BLUnits:fGetConfigSettingInt("SendProgressOnRemind")==1){
			    	uGetCurrentSchedule:fsmsCHWProgressTextExec(c);
			    }

			    //check if there is an existing pattern reminder and delete it if exist
				fClearorMovePatternReminder(c, p);
			        
			}   
		} 
	} else {
	    return null;
	}
}

/* *********************************************************************************************************************** */
/* Code executed to send a Sequence reminders	 	                                                                       */
/* *********************************************************************************************************************** */

@Scheduled("30 * * * *") 
void SequenceReminderLogic(){
   
    if(BLUnits:fGetConfigSettingInt("StopScheduling")==1) { return null; }

	SequenceReminder[]  sRs = SequenceReminder:lessThan(reminderDate, Mez:now());
	int maxi = sRs.length(); string ss = String:concat("Now sending the sequence reminders to the current clients: ", maxi); Mez:log(ss);

	if (maxi > 0) {
	SequenceReminder sR;

	    for (int i=(sRs.length()-1); i>=0; i--) {
		   	sR = sRs.get(i);
            
	    	//get the client for this reminder
	    	Client  c = sR.client_sequenceReminder;
	    
	    	//get the topic for this reminder
	    	Sequence s = sR.sequence_sequenceReminder;
	    	
			if (checkReminderValue(sR.reminderDate, Mez:now()) <= 0) { 
				//send the topic reminder sms to the client
			    BLUnits:SendSMSToClient(c, s.sequenceReminderSMS); // sending the reminder to the client.
			    //check if there is an existing sequence reminder and delete it if exist
				fClearorMoveSequenceReminder(c, s);
			}   
		} 
	} else {
	    return null;
	}	
}

/* *********************************************************************************************************************** */
/* Code executed to send a Topic reminder 			                                                                       */
/* *********************************************************************************************************************** */

@Scheduled("35 * * * *") 
void TopicReminderLogic(){

	if(BLUnits:fGetConfigSettingInt("StopScheduling")==1) { return null; }
   
	TopicReminder[] tRs = TopicReminder:lessThan(reminderDate, Mez:now());
	int maxi = tRs.length(); string ss = String:concat("Now sending the topic reminders to the current clients: ", maxi); Mez:log(ss);

	if (maxi > 0) {
	TopicReminder tR;

	    for (int i=(tRs.length()-1); i>=0; i--){ 
		    tR = tRs.get(i);

	    	//get the client for this reminder
	    	Client  c = tR.client_topicReminder;
	    
	    	//get the topic for this reminder
	    	Topic t = tR.topic_topicReminder;
	    	
	    	//checks if topic reminder has been scheduled so as to be available for client based on the relevant dates							
			if (checkReminderValue(tR.reminderDate, Mez:now() ) <= 0) { 

				if(uCalculatePPE:fGetClientCurrentUmbrellaPPEStatus(c)==1){

					//send the topic reminder sms to the client
				    BLUnits:SendSMSToClient(c, t.topicReminderSMS); // sending the reminder to the client.

	                //update Topic History escalation  
	                TopicHistoryList:fUpdateTopicHistoryEscalation(c, t, 2);
	            }

			    //check if there is an existing topic reminder and delete it if exist
				fClearorMoveTopicReminder(c, t);
			}   
		}
	} else {
	    return null;
	}	
}

/* *********************************************************************************************************************** */
/* Code excututed When Topic "escalation" datetime is reached, the escalation message must be sent to the CHEW of the CHW. */
/* *********************************************************************************************************************** */

@Scheduled("45 * * * *")  
void doTopicEscalation() {

	if(BLUnits:fGetConfigSettingInt("StopScheduling")==1) { return null; }
   
    TopicEscalator[] tEs = TopicEscalator:lessThan(escalationTime, Mez:now());
    int maxi = tEs.length(); string ss = String:concat("Now sending the topic escalation to the current clients: ", maxi); Mez:log(ss);

	if (maxi > 0) {
	TopicEscalator tE; Client c; Topic t;

	    for (int i=(tEs.length()-1); i>=0; i--){
		    tE = tEs.get(i);

	    	//get the client for this reminder
	    	c = tE.client_topicEscalator;
	    
	    	//get the topic for this reminder
	    	t = tE.topic_topicEscalator;
	    	
	    	//checks if topic reminder has been scheduled so as to be available for client based on the relevant dates							
			if (checkReminderValue(tE.escalationTime, Mez:now()) <= 0) { 

                // Resend the reminder SMS
			    // BLUnits:SendSMSToClient(c, t.topicReminderSMS); /* Removed to prevent more than one reminder SMS */

                // Send the escalation message to the relevent users
   	            sendEscalationText(c, t);

			    // Check if there is an existing topic reminder and delete it if exist
				fClearTopicEscalator(c, t);           

                // Update Topic History escalation  
                TopicHistoryList:fUpdateTopicHistoryEscalation(c, t, 9);

                // Potentially update Umbrella status in UmbrellaPPE table
                uCalculatePPE:fUpdateCurrentUmbrellaPPEStatus(c, "escalation", 9);

			}
		}

	} else {
	    return null;
	}	
}

/* *********************************************************************************************************************** */
/* Code executed to force an Automatic topic end at mandated expiry                                                        */
/* *********************************************************************************************************************** */

@Scheduled("55 * * * *") 
void fForceTopicToEnd() {

	if(BLUnits:fGetConfigSettingInt("StopScheduling")==1) { return null; }
    
    ForceTopicEnd[] ftes = ForceTopicEnd:lessThan(forceEndDateTime, Mez:now());
    TopicUserSetup tuSetup = null; ForceTopicEnd ftr; Client c; Topic t; int ir = 0;
    
 	int maxi = ftes.length(); string ss = String:concat("Now forcing topic expiry for the current clients: ", maxi); Mez:log(ss);

    if(maxi > 0 ) {
        
        for (int i=(ftes.length()-1); i>=0; i--){
            
            ftr = ftes.get(i);

	    	//checks if topic reminder has been scheduled so as to be available for client based on the relevant dates							
			if (checkReminderValue(ftr.forceEndDateTime, Mez:now() ) <= 0) { 

				c = ftr.client_fTopicEnd; t = ftr.topic_fTopicEnd;
                tuSetup = TopicList:fGetLatestTopicUserSetupByCode(c, t, 1);
                
                if(tuSetup!=null) {

                    // Potentially update Umbrella status in UmbrellaPPE table
                	ir = uCalculatePPE:fCheckandExpireUmbrella(tuSetup, 88);

                	// If the entire Umbrella did not expire... then expire the Topic
                    if(ir!=1){ TopicList:fForceEndTopic(tuSetup, 88); }

                }
			}
		}
    }
    return null;
}

/* *********************************************************************************************************************** */
/* Code executed once hourly to check for Group/Topic based messages                                                       */
/* *********************************************************************************************************************** */

@Scheduled("5 * * * *")  
void fDoGroupTopicMessagingSchedule() {
	GroupPerformanceSummary:fDoGroupTopicMessagingSchedule();
}

/* *********************************************************************************************************************** */
/* Code executed once daily to reset chat count                                                                     */
/* *********************************************************************************************************************** */

@Scheduled("0 0 * * *") 
void fClearChatCount() {
    ClientList:fClearGroupChat();
}

/* *********************************************************************************************************************** */
/* *********************************************************************************************************************** */
/* *********************************************************************************************************************** */

/* ************************************************* */
/* code: text sent to the CHEW of the CHW
/* ************************************************* */

string sET(Client c, Topic t){
    string sT = FixMessageList:fMessageStringPerFixedMessages (c, "9");
    string r = c.nickname;
    r = BLUnits:fSS(sT, "clientname", r);
    r = BLUnits:fSS(r, "topicname", t.topicName);
    return r;
}

void sendEscalationText(Client c, Topic t) {
    
    //get the group that the client belongs to
    ClientGroup cg = ClientGroupList:getGroupForClient(c);
    if(cg != null){
         //get the chew leader for the group that the client belongs to
        Client chew = ClientGroupList:getClientGroupChew(cg);
        if(chew != null) {
            string text = sET(c, t);
    		BLUnits:SendSMSToClient(chew,text); 
        }
    }
}

/* *********************************************************************************************************************** */
/* *********************************************************************************************************************** */

ForceTopicEnd[] getAllForceTopicEnd() {
    return ForceTopicEnd:all();
}

TopicEscalator[] getAllTopicEscalator() {
    return TopicEscalator:all();
}

PatternReminder[] getAllPatternReminder() {
    return PatternReminder:all();
}

TopicReminder[] getAllTopicReminder() {
    return TopicReminder:all();
}

SequenceReminder[] getAllSequenceReminder() {
    return SequenceReminder:all();
}
TopicUserSetup[] getAllScheduledTopicUsers() {
    return TopicUserSetup:equals(active, 2);
}


