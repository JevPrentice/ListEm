unit NewFlowControllers;

/* ***************************************************************************************** */
/* ***************************************************************************************** */
/* ***************************************************************************************** */

int fJumpToLink(Client c, string s, JumpTo jT){
	
	int jTt; int r = 0; Umbrella uTo = null; Topic tTo = null; 

	if (jT==null){ return r; }

	if(s=="UthenT"){ s = JumpToLogic:fGetExactMatchTypeInOrderOfPriority(jT); }
	if(s==""){ return r; }

	if(s=="U"){ 
		uTo = JumpToLogic:fGetJumpToUmbrella(jT);
	} else if (s=="T"){
		tTo = JumpToLogic:fGetJumpToTopic(jT);
	}

	jTt = jT.jumpToType;

	if(jTt == 40){
		fSearchTopicExec(c, uTo, tTo); r = 1;
	} else if (jTt == 84 || jTt == 82){
		fJumpSubTopicNowExec(c, uTo, tTo, jTt); r = 1;
	} else if (jTt == 85 || jTt == 83){
		fJumpTopicNowExec(c, uTo, tTo, jTt); r = 1;
	} else if (jTt>=10&&jTt<=15){
		fJumpToSchedulePerCode(c, uTo, tTo, jTt); r = 0;
	}

	return r;

}

/* ***************************************************************************************** */
/* ***************************************************************************************** */
/* ***************************************************************************************** */

void fJumpToSchedulePerCode(Client c, Umbrella uTo, Topic tTo, int jTt){

	if(c==null||(uTo==null&&tTo==null)){ return null; }

	Topic tCur = uGetCurrentSchedule:fGetCurrentTopic(c);

	/* Schedule Jump To at the back of the queue, but do not interrupt current Sub-Topic */
	if(jTt==10){ fScheduleClientForNew(c, uTo, tTo, 1, 1, 0); }

	/* Schedule Jump To at the back of the queue, and reschedule current Sub-Topic thereafter */
	if(jTt==11){ 
		fScheduleClientForNew(c, uTo, tTo, 1, 1, 0);
		fScheduleClientForNew(c, null, tCur, 1, 1, 0); 
	}

	/* Schedule Jump To with priority, but do not interrupt current Sub-Topic */
	if(jTt==12){ fScheduleClientForNew(c, uTo, tTo, 1, -1, 0); }

	/* Schedule Jump To with priority, and reschedule current Sub-Topic at the back of the queue */
	if(jTt==13){ 
		fScheduleClientForNew(c, uTo, tTo, 1, -1, 0);
		fScheduleClientForNew(c, null, tCur, 1, 1, 0); 
	}

	/* Schedule Jump To with priority, and reschedule current Sub-Topic directly after with priority */
	if(jTt==14){ 
		fScheduleClientForNew(c, uTo, tTo, 1, -1, 0);
		fScheduleClientForNew(c, null, tCur, 1, -1, 0); 
	}

	/* Schedule Jump To with priority, and reschedule current Sub-Topic after all other priority Sub-Topics */
	if(jTt==15){ 
		fScheduleClientForNew(c, uTo, tTo, 1, -1, 0);
		fScheduleClientForNew(c, null, tCur, 1, 0, 0); 
	}

}

/* Calling : fScheduleClientForNew(Client c, Umbrella u, Topic t, int rt, int ordercode, int removecode) */

/* ***************************************************************************************** */
/* ***************************************************************************************** */
/* ***************************************************************************************** */

void fJumpTopicNowExec(Client c, Umbrella u, Topic t, int jTt){
	
	TopicUserSetup tUCur = TopicUserSetupList:getActiveTopicFromTopicUserSetup(c);
	TopicUserSetup tUnew; Umbrella uCur; int rt = 1;
	
	if(jTt==85){ rt = 1; } else if (jTt==83) { rt = 40; }

	if(tUCur!=null){
		uCur = tUCur.umbrella_topicUserSetup;
		if(uCur!=null){
			fScheduleClientForNew(c, uCur, null, -1, 0, jTt);
		}
	}

	if(t!=null||u!=null){ 
		fScheduleClientForNew(c, u, t, rt, -1, 0); 
		tUnew = TSPReminder:fManualTopicStart(c, rt);
	}

}

/* ***************************************************************************************** */
/* ***************************************************************************************** */
/* ***************************************************************************************** */

void fJumpSubTopicNowExec(Client c, Umbrella u, Topic t, int jTt){
	
	TopicUserSetup tU = TopicUserSetupList:getActiveTopicFromTopicUserSetup(c);
	TopicUserSetup tUnew; int rt = 1;
	
	if(jTt==84){ rt = 1; } else if (jTt==82) { rt = 40; }

	if(tU!=null){
		TopicList:fForceEndTopic(tU, jTt);
	}

	if(t!=null||u!=null){ 
		fScheduleClientForNew(c, u, t, rt, -1, 0); 
		tUnew = TSPReminder:fManualTopicStart(c, rt);
	}

}

/* ***************************************************************************************** */
/* ***************************************************************************************** */
/* ***************************************************************************************** */

void fSearchTopicExec(Client c, Umbrella u, Topic t){

	int r = 0; 
	int rt = BLUnits:fGetConfigSettingInt("DefaultTypeSearchMainMenu");

	if(t!=null||u!=null){
		
			// Pause current topic - whatever it is
			r = fPauseCurrentOrResumeLastTopic(c, 1);
			
			// Schedule for Topic or Umbrella as requested to start now
			fScheduleClientForNew(c, u, t, rt, -1, 0);
			
			// Start first Topic that was scheduled as requested
			TopicUserSetup tU = TSPReminder:fManualTopicStart(c, rt);

			if(tU==null){
				// Resume the paused topic - whatever it is
				r = fPauseCurrentOrResumeLastTopic(c, 2);
				Mez:alert("learningManager.topicList.searchAlert");
			} else {
				Mez:alert("learningManager.topicList.searchConfirm");
			}

	} else {
		Mez:alert("learningManager.topicList.searchAlert");
	}

	return null;

}

/* ***************************************************************************************** */
/* ***************************************************************************************** */
/* ***************************************************************************************** */

int fCheckEndOnJump(string smsText, Message m, Client c, int correctCode){

	int endOnJump = 0; string sJumpTo = ""; JumpTo jT;

    sJumpTo = JumpToLogic:fGetJumpToMatchType(smsText, m, c, correctCode);

    if(sJumpTo=="U"||sJumpTo=="T"){

		jT = JumpToLogic:fGetJumpToObjectOptions(smsText, m, c, correctCode);
		endOnJump = fJumpToLink(c, sJumpTo, jT);
                
	}

    return endOnJump;
}

/* ***************************************************************************************** */
/* ***************************************************************************************** */
/* ***************************************************************************************** */

void fSearchTopic(Client c, string smsText){

	Umbrella uIn = null; Topic tIn = null; Topic tF; int r = 0; string tt1 = ""; string tt2 = ""; string tt3 = "";
	LanguageKeyObject lk = c.client_LanguageKey;

	/* ******************************* */
	string slog = String:concat("fSearchTopic 1 : Client '",c.mobileNumber,"' | smsText '",smsText,"'"); Mez:log(slog);
	/* ******************************* */

	string ps = fGetPossibleTopicString(smsText);

	uIn = fGetPossibleUmbrella(ps);
	if(uIn==null){ tIn = fGetPossibleTopic(ps); }

	if(tIn!=null||uIn!=null){ 

		if(tIn!=null){ 
			tF = tIn; 
		} else {
			tF = Umbrella:fGetIndexZeroTopicInUmbrella(uIn, lk, "first");
		}

		r = TopicList:fCanClientSearchForTopic(c, tF);

		/* ******************************* */
		if(tF!=null){ tt1 = tF.topicID; }
		if(tIn!=null){ tt2 = tIn.topicID; }
		if(uIn!=null){ tt3 = uIn.umbrellaID; }
		slog = String:concat("fSearchTopic 2 : Client '", c.mobileNumber,"' uIn '",tt3, "' | tF '",tt1,"' | tIn '",tt2,"' | r '",r,"'"); Mez:log(slog);
		/* ******************************* */

		if(r==1){
			fSearchTopicExec(c, uIn, tIn); 
		} else {
			Mez:alert("learningManager.topicList.searchNotYet");
			FixMessageList:sendFixedMessage(c, "NoSearchAvailable", "");
		}

	}

	return null;

}


/* ********************************************* */
/* ********************************************* */

Topic fGetPossibleTopic(string ins){
	Topic[] ts = Topic:all(); Topic t = null; 
	
	ins = String:upper(ins); string comps;
	
	for (int i=0; i<ts.length(); i++){
		t = ts.get(i);
		comps = String:upper(t.topicID);
		if(ins==comps){
			return t;
		}
	}
	return null;
}

	/* ********************************************* */

Umbrella fGetPossibleUmbrella(string ins){

	Umbrella[] us = Umbrella:all(); Umbrella u = null; 
	
	ins = String:upper(ins); string comps;
	
	for (int i=0; i<us.length(); i++){
		u = us.get(i);
		comps = String:upper(u.umbrellaID);
		if(ins==comps){
			return u;
		}
	}
	return null;
}

	/* ********************************************* */

string fGetPossibleTopicString(string s){
	string rs = ""; string ts = "";

	int m1 = 6; int mx = (String:length(s));

	for(int i=m1; i<mx; i++){
		ts = String:substring(s,i,i);
		if(ts!=" "){ rs = String:concat(rs, ts); }
	}

	return rs;

}

	/* ********************************************* */

void fScheduleClientForNew(Client c, Umbrella u, Topic t, int rt, int ordercode, int removecode){

	datetime dt = Date:addSeconds(Mez:now(), -60); bool bIgnoreDefTime = true;

	if(t!=null){
		UmbrellaModelControllers:fSaveTopicUserSetupList(u, 1, 2, dt, c, t, rt, ordercode, 2);
	} else if(u!=null){
		UmbrellaScheduling:fScheduleclientumbrella(c, u, dt, bIgnoreDefTime, rt, ordercode, removecode);
	}

}

/* ***************************************************************************************** */
/* ***************************************************************************************** */
/* ***************************************************************************************** */

int fPurgeSearchTopics(Client c){

	int r = 0;
    TopicUserSetup[] tUs = TopicUserSetup:and(relationshipIn(client_topicUserSetup, c), equals(runType,40)); TopicUserSetup tU; Topic t;

    if(tUs.length()>0){
        for(int i = (tUs.length()-1); i>=0; i--){
            tU = tUs.get(i); t = tU.topic_topicUserSetup;
            if(tU.active == 1){
            	TopicList:fForceEndTopic(tU, 86); r = 1;
            } else if (tU.active > 1) {
            	TopicUserSetup:delete(tU); r = 1;
            }
        }
    }

    return r;

}

/* ********************************************* */
/* ********************************************* */

int fPauseCurrentOrResumeLastTopic(Client c, int i){
	Topic t = null; string slog; int r = 0; string sreturn = "";

	if(i==1){
		t = uGetCurrentSchedule:fGetCurrentTopic(c);
	} else if(i==2){
		t = uGetCurrentSchedule:fGetLastPausedTopic(c);
	}

	if(c!=null&&t!=null){
		sreturn = fPauseTopic(c, t, i); r = 1;
	}

	return r;

}

/* ********************************************* */
/* ********************************************* */

string fPauseTopic(Client c, Topic tin, int i){
	
	string sreturn = ""; Topic currentTopic; Topic lastpausedTopic;
	
	if(i == 1){
		currentTopic = uGetCurrentSchedule:fGetCurrentTopic(c);
		if(currentTopic==tin){
			fPauseTopicExec(c, tin); sreturn = "paused";
			TopicUserSetupController:setAllTusActive2AsActive21ForUser (c);
		}
	} else if(i == 2){
		lastpausedTopic = uGetCurrentSchedule:fGetLastPausedTopic(c);
		if(tin == lastpausedTopic){
			fResumeTopicExec(c, tin);
			sreturn = "resumed";
			TopicUserSetupController:setAllTusActive21AsActive2ForUser (c);
		}
	}
	return sreturn;

}

/* ********************************************* */
/* ********************************************* */

void fPauseTopicExec(Client c, Topic t){
	
	int icode = 20; int oldcode = 1;							// The code for pausing

	Umbrella u = uGetCurrentSchedule:fGetLastUmbrella(c, t);

    SequenceList:fForceEndSequence(c, icode);
    TopicList:fClearCurrentTopicTable(c);
    TopicList:fUpdateTopicHistory(c, u, t, icode);
    TopicList:fUpdateTopicUserSetup(null, c, t, icode, oldcode);

}

/* ********************************************* */
/* ********************************************* */

void fResumeTopicExec(Client c, Topic t){
	
	int icode = 1; int oldcode = 20;							// The code for activating

	Umbrella u = uGetCurrentSchedule:fGetLastUmbrella(c, t);
	
    TopicList:fReactivateTopicHistory(c, u, t, icode);
	TopicList:createCurrentTopicTable(c, t);
    SequenceList:fStartNextSequence(c);
    TopicList:fUpdateTopicUserSetup(null, c, t, icode, oldcode);
    
}

/* ********************************************* */
/* ********************************************* */

void fRewindToSequence(Client c){

	SequenceList:fStartNextSequence(c);

}

/* ********************************************* */
/* ********************************************* */

/*
	        
	// Part of end - not part of Pause	

    // TopicUserSetupList:updateUserTopic(client,topic);

	// BLUnits:SendSMSToClient(client,topic.topicEndSMS);
    
    // TSPReminder:fClearTopicReminder(client, topic);
    
    // TSPReminder:fClearTopicEscalator(client, topic);
    
    // TSPReminder:fClearForceTopicEnd(client, topic);   

*/