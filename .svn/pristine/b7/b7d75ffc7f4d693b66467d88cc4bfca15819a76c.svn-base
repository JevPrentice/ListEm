unit ContentViewer;

Umbrella topic;
Umbrella[] topics;

SubTopicOrderTemp[] subTopicOrdersTemp;
SubTopicOrderTemp subTopicOrderTemp;

Topic subTopic;

SequenceOrder[] sequenceOrders;
SequenceOrder sequenceOrder;

Sequence sequence;

PatternOrder[] activityOrders;
PatternOrder activityOrder;

ActivityOrderTemp[] activityOrdersTemp;
ActivityOrderTemp activityOrderTemp;

Pattern activity;

PatternMessageText[] messageOrders;
PatternMessageText messageOrder;

Message o_message;
Message[] messages;

string message;

void clearCollections(){
    topics.clear();
    subTopicOrdersTemp.clear();
    sequenceOrders.clear();
    activityOrders.clear();
    messageOrders.clear();
    messages.clear();
}

void filterOnTopic(){
    if (topic != null){
        topics = TopicController:getTopicsForTopicID(topic.umbrellaID);

        if (subTopic == null){
            UmbrellaTopicSetupTable[] subTopicOrders = SubTopicOrderController:getSubTopicOrdersForTopic(topic);
            subTopicOrdersTemp = SubTopicOrderTempContoller:getSubTopicOrderTempForSubTopicOrdersArray(subTopicOrders);
        }
        
    }
}

void filterOnSubTopic(){
    
    Umbrella[] topicTempArr;
    topicTempArr.clear();
    Umbrella topicTemp;
    UmbrellaTopicSetupTable[] subTopicOrders;

    if (subTopic != null){

        if (topics.length() < 1){

            topicTempArr = TopicController:getTopicsFromSubTopic(subTopic);
            
            if (topicTempArr.length() > 0){
                
                for(int i = 0; i < topicTempArr.length(); i++){
                    topicTemp = topicTempArr.get(i);
                    topics.append(topicTemp); //Set Topics
                    topicTemp = null;
                }
                topicTempArr.clear();
            }
        }

        if (subTopicOrdersTemp.length() <= 0 && topic == null){
            subTopicOrdersTemp = SubTopicOrderTempContoller:getSubTopicOrderTempForSubTopic(subTopic);

        } else if (subTopicOrdersTemp.length() <= 0 && topic != null){
            
            subTopicOrders = SubTopicOrderController:getSubTopicOrdersForTopicSubTopic(topic, subTopic);
            subTopicOrdersTemp = SubTopicOrderTempContoller:getSubTopicOrderTempForSubTopicOrdersArray(subTopicOrders);

        }

        if (sequence == null){
            sequenceOrders = SequenceOrderController:getSequenceOrdersForSubTopic(subTopic);

            if (sequenceOrders.length() == 1){
                SequenceOrder so = sequenceOrders.get(0);
                sequence = so.sequence_sequenceOrder;
            }
        }
    }
}


void filterOnSequence(){
    if (sequence != null){

        SequenceOrder[] sequenceOrdersForSequence = SequenceOrderController:getSequenceOrdersForSequence(sequence);

        if (subTopicOrdersTemp.length() <= 0 && topic == null && subTopic == null){
            for(int i = 0; i < sequenceOrdersForSequence.length(); i++){
                SequenceOrder sequenceOrderForSequence = sequenceOrdersForSequence.get(i);
                subTopicOrdersTemp = SubTopicOrderTempContoller:getSubTopicOrderTempForSubTopic(sequenceOrderForSequence.topic_sequenceOrder);
            }
        }

        if (sequenceOrders.length() <= 0){
            for(int i = 0; i < sequenceOrdersForSequence.length(); i++){
                sequenceOrders.append(sequenceOrdersForSequence.get(i));
            }
        }

        if (activity == null && sequenceOrders.length() == 1){

            
            activityOrders = ActivityOrderController:getActivityOrdersForSequence(sequence);
            activityOrdersTemp = ActivityOrderTempController:getActivityOrderTempFromPatternOrderArr(activityOrders);
        }
        
    }
}

void filterOnActivity(){
    if (activity != null){

        PatternOrder[] activityOrdersForActivity = ActivityOrderController:getActivityOrdersForActivity(activity);
        activityOrdersTemp = ActivityOrderTempController:getActivityOrderTempFromPatternOrderArr(activityOrdersForActivity);

        if (activityOrdersForActivity.length() == 1){
            PatternOrder actOrder = activityOrdersForActivity.get(0);
            sequence = actOrder.sequence_patternOrder;
            filterOnSequence();
        }

        if (messageOrders.length() <= 0){
            messageOrders = MessageOrderController:getMassageOrdersForActivity(activity);
        }
    }
}

void filterOnMessage(){
    if (o_message != null){
        messageOrders = MessageOrderController:getMassageOrdersForMessage(o_message);
    
        if (messageOrders.length() == 1){
            if(activityOrdersTemp.length() <= 0){
                PatternMessageText mo = messageOrders.get(0);
                activity = mo.patternMessageTextID_pattern;
                filterOnActivity();
            }
        }
    }
}


string back(){
    ContentFilter:refreshSelection = "false";

    ContentFilter:topic = topic;
    ContentFilter:subTopic = subTopic;
    ContentFilter:sequence = sequence;
    ContentFilter:activity = activity;
    ContentFilter:o_message = o_message;

    return "nav_content_filter";
}

void init() {

    message = "";

    clearCollections();

    filterOnTopic();
    filterOnSubTopic();
    filterOnSequence();
    filterOnActivity();
    filterOnMessage();

    return null;
}

string editUmbrella(){

    TopicEdit:topic = topic;
    TopicEdit:nav_result = "nav_content_viewer";
    return "nav_umbrella_edit";
}

string editSubTopic(){

    if (subTopicOrderTemp.subTopicID == null || subTopicOrderTemp.subTopicID == ""){
        message = "There is no Topic associated to this SubTopic";
        Alerter:alert(message);      
        return null;
    }

    SubTopicEdit:subTopic = SubTopicController:getSubTopicsForTopicID_singleRecord(subTopicOrderTemp.subTopicID);
    SubTopicEdit:nav_return = "nav_content_viewer";
    return "nav_subtopic_edit";
}

string editSubTopicOrder(){

    Umbrella t = TopicController:getTopicForTopicID_singleRecord(subTopicOrderTemp.topicID);
    Topic st = SubTopicController:getSubTopicsForTopicID_singleRecord(subTopicOrderTemp.subTopicID);

    if (t == null || st == null){
        message = "There is no SubTopic Order associated to this Sub-Topic";
        Alerter:alert(message);      
        return null;
    }

    UmbrellaTopicSetupTable subTopicOrder = SubTopicOrderController:getSubTopicOrdersForTopicSubTopic_singleRecord(t, st);

    if (subTopicOrder == null){
        message = "There is no SubTopic Order associated to this Sub-Topic";
        Alerter:alert(message);      
        return null;
    }

    SubTopicOrderEdit:subTopicOrder = subTopicOrder;
    SubTopicOrderEdit:nav_return = "nav_content_viewer";
    return "nav_topic_link_subtopic";
}



string editSequenceOrder(){
    SequenceOrderEdit:sequenceOrder = sequenceOrder;
    SequenceOrderEdit:nav_return = "nav_content_viewer";
    return "nav_subtopic_link_sequence_edit";
}

string editSequence(){
    SequenceEdit:sequence = sequenceOrder.sequence_sequenceOrder;
    SequenceEdit:nav_return = "nav_content_viewer";
    return "nav_sequence_edit";
}

string editActivity(){
    ActivityEdit:activity = ActivityController:getActivityFromActivityID(activityOrderTemp.activity_id);
    ActivityEdit:nav_return = "nav_content_viewer";
    return "nav_activity_edit";
}

string editActivityOrder(){

    activityOrder = ActivityOrderController:getActivityOrderFromActivityOrderTemp(activityOrderTemp);

    ActivityOrderEdit:activityOrder = activityOrder;
    ActivityOrderEdit:nav_return = "nav_content_viewer";
    return "nav_activity_order_edit";
}

string editMessage(){
    MessageEdit:o_message = messageOrder.patternMessageText_Message;
    MessageEdit:nav_return = "nav_content_viewer";
    return "nav_message_edit";
}

string editMessageOrder(){
    MessageOrderEdit:messageOrder = messageOrder;
    MessageOrderEdit:nav_return = "nav_content_viewer";
    return "nav_message_order_edit";
}
