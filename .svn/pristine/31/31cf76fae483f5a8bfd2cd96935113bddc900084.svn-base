unit GroupFilter;

Client[] users;

ClientGroup group;
Umbrella topic;
Topic subTopic;
Topic[] subTopics;
ChannelKeyObject cko;

int userCount;

string message;

string refresh;

void init(){

	if (refresh == null || refresh == "yes"){
		resetVars();
		subTopics = SubTopicController:getAllSubTopics();
	} else {
		refresh = "yes";
		applyFilter();
	}

}

void removeFilter(){
	resetVars();
	init();
}

void applyFilter(){

	users.clear();

	if (topic != null){
        subTopics = SubTopicController:getSubTopicsForTopic(topic);
    } else {
    	subTopics = SubTopicController:getAllSubTopics();
    }

	Client[] usersForGroup;	
	if (group != null){
		usersForGroup = UserController:getAssociatedClientsForGroup(group);
		users = usersForGroup;
	}

	Client[] usersForTopic;	
	if (topic != null){
		usersForTopic = UserController:getClientsActiveForTopic(topic);
		if (users.length() >= 1){
			users = UserController:getRecordsInBothCollections(users, usersForTopic);	
		} else {
			users = usersForTopic;
		}
	}

	Client[] usersForSubTopic;	
	if (subTopic != null){
		usersForSubTopic = UserController:getClientsActiveForSubTopic(subTopic);
		
		if (users.length() >= 1){
			users = UserController:getRecordsInBothCollections(users, usersForSubTopic);
		} else {
			users = usersForSubTopic;
		}
		
	}

	Client[] usersForChannel;	
	if (cko != null){
		usersForChannel = UserController:getClientsActiveForChannel(cko);

		// string msg = String:concat("Found :", usersForChannel.length(), " users for channel", cko.patternChannelDescription);
  //       Logger:log(msg);

		if (users.length() >= 1){
			users = UserController:getRecordsInBothCollections(users, usersForChannel);
		} else {
			users = usersForChannel;
		}
	}

	userCount = users.length();
}

void resetVars(){
	group = null;
	topic = null;
	subTopic = null;
	cko = null;
	userCount = 0;
	message = "";
} 

string viewResults(){

	if (hasSelectionBeenMade() == false){
		message = "Please select categories to filter on";
        Alerter:alert(message);
        return null;
	}

	applyFilter();

	GroupFilterResults:users = users;
	GroupFilterResults:group = group;
	GroupFilterResults:topic = topic;
	GroupFilterResults:subTopic = subTopic;
	GroupFilterResults:cko = cko;
	return navigate("nav_group_filter_results");
}

string navigate(string location){
	resetVars();
	return location;
}

bool hasSelectionBeenMade(){
	if (group == null && topic == null && subTopic == null && cko == null){
		return false;
	}
	return true;
}