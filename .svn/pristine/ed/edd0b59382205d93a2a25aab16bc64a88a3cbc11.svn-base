unit uMonitoring;

/* ************************************************* */
/* ************************************************* */

ScheduleURL[]  fGetAllScheduleURL(){
    return ScheduleURL:equals(status,1);
}

ScheduleURL[] fGetAllScheduleURLFullList(){
    return ScheduleURL:all();
}

/* ************************************************* */
/* ************************************************* */

int fCountIssues(){
    ScheduleURL[] sus = fGetAllScheduleURL();
    PatternHistory[] phs = fGetAllPendingPatternHistorys();
    ClientSMSQueue[] cqs = fGetAllPendingSMSQueue();
    int i = (sus.length() + phs.length() + cqs.length());
    return i;
}

/* ************************************************* */
/* ************************************************* */

AllSMSLog[] fGetLast10SMSLogs(){
    AllSMSLog[] asd; AllSMSLog a; int maxi; int i; int mc = 4; asd.clear();
    
    AllSMSLog[] as1 = AllSMSLog:equals(direction,"MT");  maxi = as1.length();
    as1.sortDesc("dateTimeStamp");
    for(i = 0; i < maxi; i++){
        a = as1.get(i);
        asd.append(a);
        if (i>=mc){i = maxi;}
    }
    
    AllSMSLog[] as2 = AllSMSLog:equals(direction,"MO");  maxi = as2.length();
    as2.sortDesc("dateTimeStamp");
    
    for(i = 0; i < maxi; i++){
        a = as2.get(i);
        if(fGetKey(a.messageText) == "*done*"){
            asd.append(a);
            if (i>=mc){i = maxi;}
        }
    }
    
    for(i = 0; i < maxi; i++){
        a = as2.get(i);
        if(fGetKey(a.messageText) != "*done*"){
            asd.append(a);
            if (i>=mc){i = maxi;}
        }
        
    }
    
    return asd;
    
}

string fGetKey(string s){
    int maxi = String:length(s);
    if (maxi<6){
        return s;
    } else {
        return String:substring(s,0,5);
    }
}

/* ************************************************* */
/* ************************************************* */

ClientSMSQueue[] fGetAllPendingSMSQueue(){

    datetime d = Mez:now(); d = Date:addSeconds(d, -300); ClientSMSQueue cq; ClientSMSQueue[] cqsd;
    ClientSMSQueue[] cqs = ClientSMSQueue:all(); int maxi = cqs.length();
    
    if (maxi>0){
        cqs.sortAsc("smsDateTime");
        for(int i = 0; i<maxi; i++){
            cq = cqs.get(i);
            if(cq.smsDateTime <= d){
                cqsd.append(cq);
            } else {
                return cqsd;
            }
        }
    }
    
    return cqsd;
    
}

void fSendBulkProgressMessage(){
    PatternHistory[] phsd = fCycleAllPendingPatternHistorys(1);
    return null;
}
    
/* ************************************************* */
/* ************************************************* */

PatternHistory[] fCycleAllPendingPatternHistorys(int code){
    int sc = BLUnits:fGetConfigSettingInt("PendingActivityDelay");
    datetime d = Mez:now(); d = Date:addSeconds(d, sc); PatternHistory ph; PatternHistory[] phsd;
    PatternHistory[] phs = PatternHistory:equals(statusID, 1); int maxi = phs.length();
    Client c;
    
    if (maxi>0){
        phs.sortAsc("startDate");
        for(int i = 0; i<maxi; i++){
            ph = phs.get(i);
            if(ph.startDate <= d){
                phsd.append(ph);
                if(code==1){
                    c = ph.client_patternHistory;
                    if(c!=null){
                        uGetCurrentSchedule:fsmsCHWProgressTextExec(c);
                    }
                }
            } else {
                return phsd;
            }
        }
    }
    
    return phsd;
}

/* ************************************************* */
/* ************************************************* */

PatternHistory[] fGetAllPendingPatternHistorys(){
    PatternHistory[] phsd = fCycleAllPendingPatternHistorys(0);
    return phsd;
}