unit ClientList;

Client client;
Client viewClient;
Client editClient;
Client deleteClient;
bool bEditClient;
bool bDeleteClient;
string cGroup;

LanguageKeyObject languageKey;

//Roles
LearningManager lManager;
Cho cho ;
Chew chew;
Chw chw;

void init(){
    client = Client:new();
    client.chatcount = 0;
    bEditClient = false;
    bDeleteClient = false;
    cGroup = "";
}

Client[] getClients(){
    return Client:all();
}

Client fAssignClient(Client c, Client c2){
    c.firstName = c2.firstName;
    c.surname = c2.surname;
    c.nickname = c2.nickname;
    c.mobileNumber = c2.mobileNumber;
    c.gender = c2.gender;
    c.client_LanguageKey = c2.client_LanguageKey;
    c.chatcount = c2.chatcount;
    c.roleID = c2.roleID;
    return c;
}

string clientEdit(){
    bEditClient = true;
    client = fAssignClient(client, editClient);
    string st = ClientGroupList:getGroupNameForClient(editClient); if(st!=null){ cGroup = st; } else { cGroup = ""; }
    languageKey = client.client_LanguageKey;
    return null;
}

string clientRemove(){
    if(deleteClient != null){
        uIVRIntegration:fDeleteIVRClient(deleteClient);
        uResetUsers:fReactivateClient(deleteClient);
        Client:delete(deleteClient);
        init();
    }
    return null;
}

/* ************************************************* */
/* ************************************************* */

string clientViewSummary (){
    ClientGroup cg = ClientGroupList:getGroupForClient(viewClient);
    ClientSummaryView:fSetVariables(cg, viewClient);
    return "ClientSummaryView";
}

/* ************************************************* */
/* ************************************************* */

void fClearGroupChat(){
    Client[] cs = Client:all(); Client c; int maxi = cs.length();
    if (maxi>0){
        for(int i = 0; i<maxi; i++){
            c = cs.get(i);
            c.chatcount = 0;
            c.save();
        }
    }
}

/* ************************************************* */
/* ************************************************* */

bool fIsSameClient(Client c2){
    if(bEditClient==false){
        return false;
    } else {
        if(c2.mobileNumber == editClient.mobileNumber && c2.nickname == editClient.nickname){
            return true;
        } else {
            return false;
        }
    }
}

/* ************************************************* */
/* ************************************************* */

string validateClientObject(string s, int code, Client c){

    Client[] cs; Client c2; string sr = "";
    if (code==1){ cs = Client:equals(mobileNumber, s); } 
    else if (code == 2){ cs = Client:equals(nickname, s); }
   
    if(cs==null){ 
        sr = "OK"; 
    } else if(cs.length()==0){ 
        sr = "OK"; 
    } else if(cs.length()>1){  
        sr = "DUPL";
    } else if(cs.length()==1){
        c2 = cs.get(0);
        if(fIsSameClient(c2) == true){
            sr = "OK";
        } else {
            sr = "DUPL";
        }
    }
    return sr;
}

/* ************************************************* */
/* ************************************************* */

string saveClientCheckUnique(Client c){
    //Client c; Client c2; JP HEL-178
    string r1 = ""; string r2 = "";
    
    if(c.nickname==null){ c.nickname = ""; }  
    c.nickname = String:lower(c.nickname);
    
    r1 = validateClientObject(c.mobileNumber, 1, c);
    r2 = validateClientObject(c.nickname, 2, c);

    if (r1 == "OK" && r2 == "OK"){ 
        return "OK"; 
    } else {
        return "NOTOK";
    }
    
}

/* ************************************************* */
/* ************************************************* */

Client addManagers(Client c){
        lManager= LearningManager:user();
        cho = Cho:user();
        chew = Chew:user();
        chw = Chw:user();
         	
        if(lManager != null) {
        	c.roleID = 1; c.client_LearningManager = lManager;
        } else if(cho != null) {
        	c.roleID = 1; c.client_Cho = cho;
        } else if(chew != null) {
        	c.roleID = 1; c.client_Chew = chew;
        }else if(chw != null ) {
        	c.roleID = 1; c.client_Chw = chw;
        }
    return c;
}

/* ************************************************* */
/* ************************************************* */

string saveClient(){
    
    string scu = saveClientCheckUnique(client);
    
    if(scu == "OK"){
            if(bEditClient==true){
                editClient = fAssignClient(editClient, client);
                editClient.registered = Mez:now();
                editClient.client_LanguageKey = languageKey;
                editClient.save();
                uIVRIntegration:fScheduleIVRLanguage (editClient, languageKey.languageID);
            } else {
                client = addManagers(client);
            	client.registered = Mez:now();
                client.client_LanguageKey = languageKey;
                client.save();
                uIVRIntegration:fScheduleIVRLanguage (client, languageKey.languageID);
            }
            init();
            Mez:alert("client.clientList.saveClientAlert");
        } else {
        Mez:alert("client.clientList.saveClientAlertFailed");
    }
    return null;
}

/* ************************************************* */
/* ************************************************* */