unit SequenceOrderController;

string msg;

SequenceOrder createSequenceOrder(string subTopic, string sequence, int o){

    Topic[] stArr = Topic:equals(topicID, subTopic);
    Sequence[] sArr = Sequence:equals(sequenceID, sequence);

    if (stArr.length() != 1){

    	if (stArr.length() > 1){
    		string msg = String:concat("WARNING: There is a duplication with for SubTopicID=", subTopic);
            Logger:log(msg);
            Alerter:alert(msg);
    	} else {
    		msg = String:concat("There was no SubTopic found for SubTopicID: ", subTopic);
    		Logger:log(msg);
    		Alerter:alert(msg);
    		return null;
    	}
    } 

    if (sArr.length() != 1){

    	if (sArr.length() > 1){
    		msg = String:concat("There is duplication for the SequenceID:", sequence);
    		Logger:log(msg);
    		Alerter:alert(msg);
    	} else {
    		msg = String:concat("There was no Sequence found for SequenceID: ", sequence);
    		Logger:log(msg);
    		Alerter:alert(msg);
    		return null;
    	}

    }

    /* ************ */
    Topic t = stArr.get(0);
    Sequence s = sArr.get(0);
    SequenceOrder[] check = SequenceOrder:and(relationshipIn(topic_sequenceOrder, t),relationshipIn(sequence_sequenceOrder,s)); 
    if(check.length()>0) { return null; }
    /* ************ */

    SequenceOrder so = SequenceOrder:new();
    so.topic_sequenceOrder = t;
    so.sequence_sequenceOrder = s;
    so.sequenceOrder = o;
    so.save();

    msg = String:concat("SequenceOrder saved with SubTopic:", t.topicID, " and sequence: ", s.sequenceID);
    Logger:log(msg);
    Alerter:alert(msg);

    return so;
}

SequenceOrder[] getAllSequenceOrders() {
	return SequenceOrder:all();
}

SequenceOrder[] getSequenceOrdersForSequence(Sequence s) {
	SequenceOrder[] arr;
	if (s == null){
		arr = getAllSequenceOrders();
	} else {
		arr = SequenceOrder:relationshipIn(sequence_sequenceOrder, s);
	}
	return arr;
}

/*
 * Remember:
 * HELP: SubTopic = Model: Topic
 */
SequenceOrder[] getSequenceOrdersForSubTopic(Topic t) {
	SequenceOrder[] arr;
	if (t == null){
		arr = getAllSequenceOrders();
	} else {
		arr = SequenceOrder:relationshipIn(topic_sequenceOrder, t);
	}
	return arr;
}


int getSequenceOrderForSequenceSubTopic(Sequence s, Topic subTopic){
	
	SequenceOrder[] arr;
	SequenceOrder sequenceOrder;

	if (s == null || subTopic == null){
		return 0;
	}

	arr = SequenceOrder:and(
		relationshipIn(topic_sequenceOrder, subTopic),
		relationshipIn(sequence_sequenceOrder, s)
	);

	if (arr == null){
		return 0;
	}

	if (arr.length() < 1){
		return 0;
	}

    if (arr.length() > 1){
        string msg = String:concat("WARNING: There is a duplication with for SubTopic=", subTopic.topicID, " Sequence=", s.sequenceID);
        Logger:log(msg);
        Alerter:alert(msg);
    }

	sequenceOrder = arr.get(0);

	if (sequenceOrder == null){
		return 0;
	}

	return sequenceOrder.sequenceOrder;

}

bool isSequenceOrderAssignedToSubTopic(Topic st, int orderNumber){
    SequenceOrder[] arr;

    if (st == null || orderNumber == null){
        return false;
    }

    arr = SequenceOrder:and(
        relationshipIn(topic_sequenceOrder, st),
        equals(sequenceOrder, orderNumber)
    );

    if (arr.length() <= 0){
        return false;
    }

    return true;
}