unit IncomingSMSList;

bool checkresend;
Client vclient;
AllSMSLog vAdHocSMS;


/* ******************************************************* */
/* ******************************************************* */

void init(){
    vclient = Client:new();
    vAdHocSMS = AllSMSLog:new();
    checkresend = false;
}

/* ******************************************************* */

void fResendFromDate(){
    if(checkresend==false){
        checkresend=true;
        Mez:alert("incomingSMS.ResendDateWarning");
    } else {
        uIncomingSMSForward:fResendFromDateExec(vAdHocSMS.dateTimeStamp);
        checkresend=false;
    }
}

/* ******************************************************* */

string sendAdHocSMSIN(){
    if(vclient!=null&&vAdHocSMS!=null){
        RecievedSMSHandler:receiveIncomingSms(vclient.mobileNumber, vAdHocSMS.messageText);
        vAdHocSMS = AllSMSLog:new();
        Mez:alert("AllSMSLog.sentconfirmationIN");
    }
}

string sendAdHocSMSOUT(){
    BLUnits:SendSMSToClient(vclient, vAdHocSMS.messageText);
    Mez:alert("AllSMSLog.sentconfirmationOUT");
}

IncomingSMS[] getAllIncomingSMS() {
    return IncomingSMS:all();
}

/* ******************************************************* */
/* ******************************************************* */

   bool fIsPlausible(Client c, string s1){
        bool r = true; 

        if(BLUnits:fGetConfigSettingInt("DoNotSendSMS") == 1){ return r; }

        datetime cd1 = Date:addSeconds(Mez:now(), -5);
        datetime cd2 = Date:addSeconds(Mez:now(), -30);
        IncomingSMS[] iSMSs = IncomingSMS:relationshipIn(incomingSMS_clientNumber, c); IncomingSMS iSMS; 
        
        if(iSMSs.length()>0){
            iSMSs.sortDesc("dateTimeStamp"); iSMS = iSMSs.first(); 
            datetime d3 = iSMS.dateTimeStamp; string s2 = iSMS.smsText;                                 
            if(d3>cd1 || (d3>cd2&&s1==s2)){                                                                 // If within 5 seconds or content is the same and within 30 seconds
                r = false;
            }
        }
        return r;
    }

    /* ******************************************************* */

IncomingSMS fInsertIncomingSMS (Client c, string s, int status){
    
    bool isPlausible = fIsPlausible(c, s); IncomingSMS iSMS = IncomingSMS:new();

    if(isPlausible == true){
        iSMS.status = status;    
        iSMS.smsText = s;
        iSMS.smsTextClean = s;
        iSMS.dateTimeStamp = Mez:now();
        iSMS.incomingSMS_clientNumber = c;
        iSMS.save();
        return iSMS;
    } else {
        return null;
    }
}

/* ******************************************************* */
/* ******************************************************* */

string fGetFirstLetterKey(string s, int i){
    string sr = "";
    if(s != null){
        int ls = String:length(s);
        if (ls>=i){
            i = i - 1;
            sr = String:lower(String:substring(s,0,i));
        }
    }
    return sr;
}

/* ******************************************************* */
/* ******************************************************* */

bool fEx (string sRegEx, string sEv, int iin, int maxiin){
    
    string[] ss = String:split(sRegEx,";"); int maxi = ss.length(); 
    sEv = String:lower(sEv); string sComp; int iof; bool bFirstorLast = false;

    if( (iin==0)||((iin+1)==maxiin) ){ bFirstorLast = true; }

    if(maxi>0){
        for(int i = 0; i < maxi; i++){
            sComp = String:lower(ss.get(i));                                // Get the comparison string based on it's split by ";"
            iof = String:indexOf(sComp,sEv);                                // See if the string to be evaluated, sEv, exists in the Regex string

            if(i==0){                                                       // For the first array entry, include all that matches
                if(sComp == "-"||sEv == ";"){                               // If the comparison value = "-" then include all, otherwise at least always include ";"
                    return false;
                } else {
                    if ( iof==null || (sEv==" "&&bFirstorLast==true) ) {    // Exclude sEv if it does not occur in the Regex string or if it is a leading or a trailing space
                        return true;
                    } else {
                        return false;
                    }
                }
            } else {                                                        
                if ( iof!=null ) {                                          // For subsequent array entries, exclude all that do occur in the Regex
                    return true;
                } else {
                    return false;
                }
            }
        }
    }
    return false;
}

/* ******************************************************* */
/* ******************************************************* */

string fFirstClean(string smsText){

    string rt1 = smsText; string rt2 = "";

    string  sFirstCharRemove = "* ";
            sFirstCharRemove = String:concat(sFirstCharRemove,String:lower(BLUnits:fGetConfigSettingStr("FirstCharRemove")));

    int maxi = String:length(rt1); string s = "";

    //Mez:log(String:concat("fFirstClean pass 1: '",rt1, "' | as compared with | '", sFirstCharRemove, "' | (", maxi, ")"));

    if (maxi>0){
        for(int i=0; i<maxi; i++){
            s = String:substring(rt1,i,i);
            if (i>6){
                rt2 = String:concat(rt2, s);
            } else if (fEx(sFirstCharRemove,s,i,maxi) == false) {
                rt2 = String:concat(rt2, s);
           }
        }
    }

    if(String:length(rt2)==0){ rt2 = "-"; }

    return rt2;
    
}

/* ******************************************************* */
/* ******************************************************* */

void assignIncomingSMS(Client client, string smsText) {

    JumpTo jT = null;
    Pattern p; 
    //string pChannel = "";
    int channelID;
    smsText = fFirstClean(smsText);
    IncomingSMS iSMS = null;
    bool bStoponStop=false; if(BLUnits:fGetConfigSettingInt("StoponStop")==1){bStoponStop = true;}

    if(client == null) {
        iSMS = fInsertIncomingSMS (client, smsText, 0);
    
    } else if(smsText == "") {
        fInsertIncomingSMS (client, smsText, 0);
        // JP Remove assignment 2015-02-18 HEL-178
        // iSMS = FixMessageList:sendFixedMessage(client, "1" , "");
        FixMessageList:sendFixedMessage(client, "1" , "");

    } else {

            jT = JumpToLogic:fGetJumpToObjectOptions(smsText, null, client, 0);

            if(jT!=null){
                NewFlowControllers:fJumpToLink(client, "UthenT", jT);
            } else if((fGetFirstLetterKey(smsText, 4) == "stop") && (bStoponStop==true)){
                TopicUserSetupList:fEndClientStoponStop(client);
            } else if(fGetFirstLetterKey(smsText, 4) == "chew") {
                uIncomingSMSForward:fsmsCHEW(client, smsText);
            } else if(fGetFirstLetterKey(smsText, 4) == "chat") {
                uIncomingSMSForward:fChatMessage(client, smsText);
            } else if(fGetFirstLetterKey(smsText, 5) == "group"||fGetFirstLetterKey(smsText, 7) == "kikundi") {
                uIncomingSMSForward:fsmsToAllCHWSOfGroup(client, smsText);
            } else if(fGetFirstLetterKey(smsText, 6) == "*done*") {
                SequenceList:fEndUnknownPattern(client, smsText);
            } else if(fGetFirstLetterKey(smsText, 6) == "status") {
                uGetCurrentSchedule:fSendStatusSummary(client);
            } else if(fGetFirstLetterKey(smsText, 6) == "search"||fGetFirstLetterKey(smsText, 6) == "tafuta") {
                NewFlowControllers:fSearchTopic(client, smsText);
            } else if(fGetFirstLetterKey(smsText, 6) == "rewind"||fGetFirstLetterKey(smsText, 10) == "viringisha") {
                NewFlowControllers:fRewindToSequence(client);
            } else if(fGetFirstLetterKey(smsText, 7) == "progres"||fGetFirstLetterKey(smsText, 9) == "kuendelea"||fGetFirstLetterKey(smsText, 7) == "endelea") {
                uIncomingSMSForward:fsmsCHWProgressText(client, smsText);
            } else {

                iSMS = fInsertIncomingSMS (client, smsText, 1);
                if(iSMS!=null){
                    p = uGetCurrentSchedule:fGetCurrentPattern(client);
                    
                    if(p != null){ 
                        /* JP HEL-178 */
                        channelID = ActivityController:getActivityChannelKeyID(p);

                        if(channelID == 1){
                            evaluateMOSMS(client);
                        } else {
                            uIncomingSMSForward:fSendErrorReturn(client, "", 14);
                        }
                    }
                    
                }
                
            }
    }
    return null;
}

/* ********************************************************** */
/* ********************************************************** */

void evaluateMOSMS(Client c) {

    CurrentSMSPattern cs =  c.currentSMSPattern_clientID; if(cs == null){Mez:log("evaluateMOSMS... currentSMSPatterns == null...."); return null;}
    Pattern p = cs.currentSMSPattern_PatternID; if(p == null) {Mez:log("evaluateMOSMS... currentSMSPatterns-Pattern == null...."); return null;}
    
    PatternType pT = fGetPatternType(p);
    
    if(pT.RespValQO == 1) {

        bool vFl = evaluateValidFirstLetter(c, p, cs, pT);
        if(vFl == true){
            EvaluateUserResponseUnit:fEvaluateUserResponse(c, p, cs, pT);
        }

    } else if(pT.RespValQO == 0) {

        EvaluateUserResponseUnit:fEvaluateUserResponse(c, p, cs, pT);
        
    }
    
}

/* ********************************************************** */
/* ********************************************************** */

PatternType fGetPatternType(Pattern p){
    PatternTypeTable ptt = p.patternTypeTable_Pattern;
    return ptt.patternTypeTable_PatternType;
}

/* ********************************************************** */
/* ********************************************************** */

bool evaluateValidFirstLetter(Client c, Pattern p, CurrentSMSPattern cs, PatternType ptt) {

    Message[] ms = cs.currentSMSPattern_MessageSetup; Message m;
    if(ms.length() != 0) { ms.sortAsc("dateTimeStamp"); m = ms.last(); }
    
    IncomingSMS[] iss = IncomingSMS:relationshipIn(incomingSMS_clientNumber, c);
    IncomingSMS is;
    
    if(iss.length() > 0) {
        iss.sortAsc("dateTimeStamp"); is = iss.last();
        
        string tL = BLUnits:getFirstLetter(is.smsText);
        string vFL = String:lower(cs.validFirstLetter);
        string ls = String:concat("evaluateValidFirstLetter... Comparing : ", tL, " with ", vFL); Mez:log(ls);
        
        if(vFL == tL) { 
            
            is.smsTextClean = BLUnits:getSMSTextClean(is.smsText); is.save(); return true;
            
        } else {
            FixMessageList:sendFixedMessage(c, "1", vFL); return false;
        }   
    } else {
        return false;
    }
}

