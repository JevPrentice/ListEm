-- Function: ivr.http_query(text, integer, text, boolean, boolean, boolean, boolean, integer, integer, text)

-- DROP FUNCTION ivr.http_query(text, integer, text, boolean, boolean, boolean, boolean, integer, integer, text);

CREATE OR REPLACE FUNCTION ivr.http_query(quser_id text, qlanguage_id integer, qactivity_id text, qpass_fail_a boolean, qpass_fail_b boolean, qpass_fail_c boolean, qpass_fail_d boolean, qactivity_score integer, qinstruction_code integer, qcommentstr text)
  RETURNS xml AS
$BODY$

/*
	**************************************************
	
	SELECT * FROM ivr.http_query ('254712081891',0,'',FALSE,FALSE,FALSE,FALSE,0,1,'1');

	**************************************************

	SELECT * FROM ivr.http_query_unittest ();
	
	SELECT * FROM ivr.call_history WHERE user_id = 'test' ORDER BY datetimestamp DESC;

	DELETE FROM ivr.call_history WHERE user_id = 'test';

	**************************************************

	SELECT * FROM ivr.call_history ORDER BY datetimestamp desc LIMIT 10;
	
	SELECT * FROM ivr.http_query ( 'test', 1,
					'',FALSE,FALSE,FALSE,FALSE,0,	
					1,	
					'testing');

*/

/*

Variable VXML Update
- Add new config value : INSERT INTO ivr.config_table (configvalue, configdescription) VALUES (1, 'configvarvxml');

*/

/* *********************************************************  */
/* 		Variable declaration section 		        */
/* *********************************************************  */

DECLARE 
	maxlenstr int := 0; key1 text; config1 int; configvarvxml int;
	Lstartvar text; Lendvar text;  Ltempvar1 text := '';  Ltempvar2 text := '';  LtempXML xml;
	
	Lactivity_id int;  Lactivity_id_next int; Lactivity_order int;
	
	Lactivity_topic_id text := ''; Lstractivity text := '';  Lstractivity_next text;  Lstractivity_3 text;  Lstractivity_10 text;

	Lstractivity_usereturn text := '';  Lactivity_id_usereturn int := 0; 

	Lisnextivr int := -1; Lisnextivrselect int := -1; Lnextivrphase2 text = ''; Livrcommentstr text = '';

	Llanguage_id int;  Lcallstatus_id int; Llastic int; Llastic_cancelled int;
	dLast3 timestamp without time zone;
	LupdateTime timestamp without time zone;

	vUUID uuid;

	vOrderUUID uuid;

/* *********************************************************  */
/* *********************************************************  */

/* *************************************************************************  */
/*
	qinstruction_code = 0 -- first call, set language preference
	qinstruction_code = 1 -- get language preference and next activity
	qinstruction_code = 2 -- set reporting parameters per activity
	qinstruction_code = 3 -- set reporting parameters per activity and increment activity
	qinstruction_code = 9 -- do not offer user any further activities through IVR
	qinstruction_code = 10 -- helium scheduling function updating the SQL server as to the next available activity
	qinstruction_code = 11 -- helium scheduling function updating the SQL server to cancel an avialable activity

	Lstractivity_next
*/
/* *************************************************************************  */

BEGIN
	
/* *********************************************************  */
/* Updating config values and parameters used in the function */
/* *********************************************************  */

	SELECT configvalue INTO config1 FROM ivr.config_table WHERE configdescription = 'heliumscheduled';
	SELECT configvalue INTO configvarvxml FROM ivr.config_table WHERE configdescription = 'configvarvxml';
	
	maxlenstr = (SELECT length((quser_id::text)));
	Lcallstatus_id = 1;
	Lstartvar = '<Response>'; Lendvar = '</Response>';
	Lstractivity = qactivity_id;

/* *********************************************************  */
/* *********************************************************  */

/* *********************************************************  */
/* Prevent reporting from changing the language or schedule   */
/* *********************************************************  */

	IF (lower(Lstractivity) = 'report') THEN
		qinstruction_code = 1;
	END IF;

/* *********************************************************  */
/* *********************************************************  */

/* *********************************************************  */
/* ADD or GET ordering information to ordering table   */
/* *********************************************************  */

	IF(qinstruction_code=10) THEN

		Livrcommentstr = qcommentstr;

		SELECT uuid INTO vOrderUUID FROM ivr.pattern_order_table_phase2 WHERE ((pattern_id=Lstractivity) AND (isnextivr=qactivity_score) AND (user_id=quser_id) AND (commenttext=Livrcommentstr));

			IF(vOrderUUID IS NULL) THEN

				IF((Livrcommentstr='IVRUpdateSchedule')OR(qactivity_score=0)) THEN Livrcommentstr=''; END IF;
			
				SELECT uuid INTO vOrderUUID FROM ivr.pattern_order_table_phase2 WHERE ((pattern_id=Lstractivity) AND (user_id=quser_id));

				Livrcommentstr = replace(Livrcommentstr,'STSW','STE'); /* Language hack to also translate activity following current activity */

				IF (vOrderUUID is null) THEN
					INSERT INTO ivr.pattern_order_table_phase2 (uuid, datetimestamp, pattern_id, isnextivr, commenttext, user_id)
					VALUES (ivr.uuid_generate_v4(), now(), Lstractivity, qactivity_score, Livrcommentstr, quser_id);
				ELSE
					UPDATE ivr.pattern_order_table_phase2
					SET datetimestamp = now(), isnextivr = qactivity_score, commenttext = Livrcommentstr
					WHERE uuid = vOrderUUID;
 				END IF; 
 				
			END IF;
		
	END IF;

/* *********************************************************  */
/* *********************************************************  */

/* ************************************************************************  */
/* Get the pattern_order from the pattern_order table... if there is a match */
/* ************************************************************************  */

	/*SELECT pattern_order, topic_id INTO Lactivity_id, Lactivity_topic_id
	  FROM ivr.pattern_order_table WHERE pattern_id = Lstractivity; */
	IF (Lactivity_id is null) THEN Lactivity_id = 0; Lactivity_topic_id = ''; END IF;

/* ************************************************************************* */
/* ************************************************************************* */
	
/* *************************************************************************  */
/* Replacing the "tel:" at start of phone number that was an original problem */
/* *************************************************************************  */

	IF (maxlenstr>5) THEN
		quser_id = replace(quser_id,'''',''); quser_id = replace(quser_id,'"','');
		key1 = left(quser_id,4);
		IF (key1='tel:') THEN quser_id = ('254'||substring(quser_id,5,maxlenstr)); END IF;
	END IF;

/* *************************************************************************  */
/* *************************************************************************  */

/* *************************************************************************  */
/* Either set the language_id (instruction_code = 0) or retrieve it */
/* *************************************************************************  */

	IF ((qinstruction_code = 0) and (qLanguage_ID <> 0))
	THEN
		Llanguage_ID = qLanguage_ID;
	ELSE
		SELECT language_id INTO Llanguage_id
		FROM ivr.call_history 
		WHERE 	(user_id = quser_id) and 
			(language_id is not null) and
			(datetimestamp =
				(	SELECT max(datetimestamp) 
					FROM ivr.call_history 
					WHERE ((user_id = quser_id) and (language_id is not null)) ));
	END IF;

	IF ((Llanguage_ID = 0) or (Llanguage_ID is null) or (qinstruction_code = 9)) THEN Llanguage_ID = 1; END IF;

/* *************************************************************************  */
/* *************************************************************************  */

/* ************************************************************************************************************************* */
/* Get last completed activity (i_c=3) and last scheduled activity (i_c=10) */
/* ************************************************************************************************************************* */

	IF (qinstruction_code = 3) THEN 
	
		Lstractivity_3 = Lstractivity;
		dLast3 = now();

	ELSE
	
		SELECT max(datetimestamp) INTO dLast3
		FROM ivr.call_history 
		WHERE ( (user_id = quser_id) and 
			(Lstractivity is not null) and
			(instruction_code = 3) );
			
		IF dLast3 is null THEN dLast3 = '1900/01/01'; END IF;
			
	END IF;

/* ********************************************************* */

	SELECT Q.uuid INTO vUUID
	FROM (
		SELECT *
		FROM ivr.call_history 
		WHERE ( (user_id = quser_id) and 
			(stractivityid is not null) and
			(stractivityid <> 'report') and
			(instruction_code = 10)
			)
	) Q
	ORDER BY Q.datetimestamp desc, Q.stractivityid desc
	LIMIT 1;

	/* ********************************************************* */
	/* ********************************************************* */

	IF (vUUID is not null) THEN
		SELECT stractivityid INTO Lstractivity_10
		FROM ivr.call_history 
		WHERE (uuid = vUUID);
	ELSE
		Lstractivity_10 = null;
	END IF;
					
/* **************************************************************************************** */
/* **************************************************************************************** */

/* ************************************************************************************************** */
/* Select the next IVR activity available per user per he schedule (i_c=10) or sequentially (i_c = 3) */
/* ************************************************************************************************** */

	IF (	(qinstruction_code = 3) OR 
		((qinstruction_code = 1) AND (config1 = 0))	) THEN

		/* Return Next Available Activity - Only on instruction_code = 3 */
		SELECT min(pattern_order) INTO Lactivity_order
			 FROM ivr.pattern_order_table 
			 WHERE ((pattern_order > Lactivity_id) and (pattern_channel_id = 3) and (topic_id = Lactivity_topic_id));

		/* Return Next Available Activity - Only on instruction_code = 3 */
		SELECT pattern_id, pattern_order INTO Lstractivity_next, Lactivity_id_next
			FROM ivr.pattern_order_table
			WHERE pattern_order = Lactivity_order;

		/* T0S0A0 if the next activity is not an IVR activity */
		IF ( 	((Lactivity_id_next - Lactivity_id) <> 1) 
			OR (Lactivity_id_next = 0)
			OR (Lactivity_id_next = null)
		   ) THEN 			
			Lstractivity_next = 'T0S0A0'; Lactivity_id_next = 0; END IF;

		/* Phase 2 method - getting it from helium */
		
		SELECT isnextivr, commenttext INTO Lisnextivrselect, Lnextivrphase2
		FROM ivr.pattern_order_table_phase2
		WHERE ((pattern_id=Lstractivity) AND (user_id=quser_id));
		IF(Lnextivrphase2 IS NULL) THEN Lnextivrphase2 = ''; END IF;

		IF(Lisnextivrselect IS NOT NULL) THEN 
			IF(Lisnextivrselect>=0) THEN
				Lisnextivr = Lisnextivrselect;
			END IF;
		END IF;
		
		IF((Lisnextivr=1) AND (Lnextivrphase2<>'')) THEN
			Lactivity_id_next = 1; 
			Lstractivity_next = Lnextivrphase2;
		END IF;
		
	ELSE

		/* Return Last Scheduled Activity - For all other cases */
		SELECT pattern_id, pattern_order INTO Lstractivity_next, Lactivity_id_next
		FROM ivr.pattern_order_table
		WHERE pattern_id = Lstractivity_10;

	END IF;

/* ************************************************************************************************** */
/* ************************************************************************************************** */

/* ************************************************************************************************** */
/* Check for last update code = 9... therefore client has been deactivated */
/* ************************************************************************************************** */

		SELECT max(instruction_code) INTO Llastic
		FROM ivr.call_history 
		WHERE (user_id = quser_id) 
			and 	(datetimestamp =
					(	SELECT max(datetimestamp) 
						FROM ivr.call_history 
						WHERE 	(user_id = quser_id) and
							(instruction_code = 0 or instruction_code = 9 or instruction_code = 10) )) ;
		IF (Llastic is null) THEN Llastic = 0; END IF;

/* ************************************************************************************************** */
/* ************************************************************************************************** */

/* ************************************************************************************************** */
/* Check to see whether the last scheduled activity has been removed in the interim */
/* ************************************************************************************************** */

		SELECT max(instruction_code) INTO Llastic_cancelled
		FROM ivr.call_history 
		WHERE (user_id = quser_id)
			and	(stractivityid = Lstractivity_10)
			and 	(datetimestamp =
					(	SELECT max(datetimestamp) 
						FROM ivr.call_history 
						WHERE 	(user_id = quser_id) and
							(stractivityid = Lstractivity_10) )) ;
		IF (Llastic_cancelled is null) THEN Llastic_cancelled = 0; END IF;

/* ************************************************************************************************** */
/* ************************************************************************************************** */
		
/* **************************************************************************** */
/* Sanitise the results to avoid nulls or empty values being presented to users */
/* **************************************************************************** */

	IF	((Lstractivity_next is null) and (Lstractivity_10 is not null) and (qinstruction_code <> 3)) THEN
			Lstractivity_next = Lstractivity_10; Lactivity_id_next = -1;
	END IF;
	
	IF	((Lstractivity_next is null) or (Llastic = 9) or (Llastic_cancelled = 11)) THEN
			Lstractivity_next = 'T0S0A0'; Lactivity_id_next = 0;
	END IF;

/* **************************************************************************** */
/* **************************************************************************** */

/* ************************************************************************************************ */
/* Decide on which values to use to populate the XML - ie to return to users */
/* ************************************************************************************************ */

	IF ((qinstruction_code = 1) or (qinstruction_code = 3)) THEN
		Lstractivity_usereturn = Lstractivity_next;
		Lactivity_id_usereturn = Lactivity_id_next;
	ELSE
		Lstractivity_usereturn = Lstractivity;	
		Lactivity_id_usereturn = Lactivity_id;
	END IF;

/* ************************************************************************************************** */
/* ************************************************************************************************** */

/* ****************************************************************** */
/* Build up final XML return, including the default DB call status ID */
/* ****************************************************************** */

	Ltempvar1 = '<user_id>'||(quser_id::text)||'</user_id>';
	Ltempvar1 = Ltempvar1||'<activity_id>'||Lstractivity_usereturn||'</activity_id>';
	Ltempvar1 =  Ltempvar1||'<language_id>'||(Llanguage_id::text)||'</language_id>';
	Ltempvar1 =  Ltempvar1||'<dbstatus_id>'||(Lcallstatus_id::text)||'</dbstatus_id>';
	Ltempvar1 = Lstartvar||Ltempvar1||Lendvar;

	LtempXML = xmlparse(DOCUMENT Ltempvar1);

/* ****************************************************************** */
/* ****************************************************************** */

/* *************************************************** */
/* Determine update time to be written to the database */
/* *************************************************** */

	LupdateTime = now();
	IF (quser_id = 'test') THEN
		IF (qactivity_score=1) THEN qcommentstr = 70::text; END IF;
		LupdateTime  = (SELECT LupdateTime + (qcommentstr||' second')::interval);
	END IF;

/* *************************************************** */
/* *************************************************** */

/* ************************************************************************************************** */
/* Do Update Calls to DB to insert results of query and information that will be returned to the user */
/* ************************************************************************************************** */

	IF ( (qinstruction_code = 0) OR (qinstruction_code = 9) )
	THEN
		INSERT INTO ivr.call_history(
			    uuid, user_id, language_id, instruction_code, commentstr, datetimestamp, xmlstr)
		    VALUES (ivr.uuid_generate_v4(),quser_id, Llanguage_id, qinstruction_code, qcommentstr, LupdateTime, LtempXML);

		GET DIAGNOSTICS Lcallstatus_id = ROW_COUNT;

	ELSIF ( (qinstruction_code = 1) or (qinstruction_code = 10) or (qinstruction_code = 11) )
	THEN
		INSERT INTO ivr.call_history(
			    uuid, user_id, activity_id, stractivityid, activity_score, instruction_code, commentstr, datetimestamp, xmlstr)
		    VALUES (ivr.uuid_generate_v4(), quser_id, Lactivity_id_usereturn, Lstractivity_usereturn, qactivity_score, qinstruction_code, qcommentstr, LupdateTime, LtempXML);

		GET DIAGNOSTICS Lcallstatus_id = ROW_COUNT;
		
	ELSE
		INSERT INTO ivr.call_history(
			    uuid, user_id, activity_id, stractivityid, pass_fail_a, pass_fail_b, 
			    pass_fail_c, pass_fail_d, activity_score, instruction_code, commentstr, datetimestamp, xmlstr)
		    VALUES (ivr.uuid_generate_v4(), quser_id, Lactivity_id, Lstractivity, qpass_fail_a, qpass_fail_b, qpass_fail_c, 
			    qpass_fail_d, qactivity_score, qinstruction_code, qcommentstr, LupdateTime, LtempXML);

		GET DIAGNOSTICS Lcallstatus_id = ROW_COUNT;
			
	END IF;

	/*
	IF ( (qinstruction_code=3) and (Lstractivity_usereturn <> 'T0S0A0') ) THEN

		qcommentstr = (qcommentstr || ' - Auto by IVR');
		INSERT INTO ivr.call_history(
			    uuid, user_id, activity_id, stractivityid, instruction_code, commentstr, datetimestamp, xmlstr)
		    VALUES (ivr.uuid_generate_v4(), quser_id, Lactivity_id_usereturn, Lstractivity_usereturn, 10, qcommentstr, (SELECT LupdateTime + '1 second'::interval), LtempXML);
		
	END IF;
	*/

/* ************************************************************************************************* */
/* ************************************************************************************************* */
	    
/* ************************************************************************************************** */
/* Build up final XML return, including the DB call status ID */
/* ************************************************************************************************** */

IF (configvarvxml=0) THEN

	Ltempvar1 = '<user_id>'||(quser_id::text)||'</user_id>';
	Ltempvar1 = Ltempvar1||'<activity_id>'||Lstractivity_usereturn||'</activity_id>';
	Ltempvar1 =  Ltempvar1||'<language_id>'||(Llanguage_id::text)||'</language_id>';
	Ltempvar1 =  Ltempvar1||'<dbstatus_id>'||(Lcallstatus_id::text)||'</dbstatus_id>';
	Ltempvar1 = Lstartvar||Ltempvar1||Lendvar;

ELSE

	Ltempvar1 = '<user_id>'||(quser_id::text)||'</user_id>';
	Ltempvar1 = Ltempvar1||'<activity_id>'||Lstractivity_usereturn||'</activity_id>';
	Ltempvar1 =  Ltempvar1||'<file_id>'||Lstractivity_usereturn||'</file_id>';
	Ltempvar1 =  Ltempvar1||'<client_feed>'||('Y'::text)||'</client_feed>';
	Ltempvar1 =  Ltempvar1||'<language_id>'||(Llanguage_id::text)||'</language_id>';
	Ltempvar1 =  Ltempvar1||'<dbstatus_id>'||(Lcallstatus_id::text)||'</dbstatus_id>';
	Ltempvar1 = Lstartvar||Ltempvar1||Lendvar;

END IF;

	LtempXML = xmlparse(DOCUMENT Ltempvar1);

/* ************************************************************************************************* */
/* ************************************************************************************************* */

/* ************************************************************************************************** */
/* Section monitoring input parameters for reporting or updating config table through HTTP middleware */
/* ************************************************************************************************** */

	IF (quser_id = 'report') THEN
		SELECT * FROM ivr.getXmlReport(quser_id, qactivity_id, qinstruction_code) INTO Ltempvar2;
	ELSIF (qactivity_id = 'report') THEN
		SELECT * FROM ivr.getXmlReport(quser_id, qactivity_id, qinstruction_code) INTO Ltempvar2;
	ELSIF (quser_id = 'updateconfig') THEN
		SELECT * FROM ivr.update_config (qactivity_id, qinstruction_code, qcommentstr) INTO Ltempvar2;
	ELSE
		SELECT xmlconcat(LtempXML) INTO Ltempvar2;
	END IF;

/* ************************************************************************************************* */
/* ************************************************************************************************* */

RETURN Ltempvar2;
END;

$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION ivr.http_query(text, integer, text, boolean, boolean, boolean, boolean, integer, integer, text)
  OWNER TO amref_test;
