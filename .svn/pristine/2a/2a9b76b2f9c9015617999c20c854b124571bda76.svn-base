unit UmbrellaModelControllers;

/* *********************************************************************************************************************** */
/* ************************************* SAVING FUNCTION : SUPPLEMENTARY ************************************************* */
/* *********************************************************************************************************************** */

	int fGetMaxOrder(Client c, int o){
		int ro; TopicUserSetup[] tUs; TopicUserSetup tU;

		if(o>=0){
			ro = 0;
		 	tUs = TopicUserSetup:and(relationshipIn(client_topicUserSetup, c), greaterThan(topicOrder, 0)); 
		} else {
			ro = -1000;
			tUs = TopicUserSetup:and(relationshipIn(client_topicUserSetup, c), lessThan(topicOrder, 0));
		}

		if(tUs.length()>0){
			tUs.sortDesc("topicOrder");
			tU = tUs.get(0);
			ro = tU.topicOrder;
		}

		return ro;
	}

	/* ************************************************************************************************ */

	bool fCheckPreviousScheduledExists(Client c, Umbrella u, Topic t, int a){

		TopicUserSetup[] tUs; TopicUserSetup tU; bool bR; int i; int maxi;

		if(a==2){ bR = false; } else if (a==3){ bR = true; }

		if(c==null||(u==null&&t==null)){ return bR; }

		if(u!=null){
			tUs = TopicUserSetup:and(relationshipIn(client_topicUserSetup, c), relationshipIn(topic_topicUserSetup, t), relationshipIn(umbrella_topicUserSetup, u), equals(active, a));
		} else if (t!=null) {
			tUs = TopicUserSetup:and(relationshipIn(client_topicUserSetup, c), relationshipIn(topic_topicUserSetup, t), equals(active, a));
		}

		maxi = tUs.length();

		if(maxi>0){
			if(a==2){
				bR = true;
			} else if (a==3){
				bR = false;
				for(i=0;i<maxi;i++){
					tU = tUs.get(i);
					TopicUserSetup:delete(tU);
				}
			}
		}

		return bR;

	}

	/* ************************************************************************************************ */

	int fGetTopicUserSetupOrder(Client c, int o){
		if(o==null){ o=1; }

		if(o==0){ return o; }
		
		int maxo = fGetMaxOrder(c, o);

		int ro = maxo + 1;
		
		return ro;
	}

/* ********************************************************************************************************************** */
/* ************************************* SAVE UMBRELLA OBJECT FUNCTIONS ************************************************* */
/* ********************************************************************************************************************** */

	void fSaveTopicUserSetupList(Umbrella u, int o, int activecodeschedule, datetime msd, Client c, Topic t, int rt, int ordercode, int activecodecheck){

		string msg;

		if(fCheckPreviousScheduledExists(c, u, t, activecodecheck)==true){ return null; }
		
		if(o==null){ o = 0; }
		if(rt==null){ rt = 1; }
		if(ordercode==null){ ordercode = 0; }
		o = o * ordercode;

		TopicUserSetup tus = TopicUserSetup:new(); LanguageKeyObject lkoc; LanguageKeyObject lkot; int lt;

		if (c != null && t != null){

			lt = TopicList:fGuessTopicLanguageID(t); lkot = LanguageKeyController:getLanguageKeyByIDNotNull(lt);
			lkoc = c.client_LanguageKey;

			if(lkot==lkoc){
				tus.topicOrder = fGetTopicUserSetupOrder(c, o);
				tus.active = activecodeschedule;
				tus.topicMinStartDate = msd;
				tus.client_topicUserSetup = c;
				tus.topic_topicUserSetup = t;
				tus.umbrella_topicUserSetup = u;
				tus.runType = rt;
				tus.save();

				// If scheduling has been successful, then ensure that Umbrella has also been extended
				if(rt==1){
					UserGroupUmbrellaTimeCalculations:fCheckOrExtendUmbrellaEscalation(c, u, msd);
				}

				msg = String:concat("User ", c.firstName, " ", c.surname, " has been Scheduled for the Topic: '", u.umbrellaID, "' and Sub-Topic: '", t.topicID, "'.");
				Mez:log(msg);
				Alerter:alert(msg);

			} else {
				msg = String:concat("User ", c.firstName, " ", c.surname, " was NOT scheduled for the Topic: '", u.umbrellaID, "' and Sub-Topic: '", t.topicID, "' based on language preference.");
				Mez:log(msg);
				// Alerter:alert(msg);
			}

		}

	}

/* ********************************************************************************************************************** */
/* ****************************** SAVE UMBRELLA FROM VARIABLE INPUTS FUNCTIONS ****************************************** */
/* ********************************************************************************************************************** */

	void fSaveUmbrellaVars (string u1, string t1, int ordernum, string fixeddate, int relativestartnum, int dowstartnum){

	Umbrella u = fGetOrSaveUmbrella(u1);
	Topic t = fGetTopic(t1);
	if(ordernum==null){ ordernum=1; }

		if(u!=null&&t!=null&&ordernum!=null){

			UmbrellaTopicSetupTable uts = UmbrellaTopicSetupTable:new();
			uts.ordernum=ordernum;
			uts.fixeddate=Date:fromString(fixeddate);
			uts.relativestartnum=relativestartnum;
			uts.dowstartnum=dowstartnum;
			uts.topic_UmbrellaUserSetup = t;
			uts.umbrella_UmbrellaUserSetup = u;
			uts.save();

		}

	}

	/* ************************************************************************************************ */

	Umbrella fGetOrSaveUmbrella(string u1){
		Umbrella[] us = Umbrella:equals(umbrellaID, u1); Umbrella u;
		if(us.length()==0){
			u = Umbrella:new();
			u.umbrellaID = u1; u.umbrellaName = u1; u.umbrellaFlags = "default";
			u.save();
		} else {
			u = us.get(0);	
		}
		return u;
	}
	
	/* ************************************************************************************************ */

	Topic fGetTopic(string t1){
		Topic[] ts = Topic:equals(topicID, t1); Topic t;
		if(ts.length()>0){
			t = ts.get(0);
		} else {
			t = null;
		}
		return t;
	}


/* ********************************************************************************************************************** */
/* ************************************ REMOVE UMBRELLA OBJECT FUNCTIONS ************************************************ */
/* ********************************************************************************************************************** */

	void fUpdateTopicUserSetupLocal(TopicUserSetup tU, int i){

	    if(tU!=null){ tU.active = i; tU.save(); }
	    return null;
	    
	}

	/* ************************************************************************************************ */

	void fDeleteTopicUserSetupExecLog(TopicUserSetup tU, int removecode, string ssource, int iaBefore, string iaAfter) {

	    Client c = tU.client_topicUserSetup;
	    Umbrella u = tU.umbrella_topicUserSetup;
	    Topic t = tU.topic_topicUserSetup;
		string slog = String:concat("fDeleteTopicUserSetupExec with client '", c.mobileNumber,"' and umbrella '", u.umbrellaID, "' and topic '", t.topicID,"' and removecode '", removecode, "' and source'", ssource,"' and before-active '",iaBefore, "' and after-active '", iaAfter, "'.");
		Mez:log(slog);
		return null;

	}
	
	/* ************************************************************************************************ */

	void fDeleteTopicUserSetupExec(TopicUserSetup tU, int removecode, string ssource) {
	    
		int iaBefore = tU.active; string iaAfter = "";

	    if(tU.active == 1){ 
	    	if(removecode==null){ removecode = 89; }
	    	if(removecode<80){ removecode = 89; }
	        TopicList:fForceEndTopic(tU, removecode); 
	    }

		/* ********************************** */

	    if( tU.active>=2 && tU.active<=3 && removecode==88 ){ 
	    	fUpdateTopicUserSetupLocal(tU, 3);
	    	iaAfter = tU.active;
	    } else {
			if(tU.active>0){ 
				TopicUserSetup:delete(tU); 
				iaAfter = "null";
			}
		}

	    /* ********************************** */

	    fDeleteTopicUserSetupExecLog(tU, removecode, ssource, iaBefore, iaAfter);

	    /* ********************************** */

		return null;
	}

/* ********************************************************************************************************************** */
/* ********************************************************************************************************************** */
