unit UserGroupController;

ClientGroup[] getAllClientGroups() {
    return ClientGroup:all();
}

ClientGroup[] getGroupsForGroupId(string id) {
    return ClientGroup:equals(idd, id);
}

ClientGroup getGroupForGroupId(string id) {
	ClientGroup group;
    ClientGroup[] groups = getGroupsForGroupId(id);

    if (groups.length() > 0){
    	group = groups.get(0);

    	if (groups.length() > 1){
    		string msg = String:concat("WARNING! There are duplications for the ClientGroup: ", id);
			Alerter:alert(msg);
			Logger:log(msg);
    	}
    }

    return group;
}

/* should be depricated at some point */
ClientGroup getGroupForClient(Client c) {
    // return c.client_chws;
    return c.group;
}

ClientGroup[] getGroupsForWhichClientIsChew(Client c){
    return ClientGroup:relationshipIn(client_chews, c);
}

ClientGroup[] getGroupsForWhichClientIsLinked(Client c){
    ClientGroup[] linkedGroups;
    ClientGroup[] chewGroups = getGroupsForWhichClientIsChew(c);

    linkedGroups.append(c.group);

    for (int i = 0; i < chewGroups.length(); i++){
        ClientGroup g = chewGroups.get(i);
        if (isGroupInGroupCollection(g, linkedGroups) == false){
            linkedGroups.append(g);    
        }
    }

    return linkedGroups;
}

bool isGroupInGroupCollection(ClientGroup needle, ClientGroup[] haystack){

    ClientGroup c;
    for (int i = 0; i < haystack.length(); i++){
        c = haystack.get(i);
        if (needle == c){
            return true;
        }
    }
    return false;
}