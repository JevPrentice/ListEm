unit Doctor_Controller;
string msg;

Doctor[] getAllDoctorCollection(){
	return Doctor:all();
}

Doctor[] getDoctorCollectionForDoctorID(string doctorID){
	return Doctor:equals(doctorID, doctorID);
}

Doctor getDoctorForDoctorID(string doctorID){
	Doctor[] doctorCollection = getDoctorCollectionForDoctorID(doctorID);
	if (doctorCollection.length() == 0){
		return null;
	}
	return doctorCollection.first();
}

Doctor[] getDoctorCollectionForPerson(Person person){
	return Doctor:relationshipIn(doctor_person, person);
}

// Doctor getDoctorForPerson(Person person){
// 	Doctor doctorCollection = getDoctorCollectionForPerson(person);
// 	if (doctorCollection.length()<=0){
// 		return null;
// 	}
// 	return doctorCollection.first();
// }

int getAllDoctorCollectionLength(){
	Doctor[] doctorCollection = getAllDoctorCollection();
	return doctorCollection.length();
}

bool isObjectValidState(Person person, string doctorID){
	if(PrimitiveValidation:isValidString(doctorID, true, "No Doctor ID populated") == false){ return false; }
	if(person == null){ msg = "No Person populated."; Alert:error(msg); return false; }
	return true;
}

Doctor createDoctor(Person person, string doctorID){
	Doctor[] doctorCollection = getDoctorCollectionForDoctorID(doctorID);
	if(doctorCollection.length() > 0){
		msg = "Doctor ID already exists."; Alert:error(msg);
		return null;
	}
	Doctor doctor = Doctor:new();
	doctor.dateRegistered = Mez:now();
	
	return updateDoctor(doctor, false, person, doctorID);
}

Doctor updateDoctor(Doctor doctor, bool isEdit, Person person, string doctorID){
	if (doctor == null || isObjectValidState(person, doctorID) == false){
		return;
	}

	Doctor[] collection = getDoctorCollectionForDoctorID(doctorID);
	if (isEdit == false){
		for (int i = 0; i < collection.length(); i++){
            Doctor tmp = collection.get(i);
            if (doctor != tmp){
                msg = "Doctor cannot be saved, the Doctor ID is aready being used by another Doctor"; Alert:error(msg);
                return null;
            }
        }
	}

	doctor.doctorID = doctorID;
	doctor.doctor_person = person;
	doctor.save();

	doctor.invite(person.mobileNumber);

	msg = "Doctor saved"; Alert:info(msg);

	return doctor;
}

void deleteDoctor(Doctor doctor_var){
	if(doctor_var == null) { return; }
	doctor_var.removeRole();
	Doctor:delete(doctor_var);
}

void generateDoctorData(){
}

