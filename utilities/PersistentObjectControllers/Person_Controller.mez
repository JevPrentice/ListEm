unit Person_Controller;
string msg;

Person[] getAllPersonCollection(){
	return Person:all();
}

int getAllPersonCollectionLength(){
	Person[] personCollection = getAllPersonCollection();
	return personCollection.length();
}

Person[] getPersonCollectionForIdNumber(string idNumber){
	return Person:equals(idNumber, idNumber);
}

Person getPersonForIdNumber(string idNumber){
	Person[] personCollection = getPersonCollectionForIdNumber(idNumber);
	if (personCollection.length() == 0){
		return null;
	}
	return personCollection.first();
}

bool isObjectValidState(string firstNames, string surname, string mobileNumber, string idNumber, GENDER gender){
	if(gender == null){ msg = "No gender populated."; Alert:error(msg); return false; }
	if(PrimitiveValidation:isValidString(surname, true, "No surname populated") == false){ return false; }
	if(PrimitiveValidation:isValidString(mobileNumber, true, "No mobileNumber populated") == false){ return false; }
	if(PrimitiveValidation:isValidString(firstNames, true, "No firstNames populated") == false){ return false; }
	if(PrimitiveValidation:isValidString(idNumber, true, "No idNumber populated") == false){ return false; }
	return true;
}

Person createPerson(string firstNames, string surname, string mobileNumber, string idNumber, GENDER gender){
	
	Person[] collection = getPersonCollectionForIdNumber(person);
	if(collection.length() > 0){
		msg = "A Person already exists for this ID number."; Alert:error(msg);
		return null;
	}

	Person person = Person:new();
	person.dateRegistered = Mez:now();
	return updatePerson(person, false, firstNames, surname, mobileNumber, idNumber, gender);
}

Person updatePerson(Person person, bool isEdit, string firstNames, string surname, string mobileNumber, string idNumber, GENDER gender){
	if (person == null || isObjectValidState(firstNames, surname, mobileNumber, idNumber, gender) == false){
		return;
	}
	person.firstNames = firstNames;
	person.surname = surname;
	person.mobileNumber = mobileNumber;
	person.idNumber = idNumber;
	person.gender = gender;
	person.save();
	return person;
}

void deletePerson(Person person_var){
	if(person_var == null) { return; }
	Person:delete(person_var);
}

Person generateDefaultPerson(){
	Person person = getPersonForIdNumber("0000000000000");
	if (person == null){
		person = createPerson("Default", "Default", "27000000000", "0000000000000", GENDER.Other);
	}
	return person;
}

void generatePersonData(){
	createPerson("firstNames", "surname", "27000000000", "idNumber", GENDER.Other);
}

