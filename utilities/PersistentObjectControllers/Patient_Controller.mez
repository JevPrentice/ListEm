unit Patient_Controller;
string msg;

Patient[] getAllPatientCollection(){
	return Patient:all();
}

int getAllPatientCollectionLength(){
	Patient[] patientCollection = getAllPatientCollection();
	return patientCollection.length();
}

Patient[] getPatientCollectonForPerson(Person person){
	return Patient:relationshipIn(patient_person, person);
}

Patient getPatientForPerson(Person person){
	Patient[] patientCollection = getPatientCollectonForPerson(person);
	if(patientCollection.length()<=0){
		return null;
	}
	return patientCollection.first();
}

bool isObjectValidState(Person person){
	if(person == null){ msg = "No Person populated."; Alert:error(msg); return false; }
	return true;
}

Patient createPatient(Person person){
	if (person == null){
		msg = "No Person populated."; Alert:error(msg);
		return null;
	}

	Patient[] collection = getPatientCollectonForPerson(person);
	if(collection.length() > 0){
		msg = "Person is already a Patient."; Alert:error(msg);
		return null;
	}

	Patient patient = Patient:new();
	patient.dateRegistered = Mez:now();

	msg = "Patient created."; Alert:info(msg);

	return updatePatient(patient, false, person);
}

Patient updatePatient(Patient patient, bool isEdit, Person person){
	if (patient == null || isObjectValidState(person) == false){
		return;
	}

	patient.patient_person = person;
	patient.save();

	msg = "Patient saved."; Alert:info(msg);

	return patient;
}

void deletePatient(Patient patient){
	if(patient == null) { return; }
	patient.removeRole();
	Patient:delete(patient);
	msg = "Patient deleted."; Alert:info(msg);
}

void generatePatientData(){
	//createPatient(Mez:now(), null);
}

