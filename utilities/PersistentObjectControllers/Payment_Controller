unit Payment_Controller;
string msg;

Payment[] getAllPaymentCollection(){
	return Payment:all();
}

int getAllPaymentCollectionLength(){
	Payment[] paymentCollection = getAllPaymentCollection();
	return paymentCollection.length();
}

bool isObjectValidState(datetime dateRegistered, decimal amount, MY_PAYMENT_STATUS status, Doctor doctor_Record, Patient patient_Record){
	if(amount == null){
		msg = "No amount populated."; Alert:error(msg);
		return false;
	}
	if(patient_Record == null){
		msg = "No patient_Record populated."; Alert:error(msg);
		return false;
	}
	if(doctor_Record == null){
		msg = "No doctor_Record populated."; Alert:error(msg);
		return false;
	}
	if(dateRegistered == null){
		msg = "No dateRegistered populated."; Alert:error(msg);
		return false;
	}
	if(status == null){
		msg = "No status populated."; Alert:error(msg);
		return false;
	}
	return true;
}

Payment createPayment(datetime dateRegistered, decimal amount, MY_PAYMENT_STATUS status, Doctor doctor_Record, Patient patient_Record){
	Payment payment_var = Payment:new();
	return updatePayment(payment_var, false, dateRegistered, amount, status, doctor_Record, patient_Record);
}

Payment updatePayment(Payment payment_var, bool isEdit, datetime dateRegistered, decimal amount, MY_PAYMENT_STATUS status, Doctor doctor_Record, Patient patient_Record){
	if (payment_var == null || isObjectValidState(dateRegistered, amount, status, doctor_Record, patient_Record) == false){
		return;
	}

	payment_var.dateRegistered = dateRegistered;
	payment_var.amount = amount;
	payment_var.status = status;
	payment_var.doctor = doctor_Record;
	payment_var.patient = patient_Record;
	payment_var.save();

	return payment_var;
}

void deletePayment(Payment payment_var){
	if(payment_var == null) { return; }
	Payment:delete(payment_var);
}

void generatePaymentData(){
	createPayment(Mez:now(), Math:random(), null, null, null);
}

